C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:49:47 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - INCDIR(..\Library) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-F program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "AD.h"
  11          #include "Timer.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Delay.h"
  15          #include "communication.h"
  16          #include "Other.h"
  17          
  18          /*------- Public variable declarations --------------------------*/
  19          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  20          extern bit enable_sensor_delayEN;
  21          
  22          // ------ Private variable definitions -----------------------------
  23          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  24          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  25          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  26          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  27          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  28          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  29          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  30          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  31          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  32          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  33          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  34          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  35          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  36          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  37          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  38          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  39          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  40          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  41          
  42          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  43          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  44          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  45          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  46          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  47          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  48          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  49          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  50          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:49:47 PAGE 2   

  51          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  52          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  53          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  54          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  55          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  56          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  57          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  58          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  59          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  60          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  61          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  62          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  63          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  64          bit vibration_flag = 0;
  65          tWord vibration_count = 0;
  66          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  67          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ýºóÖÃ1£¬
  68          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  69          tByte enable_sensor_delay_count = 0;      // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  70          bit sensor_3rdalarm_flag = 0;
  71          bit wheeled_flag = 0;
  72          tWord wheeled_count = 0;
  73          
  74          tByte lock_time = 0;
  75          
  76          /*-----------------------------------------------------------*/
  77          void main(void)
  78             {
  79   1         InitTimer(50, 100);
  80   1      
  81   1         Lock_EN = 1;
  82   1         SC_RST = 1;
  83   1      
  84   1         transmit_wire = 0;
  85   1         
  86   1         while(1)
  87   1            {
  88   2            sEOS_Go_To_Sleep();
  89   2            }
  90   1         }
  91          
  92          /*------------------------------------------------------------------
  93             timerT0()
  94             ¶¨Ê±Æ÷0Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
  95          --------------------------------------------------------------------*/
  96          
  97          void timer0() interrupt interrupt_timer_0_overflow
  98             {
  99   1         // ÖØ×°ÔÚ¶¨Ê±Æ÷µÄÊ±¼äÉèÖÃ
 100   1         TH0 = timer0_8H;
 101   1         TL0 = timer0_8L;
 102   1      
 103   1         // ÉèÖÃÒ»¸öÃ¿3sµÄ²Ù×÷
 104   1         if(++timer0_count >= 10)      
 105   1            {
 106   2            // ½«¼ÆÊýÇå0
 107   2            timer0_count = 0;
 108   2            transmiter_EN = ~transmiter_EN;
 109   2            }     
 110   1            
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:49:47 PAGE 3   

 111   1         if(Lock_EN == 0)
 112   1            {
 113   2            if(++lock_time >= 70)
 114   2               {
 115   3               lock_time = 0;
 116   3               Lock_EN = 1;
 117   3               }
 118   2            }
 119   1         }
 120          
 121          /*------------------------------------------------------------------
 122          
 123             // Ö÷»ú±»µÁ±¨¾¯
 124             if(stolen_alarm_flag == 1)    
 125                {
 126                // Ö÷»ú±»µÁ±¨¾¯´ÎÊý£¬Ã¿±¨Ò»´Î¼Ó1£¬Èç¹û´óÓÚ2´Î£¬Ôò¼ÌÐø¼Ó1£¬µ½Ò»¶¨Ê±¼äºó£¬½«flagºÍcountÇå0.ÒÔ´ËÀ´±£Ö¤¸½»úÃ
             -¿´Î±¨¾¯ºó£¬ÔÚ¶ÌÊ±¼äÄÚ
 127                // ÔÙ´ÎÊÕµ½±¨¾¯ÐÅºÅ£¬¾Í²»»á±¨¾¯ÁË¡£
 128                if(++stolen_alarm_count < 3)
 129                   {        
 130                   // ÓïÒôÌáÊ¾£¬Âí´ïÕñ¶¯
 131                   Alarm_stolen_speech();     
 132                   Moto_Vibration();          
 133                   }
 134                else
 135                   {
 136                   if(stolen_alarm_count >= 1200)
 137                      {
 138                      stolen_alarm_count = 0;
 139                      stolen_alarm_flag = 0;
 140                      }
 141                   }
 142                }  
 143          
 144             // Ì§ÆðÐÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌÐø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´ÎÌ§ÆðÖ»·¢4±é¡£
 145             if(raised_alarm_flag == 1) 
 146                {
 147                Alarm_raised_speech();     
 148                Moto_Vibration();         
 149                raised_alarm_flag = 0;
 150                }
 151          
 152             // µ¹µØÐÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌÐø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´Îµ¹µØÖ»·¢4±é¡£
 153             if(fell_alarm_flag == 1)
 154                {
 155                Alarm_fell_speech();      
 156                Moto_Vibration();         
 157                fell_alarm_flag=0;
 158                }
 159          
 160             // Ö÷»úµçÁ¿³äÂúÌáÊ¾
 161             if(Host_battery_high_flag == 1)
 162                {
 163                Host_battery_high_alarm_speech();      
 164                Host_battery_high_flag = 0;
 165                }
 166                
 167             if(battery_stolen_EN == 1)
 168                {
 169                battery_stolen_speech();
 170                battery_stolen_EN = 0;
 171                }
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:49:47 PAGE 4   

 172             
 173             if(wire_broken_EN == 1)
 174                {
 175                wire_broken_speech();
 176                wire_broken_EN = 0;
 177                }
 178          --------------------------------------------------------------------*/
 179          
 180          
 181          /*------------------------------------------------------------------
 182             timerT1()
 183             ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
 184          --------------------------------------------------------------------*/
 185             
 186          void timerT1() interrupt interrupt_timer_1_overflow         
 187             {
 188   1         // ÖØ×°ÔÚ¶¨Ê±Æ÷1µÄÉèÖÃ
 189   1         TH1 = timer1_8H;           
 190   1         TL1 = timer1_8L;
 191   1      
 192   1         // ÅÐ¶Ï½ÓÊÕÏßÊÇ·ñÎª0£¬Èç¹ûÊÇ0£¬Ôò±íÊ¾¿ÉÄÜÓÐÐÅºÅ¹ýÀ´¡£
 193   1         if(receive_wire == 1)               
 194   1            {
 195   2            // Èç¹û½ÓÊÕÏßÊÇ0£¬Ôò½«´Ë±êÖ¾Î»ÖÃ0£¬±íÊ¾´ËÏßÎª0¹ý¡£
 196   2            receive_wire_flag=0;
 197   2            
 198   2            // ½ÓÊÕµ½µÍµçÆ½µÄÊ±¼ä¼ÆÊý£¬´óÓÚ8ms¾ÍÖØÐÂ¼ÆÊý
 199   2            if(++receive_LV_count==120)      
 200   2               {
 201   3               receive_LV_count=0;
 202   3               }
 203   2            }
 204   1         else
 205   1         {
 206   2            if(receive_wire_flag==0)//ËµÃ÷ÓÐÒ»¸öµÍµçÆ½
 207   2            {
 208   3               receive_wire_flag=1;
 209   3      //       one_receive_byte<<=1;
 210   3      
 211   3               if((receive_LV_count>20)&&(receive_LV_count<=80))//µÍµçÆ½³ÖÐøµÄÊ±¼äÐ¡ÓÚ3ms£¬ÔòÎª0
 212   3               {
 213   4                  one_receive_byte<<=1;
 214   4                  one_receive_byte &= 0xfe;
 215   4                  one_receive_byte_count++;
 216   4                  receive_HV_count=0;
 217   4               }
 218   3               if(receive_LV_count > 80)//µÍµçÆ½³ÖÐøµÄÊ±¼ä´óÓÚ4.5ms£¬ÔòÎª1
 219   3               {
 220   4                  one_receive_byte<<=1;
 221   4                  one_receive_byte |= 0x01;
 222   4                  one_receive_byte_count++;
 223   4                  receive_HV_count=0;
 224   4               }
 225   3               else
 226   3               {
 227   4                  receive_HV_count++;  
 228   4               }
 229   3      
 230   3               receive_LV_count=0;
 231   3            }
 232   2            else
 233   2            {
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:49:47 PAGE 5   

 234   3               receive_HV_count++;
 235   3               if(receive_HV_count>=60)
 236   3               {
 237   4                  one_receive_byte_count=0;
 238   4                  receive_wire_flag=1;
 239   4                  data_count=0;
 240   4               }     
 241   3            }
 242   2         }
 243   1      
 244   1         if(one_receive_byte_count == 8)//ËµÃ÷Ò»¸ö×Ö½ÚµÄÊý¾ÝÒÑ¾­½ÓÊÜÍêÈ«
 245   1         {
 246   2            one_receive_byte_count=0;
 247   2            received_data_buffer[data_count]=one_receive_byte;
 248   2            if(data_count==0&&received_data_buffer[0] == CmdHead)
 249   2               {
 250   3               data_count=1;
 251   3               }
 252   2            else if(data_count==1&&received_data_buffer[1] == MyAddress)
 253   2               {
 254   3               data_count=2;
 255   3               }
 256   2            else if(data_count==2)
 257   2            {
 258   3               receive_data_finished_flag = 1;
 259   3               data_count=0;
 260   3            }
 261   2            else 
 262   2            {
 263   3               data_count=0;
 264   3            }
 265   2         }
 266   1      
 267   1         if(receive_data_finished_flag==1)   //ËµÃ÷½ÓÊÕµ½ÁËÊý¾Ý£¬¿ªÊ¼´¦Àí
 268   1            {
 269   2            receive_data_finished_flag=0; //Çå½ÓÊÕ±êÖ¾
 270   2            switch(received_data_buffer[2])//½âÎöÖ¸Áî
 271   2               {
 272   3               case ComMode_1://½ÓÊÕµ½µÄÊÇÖ÷»ú·¢ËÍ¹ýÀ´µÄ±àÂë1µÄÐÅºÅ£¬ËµÃ÷Ö÷»úÔÚ3MÄÚ£¬ÊÇÕý³£µÄ
 273   3                  {  
 274   4                      Lock_EN = 0;
 275   4                  lock_time = 0;
 276   4                  }
 277   3               break;
 278   3               }
 279   2            }
 280   1         }
 281          
 282          /*---------------------------------------------------
 283             end of file
 284          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    332    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     48    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     17    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:49:47 PAGE 6   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
