C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Li
                    -brary) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          /*------- Public variable definitions --------------------------*/
  32          bit ID_certificated_flag = 0;       // Flagged once ID card or Slave certificated successfully.
  33          tByte ID_certificated_numbers = 0;  // Numbers of ID certificated.
  34          
  35          bit Host_stolen_alarming = 0;       // Host stolen is alarming, don't detect vibration for 1st stage.
  36          
  37          // ------ Private variable definitions -----------------------------
  38          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  39          bit EN_host_stolen_alarming = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  40          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  41          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  42          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  43          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  44          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  45          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  46          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  47          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  48          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  49          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  50          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  52          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  53          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 2   

  54          
  55          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  56          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  57          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  58          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  59          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  60          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  61          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  62          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  63          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  64          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  65          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  66          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  67          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  68          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  69          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  70          tByte Open_action_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  71          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  72          tWord load_battery_result = 0;
  73          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  74          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  75          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  76          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  77          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  78          bit vibration_flag = 0;
  79          tWord vibration_count = 0;
  80          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  81          tByte After_IDcert_timecount = 0;      // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  82          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  83          bit sensor_3rdalarm_flag = 0;
  84          bit wheeled_flag = 0;
  85          tWord wheeled_count = 0;
  86          bit IDkey_speech_flash = 0;
  87          
  88          code tByte IDkey6 _at_ 0x003000;
  89          code tByte IDkey7 _at_ 0x003001;
  90          code tByte IDkey8 _at_ 0x003002;
  91          code tByte IDkey9 _at_ 0x003003;
  92          code tByte IDkey10 _at_ 0x003004;
  93          code tByte IDkey11 _at_ 0x003005;
  94          
  95          tWord IDkey_selflearn_HVcount = 0;
  96          tWord IDkey_selflearn_LVcount = 0;
  97          bit IDkey_selflearn_flag1 = 0;
  98          bit IDkey_selflearn_flag2 = 0;
  99          bit IDkey_selflearn_flag3 = 0;
 100          bit IDkey_selflearn_flag4 = 0;
 101          bit IDkey_selflearn_flag5 = 0;
 102          bit ID_selflearning_flag = 0;
 103          tByte ID_selflearning_timecount = 0;
 104          bit IDkey_flash_EN = 0;
 105          
 106          bit Silence_Flag = 0;
 107          bit flashing_flag = 0;
 108          
 109          tByte Check_Motobattery_count = 0;
 110          bit Check_Motobattery_flag = 0;
 111          bit CheckADC_flag = 0;
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 3   

 112          
 113          bit never_alarm = 0;
 114          bit never_alarm_speech = 0;
 115          
 116          bit slave_nearby_actioned_flag = 0;
 117          tByte slave_nearby_count = 0;
 118          
 119          bit ID_speeched_flag = 0;
 120          
 121          tByte Stolen_alarm_reset_count = 0;
 122          
 123          bit wire_broken_reset = 0;
 124          
 125          bit Just_power_up = 1;
 126          
 127          /*------- Private variable declaratuions --------------------------*/
 128          
 129          void main()
 130             {
 131   1         InitT0(1);
 132   1         TR0 = 1;
 133   1         ET0 = 1;
 134   1         PS = 1;
 135   1         
 136   1         InitSensor();
 137   1      
 138   1         Self_learn_speech();
 139   1         
 140   1         sensor_EN = 1;
 141   1         EA = 1;
 142   1         while(1)
 143   1            {     
 144   2            }
 145   1         }
 146          
 147          /*------------------------------------------------------------------
 148             timerT0()
 149             operation every ticket.
 150          --------------------------------------------------------------------*/
 151          
 152          void timer0() interrupt interrupt_timer_0_overflow
 153             {
 154   1         TH0 = timer0_8H;
 155   1         TL0 = timer0_8L;
 156   1         
 157   1      // if((sensor_detect == 0)||(horizontal_sensor == 0))
 158   1      //    {
 159   1      //    ID_speech();
 160   1      //    }
 161   1         
 162   1            if(sensor_EN == 1)   
 163   1               {        
 164   2               // sensor trigger status, 0, 1 or 2?
 165   2               switch(sensor_trigger_count)
 166   2                  {
 167   3                  // case 0, it means host is in waiting status. waiting for first touch.
 168   3                  case 0:
 169   3                     {              
 170   4                     // judge host been touched and also not in vibration alarm
 171   4      //             if((sensor_detect == 0)&&(Host_stolen_alarming == 0)&&(transmiter_EN == 1))      
 172   4                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(Host_stolen_alarming == 0)&&(flashing_flag == 0
             -)&&(transmiter_EN == 1))     
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 4   

 173   4                        {
 174   5                        // judge LV is more than 2ms, if yes, it means a effective touch
 175   5                        if(++sensor_1ststage_count >= 1)       
 176   5                           {
 177   6                           sensor_1ststage_count=0;
 178   6                           
 179   6                           // sensor trigge status progress to case 1.
 180   6                           sensor_trigger_count = 1;
 181   6                           // alarm speech for first touch
 182   6      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 183   6      //                   host_touch_speech();
 184   6                           ID_speech();
 185   6                           }
 186   5                        }
 187   4                     else
 188   4                        {
 189   5                        // if no LV, reset the count.
 190   5                        sensor_1ststage_count = 0;
 191   5                        }
 192   4                     }
 193   3                  break;
 194   3                  
 195   3                  // waiting for next touch, 
 196   3                  case 1:
 197   3                     {
 198   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 199   4                        {
 200   5                        // LV for 2s, means a effective touch
 201   5                        if(++sensor_2ndstage_count >= 1)
 202   5                           {
 203   6                           sensor_2ndstage_count = 0;
 204   6                           sensor_trigger_count = 0;
 205   6                           // alarm speech for 2nd touch
 206   6      //                   SCH_Add_Task(host_2ndtouch_speech, 0, 0);
 207   6                           Self_learn_speech();
 208   6                           }
 209   5                        }
 210   4                     else
 211   4                        {
 212   5                        sensor_2ndstage_count = 0;
 213   5                        }
 214   4                     
 215   4                     // if there is no touch in 4s, reset sensor trigger status, etc.
 216   4                     if(++sensor_2ndstage_time >= 4000)
 217   4                        {
 218   5                        sensor_trigger_count = 0;
 219   5                        sensor_2ndstage_count = 0;
 220   5                        sensor_1ststage_count = 0;
 221   5                        sensor_2ndstage_time = 0;
 222   5                        }
 223   4                     }
 224   3                  break;
 225   3                  
 226   3                  // waiting for 3rd touch
 227   3                  case 2:
 228   3                     {
 229   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 230   4                        {
 231   5                        // 2s LV is a effective touch
 232   5                        if(++sensor_3rdstage_count >= 1)
 233   5                           {
 234   6                           sensor_3rdstage_count = 0;
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 5   

 235   6                           // stolen alarm speech enable
 236   6                           EN_host_stolen_alarming = 1;
 237   6                           host_stolen_alarm2_EN = 1; 
 238   6                           sensor_3rdalarm_flag = 1;  
 239   6                           Stolen_alarm_reset_count = 0;
 240   6                           }
 241   5                        }
 242   4                     else
 243   4                        {
 244   5                        sensor_3rdstage_count = 0;
 245   5                        }
 246   4                     
 247   4                     // if there is no touch in 4s, reset all.
 248   4                     if(++sensor_3rdstage_time >= 4000)
 249   4                        {
 250   5                        sensor_trigger_count = 0;
 251   5                        sensor_1ststage_count = 0;
 252   5                        sensor_2ndstage_count = 0;
 253   5                        sensor_2ndstage_time = 0;
 254   5                        sensor_3rdstage_time = 0;
 255   5                        sensor_3rdstage_count = 0;
 256   5                        }
 257   4                     }
 258   3                  break;
 259   3                  }
 260   2               
 261   2               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 262   2               if(wire_broken == 0)
 263   2                  {
 264   3                  EN_host_stolen_alarming = 1;
 265   3                  host_stolen_alarm2_EN = 1;
 266   3                  Stolen_alarm_reset_count = 0;    
 267   3                  wire_broken_flag = 1;
 268   3                  }
 269   2               else if((wire_broken == 1)&&(wire_broken_flag == 1))
 270   2                  {
 271   3                  wire_broken_reset = 1;
 272   3                  wire_broken_flag = 0;            
 273   3                  ID_speech();
 274   3                  }
 275   2               
 276   2               
 277   2               if(ADC_check_result < 0x100)
 278   2                  {
 279   3                  battery_stolen_EN = 1;
 280   3                  }
 281   2               else
 282   2                  battery_stolen_EN = 0;
 283   2               }
 284   1      //    }
 285   1         
 286   1         // judge whether position sensor is enable
 287   1         if(position_sensor_EN==1)     
 288   1            {
 289   2            // judge whether there is a LV
 290   2            if(raised_sensor_detect == 0) 
 291   2               {
 292   3               // LV > 0.5s means a effective input
 293   3               if(++raise_wire_time==10)
 294   3                  {
 295   4                  // flag raised, and reset fell
 296   4                  raised_flag=1;
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 6   

 297   4                  fell_flag=0;
 298   4                  // judge whether there once been a raised or fell.
 299   4                  if(raised_fell_once_flag == 0)
 300   4                     {
 301   5                     // if no, flag raised and fell flag
 302   5                     raised_fell_flag = 1;               
 303   5                     }
 304   4                  }     
 305   3               }
 306   2            else
 307   2               {
 308   3               raised_flag=0;
 309   3               raised_alarm_count=0;
 310   3               raise_wire_time=0;
 311   3               raised_fell_flag = 0;
 312   3               }
 313   2            // judge whether there is a LV
 314   2            if(fell_sensor_detect==0)
 315   2               {
 316   3               // LV > 0.5s means a effective input
 317   3               if(++fell_wire_time==10)   
 318   3                  {
 319   4                  // flag fell, and reset raised
 320   4                  fell_flag=1;         
 321   4                  raised_flag=0;
 322   4                  // judge whether there once been a raised or fell
 323   4                  if(raised_fell_once_flag == 0)
 324   4                     {
 325   5                     raised_fell_flag = 1;               
 326   5                     }
 327   4                  }     
 328   3               }
 329   2            else
 330   2               {
 331   3               fell_flag=0;
 332   3               fell_alarm_count=0;
 333   3               fell_wire_time=0;
 334   3               raised_fell_flag = 0;
 335   3               }
 336   2            }
 337   1         
 338   1         // judge whether raised or fell, if yes, reset all after 10s.
 339   1         if(raised_fell_flag == 1)
 340   1            {
 341   2            if(++raised_fell_number >= 4000)
 342   2               {
 343   3               raised_fell_flag = 0;
 344   3               raised_fell_number = 0;
 345   3               raised_fell_once_flag = 1;
 346   3               
 347   3               sensor_trigger_count = 0;
 348   3               sensor_1ststage_count = 0;
 349   3               sensor_2ndstage_count = 0;
 350   3               sensor_2ndstage_time = 0;
 351   3               sensor_3rdstage_time = 0;
 352   3               sensor_3rdstage_interval = 800;
 353   3               sensor_3rdstage_count = 0;
 354   3               sensor_3rdstage_effcount = 0;             
 355   3               }
 356   2            }
 357   1         }
 358          
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 7   

 359          /*-----------------------------------------------
 360             UART interrupt
 361          -----------------------------------------------*/
 362          void uart_isr() interrupt 4 
 363             {
 364   1         if(RI)
 365   1            {
 366   2            RI=0;
 367   2            received_data_buffer[data_count] = SBUF;
 368   2      
 369   2            // assign one byte to buffer[i] 
 370   2            
 371   2            if(ID_selflearning_flag == 0)
 372   2               {
 373   3               // judge whether buffer[0] is CmdHead
 374   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 375   3                  {
 376   4                  data_count = 1;
 377   4                  }
 378   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 379   3                  {
 380   4                  data_count = 2;
 381   4                  }
 382   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 383   3                  {
 384   4                  data_count = 3;
 385   4                  }
 386   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 387   3                  {
 388   4                  data_count = 4;
 389   4                  }
 390   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 391   3                  {
 392   4                  data_count = 5;
 393   4                  }
 394   3               #ifdef ID
 395   3               else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
 396   3                  {
 397   4                  data_count = 0;   
 398   4                  ID_certificated_flag = 1;
 399   4                  After_IDcert_timecount = 0;
 400   4                  IDkey_speech_flash = 1;
 401   4                  
 402   4                  IDcerted_speech();
 403   4                        
 404   4                  if(ID_certificated_numbers++ >= 1)
 405   4                     {
 406   5                     Silence_Flag = 1;
 407   5                     }
 408   4                  if(++ID_certificated_numbers >= 11)
 409   4                     {
 410   5                     never_alarm = 1;
 411   5                     never_alarm_speech = 1;
 412   5                     Silence_Flag = 0;
 413   5                     ID_certificated_numbers = 0;
 414   5                     }
 415   4                  }
 416   3               #endif
 417   3               #ifdef WX
                       else if(data_count == 5)
                          {
                          receive_data_finished_flag = 1;
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 8   

                          data_count = 0;
                          }        
                       #endif
 424   3               else 
 425   3                  {
 426   4                  data_count = 0;
 427   4                  }  
 428   3      
 429   3               #ifdef WX
                       if(receive_data_finished_flag == 1)
                          {
                          receive_data_finished_flag  = 0;
                          switch(received_data_buffer[5])
                             {
                             case ComMode_1:
                                {
                                ID_certificated_flag = 1;
                                After_IDcert_timecount = 0;
                                IDkey_speech_flash = 1;
                                IDcerted_speech();
                                slave_nearby_count = 0;
                                }
                             break;
                             
                             case ComMode_11:
                                {
                                Silence_Flag = 1;
                                Self_learn_speech();
              //                never_alarm = ~never_alarm;
                                }
                             break;
                             }
                          }
                       #endif
 455   3               }
 456   2            else
 457   2               {        
 458   3               #ifdef ID
 459   3               if(++data_count >= 6)
 460   3                  {
 461   4                  data_count = 0;
 462   4                  IDkey_flash_EN = 1;
 463   4                  }
 464   3               #endif
 465   3               
 466   3               #ifdef WX
                       if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
                          {
                          data_count = 1;
                          }
                       else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
                          {
                          data_count = 2;
                          }
                       else if(data_count == 2)
                          {
                          data_count = 3;
                          }
                       else if(data_count == 3)
                          {
                          data_count = 4;
                          }
C51 COMPILER V9.54   MAIN                                                                  06/17/2015 06:05:50 PAGE 9   

                       else if(data_count == 4)
                          {
                          data_count = 5;
                          }
                       else if(data_count == 5)
                          {
                          data_count = 6;
                          }
                       else if(data_count == 6)
                          {
                          data_count = 0;
                          IDkey_flash_EN = 1;
                          ID_speech();
                          }
                       else 
                          {
                          data_count = 0;
                          }
                       #endif
 502   3               }
 503   2            }
 504   1         }
 505          
 506          
 507          /*---------------------------------------------------
 508             end of file
 509          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    775    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     57    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     35    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
