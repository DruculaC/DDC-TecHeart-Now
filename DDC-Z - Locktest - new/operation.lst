C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT ROM(COMPACT) OPTIMIZE
                    -(8,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          #include "ISP_DataFlash.h"
  18          
  19          /*------ private variable --------------------------*/
  20          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  21          
  22          bit sensor_EN = 0;
  23          
  24          tWord key_rotate_off_time = 0;
  25          tWord wire_broken_time = 0;
  26          tByte wire_broken_level = 0;
  27          
  28          bit vibration_flag1 = 0;
  29          tWord vibration_count1 = 0;
  30          tWord ADC_check_saved_result = 0;      //作为AD检测值的存储值，即上一次播报的值。
  31          
  32          
  33          tByte vibration_count2 = 0;
  34          /*------- Public variable declarations --------------------------*/
  35          extern bit position_sensor_EN;   
  36          extern bit fell_flag;                  
  37          extern bit raised_flag;          
  38          extern tByte sensor_trigger_count;  
  39          extern tByte sensor_1ststage_count; 
  40          extern bit raised_fell_once_flag;         
  41          extern bit raised_fell_flag;              
  42          extern bit EN_host_stolen_alarming;     
  43          extern bit host_stolen_alarm2_EN;      
  44          extern tByte host_stolen_alarm1_count;    
  45          extern tByte host_stolen_alarm2_count;    
  46          extern bit Host_stolen_alarming;             
  47          extern tWord sensor_3rdstage_time;        
  48          extern tByte sensor_3rdstage_effcount;    
  49          extern tByte sensor_3rdstage_count;       
  50          extern tWord sensor_3rdstage_interval;    
  51          extern tWord sensor_2ndstage_time;     
  52          extern tByte sensor_2ndstage_count;    
  53          extern tWord ADC_check_result;      
  54          extern tByte wire_broken_count;     
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 2   

  55          extern bit wire_broken_flag;        
  56          extern bit battery_stolen_EN;       
  57          extern tByte battery_stolen_count;
  58          extern bit sensor_3rdalarm_flag;
  59          extern tByte enable_sensor_delay_count;      
  60          extern bit Silence_Flag;
  61          extern tByte Open_action_flag;      
  62          extern tByte ID_certificated_numbers;
  63          extern bit ID_certificated_flag;       
  64          extern tByte After_IDcert_timecount;      
  65          extern bit never_alarm;
  66          extern bit IDkey_selflearn_flag1;
  67          extern bit IDkey_selflearn_flag2;
  68          extern bit IDkey_selflearn_flag3;
  69          extern bit IDkey_selflearn_flag4;
  70          extern bit IDkey_selflearn_flag5;
  71          extern bit ID_selflearning_flag;
  72          extern tByte ID_selflearning_timecount;
  73          extern tWord IDkey_selflearn_HVcount;
  74          extern tWord IDkey_selflearn_LVcount;
  75          extern tByte fell_alarm_count;
  76          extern tByte raised_alarm_count;
  77          extern tByte Check_Motobattery_count;
  78          extern bit Check_Motobattery_flag;
  79          extern tWord load_battery_result;
  80          extern bit ID_speeched_flag;
  81          extern bit slave_nearby_actioned_flag;
  82          extern bit IDkey_speech_flash;
  83          extern bit wire_broken_reset;
  84          extern tByte Stolen_alarm_reset_count;
  85          extern bit vibration_flag;
  86          extern tByte slave_nearby_count;
  87          extern bit wheeled_flag;
  88          extern bit IDkey_flash_EN;
  89          extern bit flashing_flag;
  90          extern tWord vibration_count;
  91          extern tWord wheeled_count;
  92          extern bit Just_power_up;
  93          extern bit Autolock_G;
  94          extern tWord timer0_count2;
  95          extern bit Emergency_open_G;
  96          
  97          /*-----------------------------------------
  98             slave_away_operation()
  99             
 100             operation for slave is away
 101          ------------------------------------------*/
 102          void slave_away_operation(void)
 103             {  
 104   1         if(Silence_Flag == 0)
 105   1            {
 106   2            close_lock_speech(); 
 107   2      
 108   2            Broadcast_battery();
 109   2            
 110   2      //    Check_Motobattery_flag = 1;
 111   2      //    Check_Motobattery_count = 0;
 112   2            }
 113   1         // Enable_sensor();  
 114   1         enable_sensor_delayEN = 1;
 115   1         enable_sensor_delay_count = 0;
 116   1         // delay time, avoid sensor trigger on.
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 3   

 117   1         Delay(20);
 118   1         ID_certificated_numbers = 0;
 119   1      
 120   1         if(Silence_Flag == 1)
 121   1            Silence_Flag = 0;
 122   1         }
 123          
 124          /*----------------------------------------------------------------------
 125                slave_nearby_operation()
 126                operation for slave is nearby
 127          ----------------------------------------------------------------------*/
 128          void slave_nearby_operation(void)
 129             {
 130   1         slave_nearby_actioned_flag = 1;
 131   1         
 132   1         ID_speeched_flag = 0;      
 133   1         After_IDcert_timecount = 0;
 134   1         ID_certificated_flag = 0;
 135   1         ID_certificated_numbers = 0;     
 136   1      
 137   1         Delay_500ms();
 138   1         Delay_500ms();
 139   1         Delay_500ms();
 140   1         Delay_500ms();
 141   1         Externalmotor = 0;
 142   1         
 143   1         if(Emergency_open_G == 0)
 144   1            {
 145   2            Generator_lock = 1;
 146   2            }
 147   1            
 148   1         if(Silence_Flag == 0)
 149   1            {
 150   2            open_lock_speech();
 151   2            Externalmotor = 0;
 152   2            
 153   2            if(Just_power_up == 0)
 154   2               Broadcast_battery();
 155   2               
 156   2            key_rotate_on_speech();
 157   2            }
 158   1      
 159   1      
 160   1      /*
 161   1         if(Silence_Flag == 0)
 162   1            {
 163   1            open_lock_speech();
 164   1            Externalmotor = 0;
 165   1            if(Just_power_up == 0)
 166   1               verifybattery(load_battery_result);
 167   1            key_rotate_on_speech();
 168   1            }
 169   1         else
 170   1            {
 171   1            Delay_500ms();
 172   1            Delay_500ms();
 173   1            Externalmotor = 0;
 174   1            }
 175   1      */    
 176   1      
 177   1         }
 178          
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 4   

 179          /*------------------------------------------------------------------
 180             InitSensor()
 181             Initialise Sensor.
 182          ------------------------------------------------------------------*/
 183          void InitSensor(void)
 184             {
 185   1         sensor_EN = 0;
 186   1         position_sensor_EN = 0;
 187   1         enable_sensor_delayEN = 0; 
 188   1         raised_sensor_detect = 1;
 189   1         fell_sensor_detect = 1; 
 190   1         }
 191             
 192          /*------------------------------------------------------------------
 193             Host_stolen_action()
 194             Determine host has been triggled 3 times, alarm action.
 195          ------------------------------------------------------------------*/
 196          void Host_stolen_action(void)
 197             {
 198   1         // if host has been touched 3 times, alarm 2 speeches alternantively.
 199   1         if(EN_host_stolen_alarming == 1)
 200   1            {
 201   2            Host_stolen_alarming = 1;
 202   2            
 203   2            stolen_alarm_speech1();
 204   2            stolen_alarm_speech2();
 205   2            #ifdef Z3
                    if(wire_broken_flag == 0)
                       {
                       UART_Send_Data(ComMode_3);                                                       
                       }
                    else
                       {                                                                     
                       UART_Send_Data(ComMode_6);                                                       
                       }
                    #endif
 215   2            }
 216   1         }
 217          
 218          /*------------------------------------------------------------------
 219             ENsensor_afterIDcert()
 220             6s After ID certificated, enable sensor. 
 221             If ID certficated 6 times, don't enable sensor.
 222          ------------------------------------------------------------------*/
 223          void ENsensor_afterIDcert(void)
 224             {
 225   1         if(ID_certificated_flag == 1)
 226   1            {
 227   2            // 3 tickets after ID certificated.
 228   2            if(++After_IDcert_timecount >= 15)
 229   2               {
 230   3               ID_certificated_flag = 0;
 231   3               After_IDcert_timecount = 0;         
 232   3               ID_certificated_numbers = 0;
 233   3               
 234   3               // 
 235   3               if((Open_action_flag == 0)&&(never_alarm == 0))
 236   3                  {
 237   4                  Enable_sensor();              
 238   4                  }           
 239   3               never_alarm = 0;
 240   3               
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 5   

 241   3               }        
 242   2            }
 243   1         }
 244          
 245          /*------------------------------------------------------------------
 246             ENsensor_After_Close()
 247          ------------------------------------------------------------------*/
 248          void ENsensor_After_Close(void)
 249             {
 250   1         if((enable_sensor_delayEN == 1)&&((key_rotate == 0)||(Autolock_G == 1)))
 251   1            {
 252   2            if(++enable_sensor_delay_count >= 3)
 253   2               {
 254   3               enable_sensor_delay_count = 0;
 255   3               enable_sensor_delayEN = 0;
 256   3               if(never_alarm == 0)
 257   3                  Enable_sensor();
 258   3               }
 259   2            }  
 260   1         }
 261          
 262          /*-----------------------------------------------------------------
 263             SelfLearn_Reset()
 264             PIN22 triggles 3 times, the system enters selflearn mode
 265          ------------------------------------------------------------------*/
 266          void SelfLearn_Reset(void)
 267             {  
 268   1         if(ID_selflearning_flag == 1)
 269   1            {
 270   2            if(++ID_selflearning_timecount > 10)
 271   2               {
 272   3               ID_selflearning_flag = 0;
 273   3               ID_selflearning_timecount = 0;            
 274   3               // Reset relatively flag and count.
 275   3               IDkey_selflearn_HVcount = 0;
 276   3               IDkey_selflearn_LVcount = 0;
 277   3               IDkey_selflearn_flag1 = 0;
 278   3               IDkey_selflearn_flag2 = 0;
 279   3               IDkey_selflearn_flag3 = 0;
 280   3               IDkey_selflearn_flag4 = 0;
 281   3               IDkey_selflearn_flag5 = 0;
 282   3               }        
 283   2            }
 284   1         }
 285          
 286          /*---------------------------------------------------
 287             Fell_Alarm_to_Slave()
 288             Send fell alarm signal to remote slave.
 289          ----------------------------------------------------*/
 290          void Fell_Alarm_to_Slave(void)
 291             {
 292   1         if((fell_flag==1)&&(fell_alarm_count<5))
 293   1            {
 294   2            UART_Send_Data(ComMode_5);                                                       
 295   2            fell_alarm_count++;
 296   2            }  
 297   1         }
 298          
 299          /*----------------------------------------------------
 300             Raise_Alarm_to_Slave()
 301             Send raised alarm signal to remote slave
 302          -----------------------------------------------------*/
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 6   

 303          void Raise_Alarm_to_Slave(void)
 304             {
 305   1         if((raised_flag==1)&&(raised_alarm_count<5))    
 306   1            {
 307   2            UART_Send_Data(ComMode_4);                                                       
 308   2            raised_alarm_count++;
 309   2            }        
 310   1         }
 311          
 312          /*----------------------------------------------------
 313             Batstolen_Alarm_to_Slave()
 314             Send battery stolen alarm signal to remote slave
 315          -----------------------------------------------------*/
 316          void Batstolen_Alarm_to_Slave(void)
 317             {
 318   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 20))
 319   1            {
 320   2            UART_Send_Data(ComMode_2);                                                       
 321   2            battery_stolen_count++;
 322   2            }  
 323   1         }
 324          
 325          /*----------------------------------------------------
 326             Disable_sensor_after_IDcert()
 327          -----------------------------------------------------*/
 328          void Disable_sensor_after_IDcert(void)
 329             {
 330   1         if(IDkey_speech_flash == 1)
 331   1            {
 332   2            IDkey_speech_flash = 0;
 333   2      
 334   2            disable_sensor();
 335   2            }  
 336   1         }
 337          
 338          /*----------------------------------------------------
 339             Reset_after_wirebroken()
 340          -----------------------------------------------------*/
 341          void Reset_after_wirebroken(void)
 342             {
 343   1         if(wire_broken_reset == 1)
 344   1            {
 345   2            wire_broken_reset = 0;
 346   2            host_stolen_alarm1_count = 0;
 347   2            EN_host_stolen_alarming = 0;           
 348   2            Host_stolen_alarming = 0;
 349   2            sensor_3rdalarm_flag = 0;
 350   2            }
 351   1         }
 352          
 353          /*----------------------------------------------------
 354             Reset_after_stolen_alarming()
 355             15 tickets after stolen alarm, shut alarm.
 356          -----------------------------------------------------*/
 357          void Reset_after_stolen_alarming(void)
 358             {
 359   1         if(EN_host_stolen_alarming == 1)
 360   1            {
 361   2            if(++Stolen_alarm_reset_count > 5)
 362   2               {
 363   3               host_stolen_alarm1_count = 0;
 364   3               EN_host_stolen_alarming = 0;
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 7   

 365   3               Host_stolen_alarming = 0;
 366   3               sensor_3rdalarm_flag = 0;
 367   3               Stolen_alarm_reset_count = 0;
 368   3               close_tranceiver();
 369   3               }
 370   2            }
 371   1         }
 372          
 373          /*-----------------------------------------------------
 374             Ensensor_after_slave_away()
 375          ------------------------------------------------------*/
 376          void Ensensor_after_slave_away(void)
 377             {
 378   1         if((vibration_flag1 == 0)&&(wheeled_flag == 0)&&(Just_power_up == 0))
 379   1            {
 380   2            if(++slave_nearby_count > 6)
 381   2               {
 382   3               slave_nearby_count = 7;
 383   3               slave_nearby_actioned_flag = 0;
 384   3               ID_certificated_flag = 0;
 385   3               if(never_alarm == 0)
 386   3                  Enable_sensor();
 387   3               }
 388   2            }  
 389   1         }
 390          
 391          /*----------------------------------------------------
 392             Detect_selflearn_action()
 393          -----------------------------------------------------*/
 394          void Detect_selflearn_action(void)
 395             {
 396   1         if((key_rotate == 1)||(Emergency_open_G == 1))
 397   1      // if(key_rotate == 1)
 398   1            {
 399   2            // 如果钥匙打开，则打开控制器12V电源。
 400   2            Lock_EN = 0;
 401   2      
 402   2            if(wire_broken == 1)
 403   2               {
 404   3               wire_broken_time += 1;
 405   3               if(wire_broken_time >= 6000)
 406   3                  {
 407   4                  wire_broken_time = 6001;
 408   4                  wire_broken_level = 0;
 409   4                  ID_selflearning_flag = 0;
 410   4                  }
 411   3               }
 412   2            else
 413   2               {
 414   3               if(wire_broken_time > 50)
 415   3                  {
 416   4                  wire_broken_time = 0;
 417   4                  wire_broken_level += 1;
 418   4                  }
 419   3               }
 420   2            
 421   2            if(wire_broken_level > 6)
 422   2               {
 423   3               wire_broken_level = 0;
 424   3               ID_selflearning_flag = 1;
 425   3               Self_learn_speech();
 426   3               }
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 8   

 427   2            }
 428   1         else if((key_rotate == 0)&&(Open_action_flag == 0)&&(Emergency_open_G == 0))
 429   1      // else if((key_rotate == 0)&&(Open_action_flag == 0))
 430   1            Lock_EN = 1;
 431   1      
 432   1            
 433   1         if(IDkey_flash_EN == 1)
 434   1            {
 435   2            IDkey_flash_EN = 0;
 436   2            flashing_flag = 1;
 437   2            ID_selflearning_flag = 0;
 438   2            
 439   2            Self_learn_programming();
 440   2            
 441   2            Self_learn_speech();
 442   2            
 443   2            #if (defined Z3) && (defined ID)
                    UART_Send_Data_match();
                    #endif
 446   2            }  
 447   1         }
 448          
 449          /*---------------------------------------------------
 450             Detect_open_action()
 451          ---------------------------------------------------*/
 452          void Detect_open_action(void)
 453             {
 454   1         if(((key_rotate == 1)||(Emergency_open_G == 1))&&(Open_action_flag == 0)&&(ID_certificated_flag == 1)&&(n
             -ever_alarm == 0))      
 455   1            {
 456   2            disable_sensor();
 457   2            Open_action_flag = 1;
 458   2            ID_speeched_flag = 0;
 459   2            
 460   2            After_IDcert_timecount = 0;
 461   2            ID_certificated_flag = 0;
 462   2            ID_certificated_numbers = 0;
 463   2            slave_nearby_actioned_flag = 1;
 464   2            ElecMotor_CW();
 465   2            slave_nearby_operation();
 466   2      
 467   2            Just_power_up = 0;
 468   2                  
 469   2            Autolock_G = 0;
 470   2            timer0_count2 = 0;
 471   2            }        
 472   1         }
 473          
 474          /*---------------------------------------------------
 475             Detect_close_action()
 476          ---------------------------------------------------*/
 477          void Detect_close_action(void)
 478             {
 479   1         if((((key_rotate == 0)&&(Emergency_open_G == 0))||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1))&&
             -(Open_action_flag == 1))
 480   1      // if(((key_rotate == 0)||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1)||(Emergency_open_G == 0))&&
             -(Open_action_flag == 1))
 481   1            {
 482   2            Generator_lock = 0;
 483   2            
 484   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 485   2               {
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 9   

 486   3               key_rotate_off_time += 1;
 487   3               if(key_rotate_off_time >= 1500)
 488   3                  {
 489   4                  if((key_rotate == 0)||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1))
 490   4                     {
 491   5                     ElecMotor_ACW();
 492   5      
 493   5                     Open_action_flag = 0;
 494   5                     slave_away_operation();
 495   5                     IDkey_speech_flash = 0;
 496   5                     ID_speeched_flag = 0;
 497   5      
 498   5                     timer0_count2 = 0;
 499   5                     Emergency_open_G = 0;
 500   5                     }
 501   4                  }
 502   3               }
 503   2            }
 504   1         else if(key_rotate == 1)
 505   1            key_rotate_off_time = 0;
 506   1         }
 507          
 508          /*------------------------------------------------------
 509             Detect_vibration()
 510          -------------------------------------------------------*/
 511          void Detect_vibration(void)
 512             {
 513   1         if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 514   1            {
 515   2            if(++vibration_count2 >= 2)
 516   2               {
 517   3               vibration_count2 = 0;
 518   3               vibration_flag = 1;
 519   3               vibration_count = 0;
 520   3               
 521   3               vibration_flag1 = 1;
 522   3               vibration_count1 = 0;   
 523   3               
 524   3               timer0_count2 = 0;         
 525   3               }     
 526   2            }
 527   1         else
 528   1            vibration_count2 = 0;
 529   1            
 530   1          if(vibration_flag == 1)
 531   1            {
 532   2            if(++vibration_count >= 4000)
 533   2               {
 534   3               vibration_flag = 0;
 535   3               vibration_count = 0;
 536   3               }
 537   2            }
 538   1      
 539   1          if(vibration_flag1 == 1)
 540   1            {
 541   2            if(++vibration_count1 >= 10000)
 542   2               {
 543   3               vibration_flag1 = 0;
 544   3               vibration_count1 = 0;
 545   3               }
 546   2            }
 547   1         }
C51 COMPILER V9.54   OPERATION                                                             11/04/2016 15:27:04 PAGE 10  

 548          
 549          /*----------------------------------------------------
 550             Detect_wheel_moving()
 551          -----------------------------------------------------*/
 552          void Detect_wheel_moving(void)
 553             {
 554   1         if(wheeled_rotate == 1)
 555   1            {
 556   2            wheeled_flag = 1;
 557   2            wheeled_count = 0;
 558   2            
 559   2            timer0_count2 = 0;
 560   2            }
 561   1         if(wheeled_flag == 1)
 562   1            {
 563   2            if(++wheeled_count >= 2000)
 564   2               {
 565   3               wheeled_flag = 0;
 566   3               wheeled_count = 0;
 567   3               }
 568   2            }  
 569   1         }
 570          
 571          /*---------------------------------------------------
 572             end of file
 573          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    780    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     10    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
