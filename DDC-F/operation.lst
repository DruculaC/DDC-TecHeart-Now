C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT ROM(COMPACT) OPTIMIZE
                    -(8,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          #include "ISP_DataFlash.h"
  18          
  19          /*------ private variable --------------------------*/
  20          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  21          
  22          bit sensor_EN = 0;
  23          
  24          tWord key_rotate_off_time = 0;
  25          tWord wire_broken_time = 0;
  26          tByte wire_broken_level = 0;
  27          
  28          bit vibration_flag1 = 0;
  29          tWord vibration_count1 = 0;
  30          
  31          
  32          tByte vibration_count2 = 0;
  33          /*------- Public variable declarations --------------------------*/
  34          extern bit position_sensor_EN;   
  35          extern bit fell_flag;                  
  36          extern bit raised_flag;          
  37          extern tByte sensor_trigger_count;  
  38          extern tByte sensor_1ststage_count; 
  39          extern bit raised_fell_once_flag;         
  40          extern bit raised_fell_flag;              
  41          extern bit EN_host_stolen_alarming;     
  42          extern bit host_stolen_alarm2_EN;      
  43          extern tByte host_stolen_alarm1_count;    
  44          extern tByte host_stolen_alarm2_count;    
  45          extern bit Host_stolen_alarming;             
  46          extern tWord sensor_3rdstage_time;        
  47          extern tByte sensor_3rdstage_effcount;    
  48          extern tByte sensor_3rdstage_count;       
  49          extern tWord sensor_3rdstage_interval;    
  50          extern tWord sensor_2ndstage_time;     
  51          extern tByte sensor_2ndstage_count;    
  52          extern tWord ADC_check_result;      
  53          extern tByte wire_broken_count;     
  54          extern bit wire_broken_flag;        
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 2   

  55          extern bit battery_stolen_EN;       
  56          extern tByte battery_stolen_count;
  57          extern bit sensor_3rdalarm_flag;
  58          extern tByte enable_sensor_delay_count;      
  59          extern bit Silence_Flag;
  60          extern tByte Open_action_flag;      
  61          extern tByte ID_certificated_numbers;
  62          extern bit ID_certificated_flag;       
  63          extern tByte After_IDcert_timecount;      
  64          extern bit never_alarm;
  65          extern bit IDkey_selflearn_flag1;
  66          extern bit IDkey_selflearn_flag2;
  67          extern bit IDkey_selflearn_flag3;
  68          extern bit IDkey_selflearn_flag4;
  69          extern bit IDkey_selflearn_flag5;
  70          extern bit ID_selflearning_flag;
  71          extern tByte ID_selflearning_timecount;
  72          extern tWord IDkey_selflearn_HVcount;
  73          extern tWord IDkey_selflearn_LVcount;
  74          extern tByte fell_alarm_count;
  75          extern tByte raised_alarm_count;
  76          extern tByte Check_Motobattery_count;
  77          extern bit Check_Motobattery_flag;
  78          extern tWord load_battery_result;
  79          extern bit ID_speeched_flag;
  80          extern bit slave_nearby_actioned_flag;
  81          extern bit IDkey_speech_flash;
  82          extern bit wire_broken_reset;
  83          extern tByte Stolen_alarm_reset_count;
  84          extern bit vibration_flag;
  85          extern tByte slave_nearby_count;
  86          extern bit wheeled_flag;
  87          extern bit IDkey_flash_EN;
  88          extern bit flashing_flag;
  89          extern tWord vibration_count;
  90          extern tWord wheeled_count;
  91          extern bit Just_power_up;
  92          extern bit Autolock_G;
  93          extern tWord timer0_count2;
  94          
  95          /*-----------------------------------------
  96             slave_away_operation()
  97             
  98             operation for slave is away
  99          ------------------------------------------*/
 100          void slave_away_operation(void)
 101             {  
 102   1         if(Silence_Flag == 0)
 103   1            {
 104   2            close_lock_speech(); 
 105   2            load_battery_result = ADC_check_result;
 106   2            verifybattery(load_battery_result);
 107   2      
 108   2      //    Check_Motobattery_flag = 1;
 109   2      //    Check_Motobattery_count = 0;
 110   2            }
 111   1         // Enable_sensor();  
 112   1         enable_sensor_delayEN = 1;
 113   1         enable_sensor_delay_count = 0;
 114   1         // delay time, avoid sensor trigger on.
 115   1         Delay(20);
 116   1         ID_certificated_numbers = 0;
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 3   

 117   1      
 118   1         if(Silence_Flag == 1)
 119   1            Silence_Flag = 0;
 120   1         }
 121          
 122          /*----------------------------------------------------------------------
 123                slave_nearby_operation()
 124                operation for slave is nearby
 125          ----------------------------------------------------------------------*/
 126          void slave_nearby_operation(void)
 127             {
 128   1         slave_nearby_actioned_flag = 1;
 129   1         
 130   1         ID_speeched_flag = 0;      
 131   1         After_IDcert_timecount = 0;
 132   1         ID_certificated_flag = 0;
 133   1         ID_certificated_numbers = 0;     
 134   1      
 135   1         Delay_500ms();
 136   1         Delay_500ms();
 137   1         Delay_500ms();
 138   1         Delay_500ms();
 139   1         Externalmotor = 0;
 140   1         Generator_lock = 1;
 141   1         
 142   1         if(Silence_Flag == 0)
 143   1            {
 144   2            open_lock_speech();
 145   2            Externalmotor = 0;
 146   2            if(Just_power_up == 0)
 147   2               verifybattery(load_battery_result);
 148   2            key_rotate_on_speech();
 149   2            }
 150   1      
 151   1      
 152   1      /*
 153   1         if(Silence_Flag == 0)
 154   1            {
 155   1            open_lock_speech();
 156   1            Externalmotor = 0;
 157   1            if(Just_power_up == 0)
 158   1               verifybattery(load_battery_result);
 159   1            key_rotate_on_speech();
 160   1            }
 161   1         else
 162   1            {
 163   1            Delay_500ms();
 164   1            Delay_500ms();
 165   1            Externalmotor = 0;
 166   1            }
 167   1      */    
 168   1      
 169   1         }
 170          
 171          /*------------------------------------------------------------------
 172             InitSensor()
 173             Initialise Sensor.
 174          ------------------------------------------------------------------*/
 175          void InitSensor(void)
 176             {
 177   1         sensor_EN = 0;
 178   1         position_sensor_EN = 0;
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 4   

 179   1         enable_sensor_delayEN = 0; 
 180   1         raised_sensor_detect = 1;
 181   1         fell_sensor_detect = 1; 
 182   1         }
 183             
 184          /*------------------------------------------------------------------
 185             Host_stolen_action()
 186             Determine host has been triggled 3 times, alarm action.
 187          ------------------------------------------------------------------*/
 188          void Host_stolen_action(void)
 189             {
 190   1         // if host has been touched 3 times, alarm 2 speeches alternantively.
 191   1         if(EN_host_stolen_alarming == 1)
 192   1            {
 193   2            Host_stolen_alarming = 1;
 194   2            
 195   2            stolen_alarm_speech1();
 196   2            stolen_alarm_speech2();
 197   2            #ifdef Z3
 198   2            if(wire_broken_flag == 0)
 199   2               {
 200   3               UART_Send_Data(ComMode_3);                                                       
 201   3               }
 202   2            else
 203   2               {                                                                     
 204   3               UART_Send_Data(ComMode_6);                                                       
 205   3               }
 206   2            #endif
 207   2            }
 208   1         }
 209          
 210          /*------------------------------------------------------------------
 211             ENsensor_afterIDcert()
 212             6s After ID certificated, enable sensor. 
 213             If ID certficated 6 times, don't enable sensor.
 214          ------------------------------------------------------------------*/
 215          void ENsensor_afterIDcert(void)
 216             {
 217   1         if(ID_certificated_flag == 1)
 218   1            {
 219   2            // 3 tickets after ID certificated.
 220   2            if(++After_IDcert_timecount >= 15)
 221   2               {
 222   3               ID_certificated_flag = 0;
 223   3               After_IDcert_timecount = 0;         
 224   3               ID_certificated_numbers = 0;
 225   3               
 226   3               // 
 227   3               if((Open_action_flag == 0)&&(never_alarm == 0))
 228   3                  {
 229   4                  Enable_sensor();              
 230   4                  }           
 231   3               never_alarm = 0;
 232   3               
 233   3               }        
 234   2            }
 235   1         }
 236          
 237          /*------------------------------------------------------------------
 238             ENsensor_After_Close()
 239          ------------------------------------------------------------------*/
 240          void ENsensor_After_Close(void)
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 5   

 241             {
 242   1         if((enable_sensor_delayEN == 1)&&((key_rotate == 0)||(Autolock_G == 1)))
 243   1            {
 244   2            if(++enable_sensor_delay_count >= 3)
 245   2               {
 246   3               enable_sensor_delay_count = 0;
 247   3               enable_sensor_delayEN = 0;
 248   3               if(never_alarm == 0)
 249   3                  Enable_sensor();
 250   3               }
 251   2            }  
 252   1         }
 253          
 254          /*-----------------------------------------------------------------
 255             SelfLearn_Reset()
 256             PIN22 triggles 3 times, the system enters selflearn mode
 257          ------------------------------------------------------------------*/
 258          void SelfLearn_Reset(void)
 259             {  
 260   1         if(ID_selflearning_flag == 1)
 261   1            {
 262   2            if(++ID_selflearning_timecount > 10)
 263   2               {
 264   3               ID_selflearning_flag = 0;
 265   3               ID_selflearning_timecount = 0;            
 266   3               // Reset relatively flag and count.
 267   3               IDkey_selflearn_HVcount = 0;
 268   3               IDkey_selflearn_LVcount = 0;
 269   3               IDkey_selflearn_flag1 = 0;
 270   3               IDkey_selflearn_flag2 = 0;
 271   3               IDkey_selflearn_flag3 = 0;
 272   3               IDkey_selflearn_flag4 = 0;
 273   3               IDkey_selflearn_flag5 = 0;
 274   3               }        
 275   2            }
 276   1         }
 277          
 278          /*---------------------------------------------------
 279             Fell_Alarm_to_Slave()
 280             Send fell alarm signal to remote slave.
 281          ----------------------------------------------------*/
 282          void Fell_Alarm_to_Slave(void)
 283             {
 284   1         if((fell_flag==1)&&(fell_alarm_count<5))
 285   1            {
 286   2            UART_Send_Data(ComMode_5);                                                       
 287   2            fell_alarm_count++;
 288   2            }  
 289   1         }
 290          
 291          /*----------------------------------------------------
 292             Raise_Alarm_to_Slave()
 293             Send raised alarm signal to remote slave
 294          -----------------------------------------------------*/
 295          void Raise_Alarm_to_Slave(void)
 296             {
 297   1         if((raised_flag==1)&&(raised_alarm_count<5))    
 298   1            {
 299   2            UART_Send_Data(ComMode_4);                                                       
 300   2            raised_alarm_count++;
 301   2            }        
 302   1         }
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 6   

 303          
 304          /*----------------------------------------------------
 305             Batstolen_Alarm_to_Slave()
 306             Send battery stolen alarm signal to remote slave
 307          -----------------------------------------------------*/
 308          void Batstolen_Alarm_to_Slave(void)
 309             {
 310   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 20))
 311   1            {
 312   2            UART_Send_Data(ComMode_2);                                                       
 313   2            battery_stolen_count++;
 314   2            }  
 315   1         }
 316          
 317          /*----------------------------------------------------
 318             Disable_sensor_after_IDcert()
 319          -----------------------------------------------------*/
 320          void Disable_sensor_after_IDcert(void)
 321             {
 322   1         if(IDkey_speech_flash == 1)
 323   1            {
 324   2            IDkey_speech_flash = 0;
 325   2      
 326   2            disable_sensor();
 327   2            }  
 328   1         }
 329          
 330          /*----------------------------------------------------
 331             Reset_after_wirebroken()
 332          -----------------------------------------------------*/
 333          void Reset_after_wirebroken(void)
 334             {
 335   1         if(wire_broken_reset == 1)
 336   1            {
 337   2            wire_broken_reset = 0;
 338   2            host_stolen_alarm1_count = 0;
 339   2            EN_host_stolen_alarming = 0;           
 340   2            Host_stolen_alarming = 0;
 341   2            sensor_3rdalarm_flag = 0;
 342   2            }
 343   1         }
 344          
 345          /*----------------------------------------------------
 346             Reset_after_stolen_alarming()
 347             15 tickets after stolen alarm, shut alarm.
 348          -----------------------------------------------------*/
 349          void Reset_after_stolen_alarming(void)
 350             {
 351   1         if(EN_host_stolen_alarming == 1)
 352   1            {
 353   2            if(++Stolen_alarm_reset_count > 5)
 354   2               {
 355   3               host_stolen_alarm1_count = 0;
 356   3               EN_host_stolen_alarming = 0;
 357   3               Host_stolen_alarming = 0;
 358   3               sensor_3rdalarm_flag = 0;
 359   3               Stolen_alarm_reset_count = 0;
 360   3               close_tranceiver();
 361   3               }
 362   2            }
 363   1         }
 364          
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 7   

 365          /*-----------------------------------------------------
 366             Ensensor_after_slave_away()
 367          ------------------------------------------------------*/
 368          void Ensensor_after_slave_away(void)
 369             {
 370   1         if((vibration_flag1 == 0)&&(wheeled_flag == 0)&&(Just_power_up == 0))
 371   1            {
 372   2            if(++slave_nearby_count > 6)
 373   2               {
 374   3               slave_nearby_count = 7;
 375   3               slave_nearby_actioned_flag = 0;
 376   3               ID_certificated_flag = 0;
 377   3               if(never_alarm == 0)
 378   3                  Enable_sensor();
 379   3               }
 380   2            }  
 381   1         }
 382          
 383          /*----------------------------------------------------
 384             Detect_selflearn_action()
 385          -----------------------------------------------------*/
 386          void Detect_selflearn_action(void)
 387             {
 388   1         if(key_rotate == 1)
 389   1            {
 390   2            // 如果钥匙打开，则打开控制器12V电源。
 391   2            Lock_EN = 0;
 392   2      
 393   2            if(wire_broken == 1)
 394   2               {
 395   3               wire_broken_time += 1;
 396   3               if(wire_broken_time >= 6000)
 397   3                  {
 398   4                  wire_broken_time = 6001;
 399   4                  wire_broken_level = 0;
 400   4                  ID_selflearning_flag = 0;
 401   4                  }
 402   3               }
 403   2            else
 404   2               {
 405   3               if(wire_broken_time > 50)
 406   3                  {
 407   4                  wire_broken_time = 0;
 408   4                  wire_broken_level += 1;
 409   4                  }
 410   3               }
 411   2            
 412   2            if(wire_broken_level > 6)
 413   2               {
 414   3               wire_broken_level = 0;
 415   3               ID_selflearning_flag = 1;
 416   3               Self_learn_speech();
 417   3               }
 418   2            }
 419   1         else if((key_rotate == 0)&&(Open_action_flag == 0))
 420   1            Lock_EN = 1;
 421   1      
 422   1            
 423   1         if(IDkey_flash_EN == 1)
 424   1            {
 425   2            IDkey_flash_EN = 0;
 426   2            flashing_flag = 1;
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 8   

 427   2            ID_selflearning_flag = 0;
 428   2            
 429   2            Self_learn_programming();
 430   2            
 431   2            Self_learn_speech();
 432   2            
 433   2            #if (defined Z3) && (defined ID)
 434   2            UART_Send_Data_match();
 435   2            #endif
 436   2            }  
 437   1         }
 438          
 439          /*---------------------------------------------------
 440             Detect_open_action()
 441          ---------------------------------------------------*/
 442          void Detect_open_action(void)
 443             {
 444   1      // if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1)&&(never_alarm == 0))    
 445   1         if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1))      
 446   1            {
 447   2            disable_sensor();
 448   2            Open_action_flag = 1;
 449   2            ID_speeched_flag = 0;
 450   2            
 451   2            After_IDcert_timecount = 0;
 452   2            ID_certificated_flag = 0;
 453   2            ID_certificated_numbers = 0;
 454   2            slave_nearby_actioned_flag = 1;
 455   2            ElecMotor_CW();
 456   2            slave_nearby_operation();
 457   2      
 458   2            Just_power_up = 0;
 459   2                  
 460   2            Autolock_G = 0;
 461   2            timer0_count2 = 0;
 462   2            }        
 463   1         }
 464          
 465          /*---------------------------------------------------
 466             Detect_close_action()
 467          ---------------------------------------------------*/
 468          void Detect_close_action(void)
 469             {
 470   1         if(((key_rotate == 0)||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1))&&(Open_action_flag == 1))
 471   1            {
 472   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 473   2               {
 474   3               key_rotate_off_time += 1;
 475   3               if(key_rotate_off_time >= 1500)
 476   3                  {
 477   4                  if((key_rotate == 0)||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1))
 478   4                     {
 479   5                     ElecMotor_ACW();
 480   5      
 481   5                     Open_action_flag = 0;
 482   5                     slave_away_operation();
 483   5                     IDkey_speech_flash = 0;
 484   5                     ID_speeched_flag = 0;      
 485   5      
 486   5                     timer0_count2 = 0;
 487   5                     }                       
 488   4                  }
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 9   

 489   3               }
 490   2            }
 491   1         else if(key_rotate == 1)
 492   1            key_rotate_off_time = 0;
 493   1         }
 494          
 495          /*------------------------------------------------------
 496             Detect_vibration()
 497          -------------------------------------------------------*/
 498          void Detect_vibration(void)
 499             {
 500   1         if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 501   1            {
 502   2            if(++vibration_count2 >= 2)
 503   2               {
 504   3               vibration_count2 = 0;
 505   3               vibration_flag = 1;
 506   3               vibration_count = 0;
 507   3               
 508   3               vibration_flag1 = 1;
 509   3               vibration_count1 = 0;   
 510   3               
 511   3               timer0_count2 = 0;         
 512   3               }     
 513   2            }
 514   1         else
 515   1            vibration_count2 = 0;
 516   1            
 517   1          if(vibration_flag == 1)
 518   1            {
 519   2            if(++vibration_count >= 4000)
 520   2               {
 521   3               vibration_flag = 0;
 522   3               vibration_count = 0;
 523   3               }
 524   2            }
 525   1      
 526   1          if(vibration_flag1 == 1)
 527   1            {
 528   2            if(++vibration_count1 >= 10000)
 529   2               {
 530   3               vibration_flag1 = 0;
 531   3               vibration_count1 = 0;
 532   3               }
 533   2            }
 534   1         }
 535          
 536          /*----------------------------------------------------
 537             Detect_wheel_moving()
 538          -----------------------------------------------------*/
 539          void Detect_wheel_moving(void)
 540             {
 541   1         if(wheeled_rotate == 1)
 542   1            {
 543   2            wheeled_flag = 1;
 544   2            wheeled_count = 0;
 545   2            
 546   2            timer0_count2 = 0;
 547   2            }
 548   1         if(wheeled_flag == 1)
 549   1            {
 550   2            if(++wheeled_count >= 2000)
C51 COMPILER V9.54   OPERATION                                                             05/13/2016 09:47:48 PAGE 10  

 551   2               {
 552   3               wheeled_flag = 0;
 553   3               wheeled_count = 0;
 554   3               }
 555   2            }  
 556   1         }
 557          
 558          /*---------------------------------------------------
 559             end of file
 560          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    794    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      8    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
