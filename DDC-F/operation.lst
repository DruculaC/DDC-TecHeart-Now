C51 COMPILER V9.54   OPERATION                                                             05/22/2015 14:12:27 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT ROM(COMPACT) OPTIMIZE
                    -(8,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          
  18          /*------ private variable --------------------------*/
  19          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  20          
  21          bit sensor_EN = 0;
  22          
  23          /*------- Public variable declarations --------------------------*/
  24          extern bit position_sensor_EN;   
  25          extern bit fell_flag;                  
  26          extern bit raised_flag;          
  27          extern tByte sensor_trigger_count;  
  28          extern tByte sensor_1ststage_count; 
  29          extern bit raised_fell_once_flag;         
  30          extern bit raised_fell_flag;              
  31          extern bit host_stolen_alarm1_EN;     
  32          extern bit host_stolen_alarm2_EN;      
  33          extern tByte host_stolen_alarm1_count;    
  34          extern tByte host_stolen_alarm2_count;    
  35          extern bit stolen_alarm_flag;             
  36          extern tWord sensor_3rdstage_time;        
  37          extern tByte sensor_3rdstage_effcount;    
  38          extern tByte sensor_3rdstage_count;       
  39          extern tWord sensor_3rdstage_interval;    
  40          extern tWord sensor_2ndstage_time;     
  41          extern tByte sensor_2ndstage_count;    
  42          extern tWord ADC_check_result;      
  43          extern tByte wire_broken_count;     
  44          extern bit wire_broken_flag;        
  45          extern bit battery_stolen_EN;       
  46          extern tByte battery_stolen_count;
  47          extern bit sensor_3rdalarm_flag;
  48          extern tByte enable_sensor_delay_count;      
  49          extern bit Silence_Flag;
  50          extern tByte key_rotated_on_flag;      
  51          extern tByte IDkey_certificated_times;
  52          extern bit IDkey_flag;        
  53          extern tByte IDkey_count;     
  54          extern bit never_alarm;
C51 COMPILER V9.54   OPERATION                                                             05/22/2015 14:12:27 PAGE 2   

  55          extern bit IDkey_selflearn_flag1;
  56          extern bit IDkey_selflearn_flag2;
  57          extern bit IDkey_selflearn_flag3;
  58          extern bit IDkey_selflearn_flag4;
  59          extern bit IDkey_selflearn_flag5;
  60          extern bit IDkey_selflearn_flag6;
  61          extern tByte IDkey_selflearn_flag6count;
  62          extern tWord IDkey_selflearn_HVcount;
  63          extern tWord IDkey_selflearn_LVcount;
  64          extern tByte fell_alarm_count;
  65          extern tByte raised_alarm_count;
  66          extern tByte Check_Motobattery_count;
  67          extern bit Check_Motobattery_flag;
  68          extern tWord load_battery_result;
  69          extern bit ID_speeched_flag;
  70          extern bit slave_nearby_actioned_flag;
  71          
  72          
  73          /*-----------------------------------------
  74             slave_away_operation()
  75             
  76             operation for slave is away
  77          ------------------------------------------*/
  78          void slave_away_operation(void)
  79             {
  80   1      // ElecMotor_ACW();
  81   1         
  82   1         if(Silence_Flag == 0)
  83   1            {
  84   2            close_lock_speech(); 
  85   2            
  86   2            #ifdef Batterycheck
  87   2            Check_Motobattery_flag = 1;
  88   2            Check_Motobattery_count = 0;
  89   2            #endif
  90   2      
  91   2            }
  92   1         // enable_sensor();  
  93   1         enable_sensor_delayEN = 1;
  94   1         enable_sensor_delay_count = 0;
  95   1         // delay time, avoid sensor trigger on.
  96   1         Delay(20);
  97   1         IDkey_certificated_times = 0;
  98   1      
  99   1         if(Silence_Flag == 1)
 100   1            Silence_Flag = 0;
 101   1            
 102   1         Delete_all_task();
 103   1         }
 104          
 105          /*----------------------------------------------------------------------
 106                slave_nearby_operation()
 107                operation for slave is nearby
 108          ----------------------------------------------------------------------*/
 109          void slave_nearby_operation(void)
 110             {
 111   1         slave_nearby_actioned_flag = 1;
 112   1         
 113   1         ID_speeched_flag = 0;      
 114   1         IDkey_count = 0;
 115   1         IDkey_flag = 0;
 116   1         IDkey_certificated_times = 0;    
C51 COMPILER V9.54   OPERATION                                                             05/22/2015 14:12:27 PAGE 3   

 117   1      
 118   1         if(Silence_Flag == 0)
 119   1            {
 120   2            open_lock_speech();
 121   2            verifybattery(load_battery_result);
 122   2      
 123   2            key_rotate_on_speech();
 124   2            }
 125   1         Delete_all_task();
 126   1         
 127   1         }
 128          
 129          /*------------------------------------------------------------------
 130             InitSensor()
 131             Initialise Sensor.
 132          ------------------------------------------------------------------*/
 133          void InitSensor(void)
 134             {
 135   1         sensor_EN = 0;
 136   1         position_sensor_EN = 0;
 137   1         enable_sensor_delayEN = 0; 
 138   1         raised_sensor_detect = 1;
 139   1         fell_sensor_detect = 1; 
 140   1         }
 141             
 142          /*------------------------------------------------------------------
 143             Host_stolen_action()
 144             Determine host has been triggled 3 times, alarm action.
 145          ------------------------------------------------------------------*/
 146          void Host_stolen_action(void)
 147             {
 148   1         // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 149   1         if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 150   1            {
 151   2            stolen_alarm_flag = 1;
 152   2            
 153   2            #ifdef Z3
                    if(wire_broken_flag == 0)
                       {
                       UART_Send_Data(ComMode_3);                                                       
                       }
                    else
                       {                                                                     
                       UART_Send_Data(ComMode_6);                                                       
                       }
                    #endif
 163   2            
 164   2            stolen_alarm_speech1();
 165   2            if(++host_stolen_alarm1_count >= 4)
 166   2               {
 167   3               host_stolen_alarm1_count = 0;
 168   3               host_stolen_alarm1_EN = 0;
 169   3               stolen_alarm_flag = 0;
 170   3               sensor_3rdalarm_flag = 0;
 171   3               }
 172   2            }
 173   1         if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 174   1            {
 175   2            stolen_alarm_flag = 1;
 176   2            
 177   2            #ifdef Z3
                    if(wire_broken_flag == 0)
C51 COMPILER V9.54   OPERATION                                                             05/22/2015 14:12:27 PAGE 4   

                       {
                       UART_Send_Data(ComMode_3);                                                       
                       }
                    else
                       {
                       UART_Send_Data(ComMode_6);                                                       
                       }
                    #endif
 187   2            
 188   2            stolen_alarm_speech2();
 189   2            if(++host_stolen_alarm2_count >= 4)
 190   2               {
 191   3               host_stolen_alarm2_count = 0;
 192   3               host_stolen_alarm2_EN = 0;
 193   3               stolen_alarm_flag = 0;
 194   3               sensor_3rdalarm_flag = 0;
 195   3               }
 196   2            }  
 197   1         }
 198          
 199          /*------------------------------------------------------------------
 200             ENsensor_afterIDcert()
 201             4s After ID certificated, enable sensor. 
 202             If ID certficated 6 times, don't enable sensor.
 203          ------------------------------------------------------------------*/
 204          void ENsensor_afterIDcert(void)
 205             {
 206   1         if(IDkey_flag == 1)
 207   1            {
 208   2            if(++IDkey_count >= 3)
 209   2               {
 210   3               IDkey_count = 0;
 211   3               IDkey_flag = 0;
 212   3               IDkey_certificated_times = 0;
 213   3               if((key_rotated_on_flag == 0)&&(never_alarm == 0))
 214   3                  {
 215   4                  enable_sensor();              
 216   4                  }           
 217   3               never_alarm = 0;
 218   3               }        
 219   2            }
 220   1         }
 221          
 222          /*------------------------------------------------------------------
 223             ENsensor_After_CloseLock()
 224          ------------------------------------------------------------------*/
 225          void ENsensor_After_CloseLock(void)
 226             {
 227   1         if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 228   1            {
 229   2            if(++enable_sensor_delay_count >= 3)
 230   2               {
 231   3               enable_sensor_delay_count = 0;
 232   3               enable_sensor_delayEN = 0;
 233   3               enable_sensor();
 234   3               }
 235   2            }  
 236   1         }
 237          
 238          /*-----------------------------------------------------------------
 239             SelfLearn_Reset()
 240             PIN26 triggles 3 times, the system enters selflearn mode
C51 COMPILER V9.54   OPERATION                                                             05/22/2015 14:12:27 PAGE 5   

 241          ------------------------------------------------------------------*/
 242          void SelfLearn_Reset(void)
 243             {
 244   1         if(IDkey_selflearn_flag6 == 1)
 245   1            {
 246   2            if(++IDkey_selflearn_flag6count > 5)
 247   2               {
 248   3               IDkey_selflearn_HVcount = 0;
 249   3               IDkey_selflearn_LVcount = 0;
 250   3               IDkey_selflearn_flag1 = 0;
 251   3               IDkey_selflearn_flag2 = 0;
 252   3               IDkey_selflearn_flag3 = 0;
 253   3               IDkey_selflearn_flag4 = 0;
 254   3               IDkey_selflearn_flag5 = 0;
 255   3               IDkey_selflearn_flag6 = 0;
 256   3               IDkey_selflearn_flag6count = 0;           
 257   3               }        
 258   2            }
 259   1         }
 260          
 261          /*---------------------------------------------------
 262             Fell_Alarm_to_Slave()
 263             Send fell alarm signal to remote slave.
 264          ----------------------------------------------------*/
 265          void Fell_Alarm_to_Slave(void)
 266             {
 267   1         if((fell_flag==1)&&(fell_alarm_count<5))
 268   1            {
 269   2            UART_Send_Data(ComMode_5);                                                       
 270   2            fell_alarm_count++;
 271   2            }  
 272   1         }
 273          
 274          /*----------------------------------------------------
 275             Raise_Alarm_to_Slave()
 276             Send raised alarm signal to remote slave
 277          -----------------------------------------------------*/
 278          void Raise_Alarm_to_Slave(void)
 279             {
 280   1         if((raised_flag==1)&&(raised_alarm_count<5))    
 281   1            {
 282   2            UART_Send_Data(ComMode_4);                                                       
 283   2            raised_alarm_count++;
 284   2            }        
 285   1         }
 286          
 287          /*----------------------------------------------------
 288             Batstolen_Alarm_to_Slave()
 289             Send battery stolen alarm signal to remote slave
 290          -----------------------------------------------------*/
 291          void Batstolen_Alarm_to_Slave(void)
 292             {
 293   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 5))
 294   1            {
 295   2            UART_Send_Data(ComMode_2);                                                       
 296   2            battery_stolen_count++;
 297   2            }  
 298   1         }
 299          
 300          /*-----------------------------------------------------
 301             Never_Alarm_Action()
 302             ID cert
C51 COMPILER V9.54   OPERATION                                                             05/22/2015 14:12:27 PAGE 6   

 303          /*---------------------------------------------------
 304             end of file
 305          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    314    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
