C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - INCDIR(..\Library) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-F program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          #include "main.h"             
   8          #include "port.h"
   9          
  10          #include "AD.h"
  11          #include "Timer.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Delay.h"
  15          #include "communication.h"
  16          #include "Other.h"
  17          #include "battery.h"
  18          #include "UART.h"
  19          #include "ISP_DataFlash.h"
  20          #include "schedular.h"
  21          
  22          
  23          /*------- Public variable declarations --------------------------*/
  24          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  25          extern bit enable_sensor_delayEN;
  26          
  27          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  48          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  50          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  52          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 2   

  53          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;       //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´
             -Î¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  60          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  63          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  64          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  65          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  66          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  67          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  71          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  72          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  73          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  74          bit sensor_3rdalarm_flag = 0;
  75          bit wheeled_flag = 0;
  76          tWord wheeled_count = 0;
  77          tWord match_button_count = 0;
  78          tWord Press_open_button_count = 0;
  79          
  80          // ------ Private variable definitions -----------------------------
  81          tWord stolen_alarm_count = 0;
  82          bit raised_alarm_flag = 0;
  83          bit fell_alarm_flag = 0;
  84          bit Host_battery_high_flag = 0;
  85          bit wire_broken_EN = 0;
  86          tWord Mode_detect_count = 0;
  87          bit Mode_select = 0; // Ä£Ê½Ñ¡Ôñ£¬0±íÊ¾×Ô¶¯Ä£Ê½£¬1±íÊ¾ÊÖ¶¯Ä£Ê½
  88          
  89          bit powersave_enable = 0;
  90          
  91          bit itrpt_EN = 1;
  92          tByte itrpt_count = 0;
  93          bit idle_EN = 0;
  94          
  95          bit Auto_transmit = 0;        // 0±íÊ¾·Ç×Ô¶¯·¢ËÍÊı¾İ£¬1±íÊ¾×Ô¶¯·¢ËÍÊı¾İ½øĞĞÈÏÖ¤
  96          bit IDflash_EN = 0;
  97          tWord match_button_HVcount = 0;
  98          tWord match_button_LVcount = 0;
  99          bit match_button_flag1 = 0;
 100          bit match_button_flag2 = 0;
 101          bit match_button_flag3 = 0;
 102          bit match_button_flag4 = 0;
 103          bit match_button_flag5 = 0;
 104          bit match_button_flag6 = 0;
 105          tByte match_button_flag6count = 0;
 106          
 107          tWord receiver_EN_count = 0;
 108          tWord receiver_DisEN_count = 0;
 109          
 110          bit match_moto_EN = 0;
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 3   

 111          
 112          bit battery_LV_flag = 0;
 113          tByte battery_LV_flag_count = 0;
 114          bit battery_HV_flag = 0;
 115          tByte battery_HV_flag_count = 0;
 116          tByte battery_HV_speech_count = 0;
 117          bit battery_HV_speech_over = 0;
 118          
 119          #ifdef WX
 120          code tByte IDkey6 _at_ 0x001ff8;
 121          code tByte IDkey7 _at_ 0x001ff9;
 122          code tByte IDkey8 _at_ 0x001ffa;
 123          code tByte IDkey9 _at_ 0x001ffb;
 124          code tByte IDkey10 _at_ 0x001ffc;
 125          code tByte IDkey11 _at_ 0x001ffd;
 126          #endif
 127          #ifdef ID
              code tByte IDkey6 _at_ 0x003000;
              code tByte IDkey7 _at_ 0x003001;
              code tByte IDkey8 _at_ 0x003002;
              code tByte IDkey9 _at_ 0x003003;
              code tByte IDkey10 _at_ 0x003004;
              code tByte IDkey11 _at_ 0x003005;
              #endif
 135          /*--------------------------------------------------------------*/
 136          
 137          void main(void)
 138             {
 139   1         InitVoice();
 140   1         InitUART(BAUD1200);
 141   1      
 142   1         // ¼üÅÌÖĞ¶Ï³õÊ¼»¯
 143   1         press_open_button = 1;
 144   1         press_close_button = 1;
 145   1         
 146   1         KBLS1 |= 0x03;
 147   1         KBLS0 |= 0x03;
 148   1         KBIF &= 0xfc;
 149   1         KBIE |= 0x03;
 150   1         EKB = 1;
 151   1         EA = 1;
 152   1      
 153   1      // Moto_EN = 1;      //³õÊ¼»¯£¬¹Ø±ÕÂí´ï
 154   1         voice_EN = 0;        //¿ª»úÊ±£¬½«¹¦·Å¹Ø±Õ
 155   1         P10=1;
 156   1            
 157   1         stolen_alarm_count = 0;       //Çå±¨¾¯¼ÆÊıÆ÷
 158   1         stolen_alarm_flag = 0;        //Çå±¨¾¯±êÖ¾
 159   1      
 160   1         transmit_wire = 0;
 161   1         transmiter_EN = 0;      // turn off the transmitter
 162   1         receiver_EN = 0;        // turn on the receiver
 163   1         transceiver_power_enable = 1;         // ÉÏµçÊ±ÎŞÏßÄ£¿éµçÔ´¹Ø±Õ
 164   1         
 165   1         while(1)
 166   1            {
 167   2            if(idle_EN == 1)
 168   2               {
 169   3               idle_EN = 0;
 170   3               EKB = 1;
 171   3               PCON |= 0x02;        
 172   3               }
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 4   

 173   2               
 174   2            // Ö÷»ú±»µÁ±¨¾¯
 175   2            if(stolen_alarm_flag == 1)    
 176   2               {
 177   3               // ÓïÒôÌáÊ¾£¬Âí´ïÕñ¶¯
 178   3               Alarm_stolen_speech();     
 179   3               Moto_Vibration();          
 180   3               stolen_alarm_flag = 0;
 181   3               }  
 182   2      
 183   2            // Ì§ÆğĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´ÎÌ§ÆğÖ»·¢4±é¡£
 184   2            if(raised_alarm_flag == 1) 
 185   2               {
 186   3               Alarm_raised_speech();     
 187   3               Moto_Vibration();         
 188   3               raised_alarm_flag = 0;
 189   3               }
 190   2      
 191   2            // µ¹µØĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´Îµ¹µØÖ»·¢4±é¡£
 192   2            if(fell_alarm_flag == 1)
 193   2               {
 194   3               Alarm_fell_speech();      
 195   3               Moto_Vibration();         
 196   3               fell_alarm_flag=0;
 197   3               }
 198   2      
 199   2            if(wire_broken_EN == 1)
 200   2               {
 201   3               wire_broken_speech();
 202   3               Moto_Vibration();         
 203   3               wire_broken_EN = 0;
 204   3               }
 205   2            
 206   2            if(battery_stolen_EN == 1)
 207   2               {
 208   3               Host_battery_high_alarm_speech();
 209   3               battery_stolen_EN = 0;
 210   3               Moto_Vibration();                
 211   3               }
 212   2            
 213   2            sEOS_Go_To_Sleep();        
 214   2            }  
 215   1         }
 216          
 217          
 218          /*------------------------------------------------------------------
 219             timerT0()
 220             ¶¨Ê±Æ÷0Ã¿´ÎÒç³öºóÖ´ĞĞµÄ²Ù×÷
 221          --------------------------------------------------------------------*/
 222          
 223          void timer0() interrupt interrupt_timer_0_overflow
 224             {
 225   1         // ÖØ×°ÔÚ¶¨Ê±Æ÷µÄÊ±¼äÉèÖÃ
 226   1         TH0 = timer0_8H;
 227   1         TL0 = timer0_8L;
 228   1      
 229   1         // ÉèÖÃÒ»¸öÃ¿3sµÄ²Ù×÷
 230   1         if(++timer0_count >= 2000)    
 231   1            {
 232   2            MagentControl_2 = ~MagentControl_2;    
 233   2            
 234   2            // Ã¿¸ö3s×öÒ»´ÎµçÁ¿¼ì²â£¬²¢½øĞĞÏà¹ØµÄµçÁ¿ÌáÊ¾
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 5   

 235   2            Check_motor_accumulator();
 236   2            
 237   2            if(ADC_check_result <= 0x368)                 // 3.11V/3.64V µçÁ¿²»×ã
 238   2               {
 239   3               battery_LV_flag = 1;
 240   3               battery_HV_flag = 0;
 241   3               battery_HV_speech_over = 0;
 242   3               }
 243   2            else if(ADC_check_result >= 0x37a)            // 3.52V/4.03V µçÁ¿³ä×ã
 244   2               {
 245   3               battery_HV_flag = 1;
 246   3               battery_LV_flag = 0;
 247   3               }
 248   2            else
 249   2               {
 250   3               battery_LV_flag = 0;
 251   3               battery_HV_flag = 0;
 252   3               }
 253   2                  
 254   2            if(battery_LV_flag == 1)
 255   2               {
 256   3               if(++battery_LV_flag_count > 20)
 257   3                  {
 258   4                  Battery_low_alarm_speech();
 259   4                  battery_LV_flag_count = 0;
 260   4                  }        
 261   3               }
 262   2            
 263   2            if(match_button_flag6 == 1)
 264   2               {
 265   3               #ifdef ID
                       if(++match_button_flag6count > 10)
                       #endif
 268   3               #ifdef WX
 269   3               if(++match_button_flag6count > 1)
 270   3               #endif
 271   3                  {
 272   4                  match_button_HVcount = 0;
 273   4                  match_button_LVcount = 0;
 274   4                  match_button_flag1 = 0;
 275   4                  match_button_flag2 = 0;
 276   4                  match_button_flag3 = 0;
 277   4                  match_button_flag4 = 0;
 278   4                  match_button_flag5 = 0;
 279   4                  match_button_flag6 = 0;
 280   4                  match_moto_EN = 0;
 281   4                  match_button_flag6count = 0;           
 282   4                  }        
 283   3               }     
 284   2            
 285   2            timer0_count = 0;
 286   2            }
 287   1            
 288   1         if((toggle_button == 1)&&(idle_EN == 0))
 289   1            {
 290   2            transceiver_power_enable = 1;
 291   2      //    receiver_EN = 0;
 292   2      //    transmiter_EN = 0;
 293   2      //    RXD = 0;
 294   2            TXD = 0;
 295   2            idle_EN = 1;
 296   2            }
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 6   

 297   1         
 298   1         if((transceiver_power_enable == 0)&&(match_button_flag6 == 0))
 299   1            {
 300   2            if(++receiver_EN_count > 300)
 301   2               {
 302   3               UART_Send_Data_F(ComMode_1);
 303   3               TXD = 0;
 304   3               
 305   3               transceiver_power_enable = 1;
 306   3               receiver_EN = 0;
 307   3               receiver_EN_count = 0;
 308   3               }
 309   2            }  
 310   1      
 311   1         if((transceiver_power_enable == 1)&&(match_button_flag6 == 0))
 312   1            {     
 313   2            if(++receiver_DisEN_count > 1500)
 314   2               {
 315   3               transceiver_power_enable = 0;
 316   3               
 317   3               receiver_DisEN_count = 0;
 318   3      
 319   3               #ifdef F3
                       receiver_EN = 0;
                       RXD = 1;
                       #endif
 323   3               }
 324   2            }
 325   1         
 326   1         if(press_open_button == 0)
 327   1            {
 328   2            if(++Press_open_button_count > 3000)
 329   2               {
 330   3               transceiver_power_enable = 0;
 331   3               UART_Send_Data_F(ComMode_11);
 332   3               TXD = 0;    
 333   3               transceiver_power_enable = 1;    
 334   3               }
 335   2            }
 336   1         else
 337   1            {
 338   2            Press_open_button_count = 0;
 339   2            }
 340   1         
 341   1         if(match_button == 0)
 342   1            {
 343   2            match_button_HVcount = 0;
 344   2                     
 345   2            if(++match_button_LVcount > 4000)
 346   2               {
 347   3               match_button_LVcount = 4002;
 348   3               match_button_flag1 = 0;
 349   3               match_button_flag2 = 0;
 350   3               match_button_flag3 = 0;
 351   3               match_button_flag4 = 0;
 352   3               match_button_flag5 = 0;
 353   3               }
 354   2            else
 355   2               {
 356   3               match_button_flag1 = 1;
 357   3               if(match_button_flag2 == 1)
 358   3                  match_button_flag3 = 1;
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 7   

 359   3               if(match_button_flag4 == 1)
 360   3                  match_button_flag5 = 1;
 361   3               }
 362   2            
 363   2            battery_LV_flag = 0;
 364   2            battery_HV_flag = 0;
 365   2            }
 366   1         else
 367   1            {
 368   2            match_button_LVcount = 0;
 369   2            
 370   2            if(match_button_flag1 == 1)
 371   2               match_button_flag2 = 1;       
 372   2            if(match_button_flag3 == 1)
 373   2               match_button_flag4 = 1; 
 374   2            if(match_button_flag5 == 1)
 375   2               {
 376   3               match_button_flag6 = 1;
 377   3               match_button_flag5 = 0;
 378   3               
 379   3               transceiver_power_enable = 0;
 380   3               
 381   3               #ifdef ID
                       receiver_EN_count = 0;
                       receiver_EN = 0;
                       RXD = 1;
                       #endif
 386   3               #ifdef WX
 387   3               UART_Send_Data_match();
 388   3               #endif
 389   3      
 390   3               if(match_moto_EN == 0)
 391   3                  {
 392   4                  Moto_Vibration(); 
 393   4                  match_moto_EN = 1;
 394   4                  }
 395   3               }
 396   2               
 397   2            if(++match_button_HVcount > 4000)
 398   2               {
 399   3               match_button_HVcount = 4002;
 400   3               match_button_flag1 = 0;
 401   3               match_button_flag2 = 0;
 402   3               match_button_flag3 = 0;
 403   3               match_button_flag4 = 0;
 404   3               match_button_flag5 = 0;
 405   3               match_moto_EN = 0;
 406   3               }
 407   2            }
 408   1      
 409   1         #ifdef ID
                 if(IDflash_EN == 1)
                    {
                    IDflash_EN = 0;
                    match_button_flag1 = 0;
                    match_button_flag2 = 0;
                    match_button_flag3 = 0;
                    match_button_flag4 = 0;
                    match_button_flag5 = 0;
                    match_button_flag6 = 0;
                    match_moto_EN = 0;
                    Self_learn_programming_F();
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 8   

                    Moto_Vibration();
                    Delay(10);
                    Moto_Vibration();
                    match_button_flag6count = 0;
                    }
                 #endif
 427   1         }
 428          
 429          /*-----------------------------------------------
 430             UART interrupt
 431          -----------------------------------------------*/
 432          void uart_isr() interrupt 4 
 433             {
 434   1         if(RI)
 435   1            {
 436   2            RI=0;
 437   2            received_data_buffer[data_count] = SBUF;
 438   2            
 439   2            if(match_button_flag6 == 0)
 440   2               {
 441   3               // judge whether buffer[0] is CmdHead
 442   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 443   3                  {
 444   4                  data_count = 1;
 445   4                  }
 446   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 447   3                  {
 448   4                  data_count = 2;
 449   4                  }
 450   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 451   3                  {
 452   4                  data_count = 3;
 453   4                  }
 454   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 455   3                  {
 456   4                  data_count = 4;
 457   4                  }
 458   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 459   3                  {
 460   4                  data_count = 5;
 461   4                  }
 462   3               else if(data_count == 5)
 463   3                  {
 464   4                  receive_data_finished_flag = 1;
 465   4                  data_count = 0;
 466   4                  }
 467   3               else 
 468   3                  {
 469   4                  data_count = 0;
 470   4                  }
 471   3      
 472   3               if(receive_data_finished_flag==1)   
 473   3                  {
 474   4                  receive_data_finished_flag=0;       
 475   4                  switch(received_data_buffer[5])
 476   4                     {
 477   5                     case ComMode_2:
 478   5                        {
 479   6                        battery_stolen_EN = 1;
 480   6                        }
 481   5                     break;
 482   5                     
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 9   

 483   5                     case ComMode_3:
 484   5                        {
 485   6                        stolen_alarm_flag = 1;
 486   6      
 487   6                        raised_alarm_count=0;
 488   6                        raised_alarm_flag=0;
 489   6                        fell_alarm_count=0;
 490   6                        fell_alarm_flag=0;
 491   6                        }
 492   5                     break;
 493   5                  
 494   5                     case ComMode_4:
 495   5                        {
 496   6                        raised_alarm_flag=1;
 497   6      
 498   6                        stolen_alarm_count=0;
 499   6                        stolen_alarm_flag=0;
 500   6                        fell_alarm_count=0;
 501   6                        fell_alarm_flag=0;
 502   6                        }
 503   5                     break;
 504   5      
 505   5                     case ComMode_5:
 506   5                        {
 507   6                        fell_alarm_flag=1;   
 508   6      
 509   6                        stolen_alarm_count=0;
 510   6                        stolen_alarm_flag=0;
 511   6                        raised_alarm_count=0;
 512   6                        raised_alarm_flag=0;
 513   6                        }
 514   5                     break;
 515   5      
 516   5                     case ComMode_6:
 517   5                        {
 518   6                        wire_broken_EN = 1;
 519   6                        }
 520   5                     break;
 521   5                     }
 522   4                  }
 523   3               }
 524   2            else
 525   2               {
 526   3               if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
 527   3                  {
 528   4                  data_count = 1;
 529   4                  }
 530   3               else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
 531   3                  {
 532   4                  data_count = 2;
 533   4                  }
 534   3               else if(data_count == 2)
 535   3                  {
 536   4                  data_count = 3;
 537   4                  }
 538   3               else if(data_count == 3)
 539   3                  {
 540   4                  data_count = 4;
 541   4                  }
 542   3               else if(data_count == 4)
 543   3                  {
 544   4                  data_count = 5;
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:54:24 PAGE 10  

 545   4                  }
 546   3               else if(data_count == 5)
 547   3                  {
 548   4                  data_count = 6;
 549   4                  }
 550   3               else if(data_count == 6)
 551   3                  {
 552   4                  data_count = 0;
 553   4                  IDflash_EN = 1;
 554   4                  }
 555   3               else 
 556   3                  {
 557   4                  data_count = 0;
 558   4                  }
 559   3               }     
 560   2            }
 561   1         }
 562          
 563          /*-----------------------------------------------------------
 564             KBI_ISR()
 565             ¼üÅÌÖĞ¶Ï£¬Ê¹Ğ¾Æ¬´ÓÊ¡µçÄ£Ê½ÖĞ»½ĞÑ
 566          -----------------------------------------------------------*/
 567          void KBI_ISR(void) interrupt 7
 568             {
 569   1         EKB = 0;
 570   1         KBIF &= 0xfc;
 571   1         transceiver_power_enable = 0;
 572   1         receiver_EN = 0;
 573   1         RXD = 1;
 574   1      // EKB = 1;
 575   1         }
 576                
 577          /*---------------------------------------------------
 578             end of file
 579          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    988    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     68    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     37    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
