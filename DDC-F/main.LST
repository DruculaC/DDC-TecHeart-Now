C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - INCDIR(..\Library) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-F program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          #include "main.h"             
   8          #include "port.h"
   9          
  10          #include "AD.h"
  11          #include "Timer.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Delay.h"
  15          #include "communication.h"
  16          #include "Other.h"
  17          #include "battery.h"
  18          #include "UART.h"
  19          #include "ISP_DataFlash.h"
  20          #include "schedular.h"
  21          
  22          
  23          /*------- Public variable declarations --------------------------*/
  24          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  25          extern bit enable_sensor_delayEN;
  26          
  27          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  48          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  50          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  52          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 2   

  53          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;       //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´
             -Î¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  60          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  63          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  64          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  65          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  66          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  67          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  71          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  72          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  73          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  74          bit sensor_3rdalarm_flag = 0;
  75          bit wheeled_flag = 0;
  76          tWord wheeled_count = 0;
  77          tWord match_button_count = 0;
  78          tWord Press_open_button_count = 0;
  79          
  80          // ------ Private variable definitions -----------------------------
  81          tWord stolen_alarm_count = 0;
  82          bit raised_alarm_flag = 0;
  83          bit fell_alarm_flag = 0;
  84          bit Host_battery_high_flag = 0;
  85          bit wire_broken_EN = 0;
  86          tWord Mode_detect_count = 0;
  87          bit Mode_select = 0; // Ä£Ê½Ñ¡Ôñ£¬0±íÊ¾×Ô¶¯Ä£Ê½£¬1±íÊ¾ÊÖ¶¯Ä£Ê½
  88          
  89          bit powersave_enable = 0;
  90          
  91          bit itrpt_EN = 1;
  92          tByte itrpt_count = 0;
  93          bit idle_EN = 0;
  94          
  95          bit Auto_transmit = 0;        // 0±íÊ¾·Ç×Ô¶¯·¢ËÍÊı¾İ£¬1±íÊ¾×Ô¶¯·¢ËÍÊı¾İ½øĞĞÈÏÖ¤
  96          bit IDflash_EN = 0;
  97          tWord match_button_HVcount = 0;
  98          tWord match_button_LVcount = 0;
  99          bit match_button_flag1 = 0;
 100          bit match_button_flag2 = 0;
 101          bit match_button_flag3 = 0;
 102          bit match_button_flag4 = 0;
 103          bit match_button_flag5 = 0;
 104          bit match_button_flag6 = 0;
 105          tByte match_button_flag6count = 0;
 106          
 107          tWord receiver_EN_count = 0;
 108          tWord receiver_DisEN_count = 0;
 109          
 110          bit match_moto_EN = 0;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 3   

 111          
 112          bit battery_LV_flag = 0;
 113          tByte battery_LV_flag_count = 0;
 114          bit battery_HV_flag = 0;
 115          tByte battery_HV_flag_count = 0;
 116          tByte battery_HV_speech_count = 0;
 117          bit battery_HV_speech_over = 0;
 118          
 119          tWord Toggle_button_HV_count = 0;
 120          bit Toggle_button_HV_flag = 0;
 121          
 122          bit battery_ULV_flag = 0;
 123          tByte battery_ULV_count = 0;
 124          bit battery_hint_action = 0;
 125          bit vibration_send_EN = 0;
 126          
 127          #ifdef WX
 128          code tByte IDkey6 _at_ 0x001ffb;
 129          code tByte IDkey7 _at_ 0x001ffc;
 130          code tByte IDkey8 _at_ 0x001ffd;
 131          code tByte IDkey9 _at_ 0x001ffe;
 132          code tByte IDkey10 _at_ 0x001fff;
 133          code tByte IDkey11 _at_ 0x001fff;
 134          #endif
 135          #ifdef ID
              code tByte IDkey6 _at_ 0x003000;
              code tByte IDkey7 _at_ 0x003001;
              code tByte IDkey8 _at_ 0x003002;
              code tByte IDkey9 _at_ 0x003003;
              code tByte IDkey10 _at_ 0x003004;
              code tByte IDkey11 _at_ 0x003005;
              #endif
 143          
 144          /*--------------------------------------------------------------*/
 145          
 146          void main(void)
 147             {
 148   1         InitVoice();
 149   1         InitUART(BAUD1200);
 150   1      
 151   1         // ¼üÅÌÖĞ¶Ï³õÊ¼»¯
 152   1         press_open_button = 1;
 153   1         press_close_button = 1;
 154   1         
 155   1         KBLS1 |= 0x03;
 156   1         KBLS0 |= 0x03;
 157   1         KBIF &= 0xfc;
 158   1         KBIE |= 0x03;
 159   1         EKB = 1;
 160   1         EA = 1;
 161   1      
 162   1      // Moto_EN = 1;      //³õÊ¼»¯£¬¹Ø±ÕÂí´ï
 163   1         voice_EN = 0;        //¿ª»úÊ±£¬½«¹¦·Å¹Ø±Õ
 164   1         P10=1;
 165   1         
 166   1      // ADC_check_result = 0x3ff;
 167   1         
 168   1         stolen_alarm_count = 0;       //Çå±¨¾¯¼ÆÊıÆ÷
 169   1         stolen_alarm_flag = 0;        //Çå±¨¾¯±êÖ¾
 170   1      
 171   1         transmit_wire = 0;
 172   1         transmiter_EN = 0;      // turn off the transmitter
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 4   

 173   1         receiver_EN = 0;        // turn on the receiver
 174   1         transceiver_power_enable = 1;         // ÉÏµçÊ±ÎŞÏßÄ£¿éµçÔ´¹Ø±Õ
 175   1         
 176   1         while(1)
 177   1            {
 178   2            #ifdef Z2
                    if(idle_EN == 1)
                       {
                       idle_EN = 0;
                       PCON |= 0x02;        
                       }
                    #endif
 185   2               
 186   2            // Ö÷»ú±»µÁ±¨¾¯
 187   2            if(stolen_alarm_flag == 1)    
 188   2               {
 189   3               // ÓïÒôÌáÊ¾£¬Âí´ïÕñ¶¯
 190   3               Alarm_stolen_speech();     
 191   3               Moto_Vibration();          
 192   3               stolen_alarm_flag = 0;
 193   3               }  
 194   2      
 195   2            // Ì§ÆğĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´ÎÌ§ÆğÖ»·¢4±é¡£
 196   2            if(raised_alarm_flag == 1) 
 197   2               {
 198   3               Alarm_raised_speech();     
 199   3               Moto_Vibration();         
 200   3               raised_alarm_flag = 0;
 201   3               }
 202   2      
 203   2            // µ¹µØĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´Îµ¹µØÖ»·¢4±é¡£
 204   2            if(fell_alarm_flag == 1)
 205   2               {
 206   3               Alarm_fell_speech();      
 207   3               Moto_Vibration();         
 208   3               fell_alarm_flag=0;
 209   3               }
 210   2      
 211   2            if(wire_broken_EN == 1)
 212   2               {
 213   3               wire_broken_speech();
 214   3               Moto_Vibration();         
 215   3               wire_broken_EN = 0;
 216   3               }
 217   2            
 218   2            if(battery_stolen_EN == 1)
 219   2               {
 220   3               Host_battery_high_alarm_speech();
 221   3               battery_stolen_EN = 0;
 222   3               Moto_Vibration();                
 223   3               }
 224   2            
 225   2            sEOS_Go_To_Sleep();        
 226   2            }
 227   1         }
 228          
 229          /*--------------------------------------------------------------------
 230             timerT0()
 231             ¶¨Ê±Æ÷0Ã¿´ÎÒç³öºóÖ´ĞĞµÄ²Ù×÷
 232          --------------------------------------------------------------------*/
 233          
 234          void timer0() interrupt interrupt_timer_0_overflow
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 5   

 235             {
 236   1         // ÖØ×°ÔÚ¶¨Ê±Æ÷µÄÊ±¼äÉèÖÃ
 237   1         TH0 = timer0_8H;
 238   1         TL0 = timer0_8L;
 239   1      
 240   1         // ÉèÖÃÒ»¸öÃ¿3sµÄ²Ù×÷
 241   1         if(++timer0_count >= 2000)    
 242   1            {
 243   2            
 244   2            // Ã¿¸ö3s×öÒ»´ÎµçÁ¿¼ì²â£¬²¢½øĞĞÏà¹ØµÄµçÁ¿ÌáÊ¾
 245   2            Check_motor_accumulator();
 246   2            MagentControl_2 = ~MagentControl_2;
 247   2      
 248   2            #ifdef Z2
                    if(ADC_check_result <= 0x36a)    // 2.96V/3.47V µçÁ¿·Ç³£²»×ã
                       {
                       battery_ULV_flag = 1;
                       battery_LV_flag = 0;
                       }
                    else if((ADC_check_result > 0x36a)&&(ADC_check_result <= 0x375))  // 3.27V/3.78V µçÁ¿²»×ã
                       {
                       battery_ULV_flag = 0;
                       battery_LV_flag = 1;
                       }
                    else if(ADC_check_result > 0x375)
                       {
                       battery_ULV_flag = 0;
                       battery_LV_flag = 0;
                       }
                       
                    if(battery_ULV_flag == 1)
                       {
                       if(++battery_ULV_count >= 1)
                          {
                          SC_RST = ~SC_RST;
                          battery_ULV_count = 0;
                          battery_hint_action = 1;
                          }
                       }
                       
                    if(battery_LV_flag == 1)
                       {
                       if(++battery_LV_flag_count > 6)
                          {
                          SC_RST = ~SC_RST;
                          battery_LV_flag_count = 0;
                          battery_hint_action = 1;
                          }
                       }
                    #endif
 285   2            
 286   2            #ifdef Z3
 287   2            if(ADC_check_result <= 0x36a)                 // 3.11V/3.64V µçÁ¿²»×ã
 288   2               {
 289   3               battery_LV_flag = 1;
 290   3               battery_HV_flag = 0;
 291   3               battery_HV_speech_over = 0;
 292   3               }
 293   2            else if(ADC_check_result >= 0x37a)            // 3.52V/4.03V µçÁ¿³ä×ã
 294   2               {
 295   3               battery_HV_flag = 1;
 296   3               battery_LV_flag = 0;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 6   

 297   3               }
 298   2            else
 299   2               {
 300   3               battery_LV_flag = 0;
 301   3               battery_HV_flag = 0;
 302   3               }
 303   2                  
 304   2            if(battery_LV_flag == 1)
 305   2               {
 306   3               if(++battery_LV_flag_count > 20)
 307   3                  {
 308   4                  Battery_low_alarm_speech();
 309   4                  battery_LV_flag_count = 0;
 310   4                  }        
 311   3               }
 312   2            #endif
 313   2            
 314   2            if(match_button_flag6 == 1)
 315   2               {
 316   3               #ifdef ID
                       if(++match_button_flag6count > 10)
                       #endif
 319   3               #ifdef WX
 320   3               if(++match_button_flag6count > 1)
 321   3               #endif
 322   3                  {
 323   4                  match_button_HVcount = 0;
 324   4                  match_button_LVcount = 0;
 325   4                  match_button_flag1 = 0;
 326   4                  match_button_flag2 = 0;
 327   4                  match_button_flag3 = 0;
 328   4                  match_button_flag4 = 0;
 329   4                  match_button_flag5 = 0;
 330   4                  match_button_flag6 = 0;
 331   4                  match_moto_EN = 0;
 332   4                  match_button_flag6count = 0;           
 333   4                  }        
 334   3               }     
 335   2            
 336   2            #ifdef WX
 337   2            if((press_close_button == 1)&&(EKB == 0))
 338   2               {
 339   3               if(++Toggle_button_HV_count > 30)
 340   3                  {
 341   4                  transceiver_power_enable = 1;
 342   4                  TXD = 0;
 343   4                  MagentControl_2 = 1;
 344   4                  vibration_send_EN = 0;
 345   4                  
 346   4                  EKB = 1;
 347   4                  idle_EN = 1;
 348   4                  }
 349   3               }
 350   2            #endif
 351   2            timer0_count = 0;
 352   2            }
 353   1         
 354   1         if(press_close_button == 0)
 355   1            {
 356   2            Toggle_button_HV_flag = 0;
 357   2            Toggle_button_HV_count = 0;
 358   2            MagentControl_2 = 0;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 7   

 359   2            }
 360   1      
 361   1      /* #ifdef ID
 362   1         if((toggle_button == 1)&&(idle_EN == 0))
 363   1            {
 364   1            transceiver_power_enable = 1;
 365   1      //    receiver_EN = 0;
 366   1      //    transmiter_EN = 0;
 367   1      //    RXD = 0;
 368   1            TXD = 0;
 369   1            idle_EN = 1;
 370   1            }
 371   1         #endif
 372   1      */    
 373   1         if((transceiver_power_enable == 0)&&(match_button_flag6 == 0))
 374   1            {
 375   2            #ifdef Z2
                    if(++receiver_EN_count > 80)
                    #endif
 378   2            #ifdef Z3
 379   2            if(++receiver_EN_count > 300)
 380   2            #endif
 381   2               {
 382   3               receiver_EN_count = 0;
 383   3               
 384   3               if(battery_hint_action == 1)
 385   3                  {
 386   4                  UART_Send_Data_F(ComMode_12);       
 387   4                  battery_hint_action = 0;
 388   4                  SC_RST = ~SC_RST;
 389   4                  }
 390   3               
 391   3               if(vibration_send_EN == 1)
 392   3                  {
 393   4                  UART_Send_Data_F(ComMode_1);
 394   4                  }
 395   3               
 396   3               transceiver_power_enable = 1;
 397   3               RXD = 0;
 398   3               TXD = 0;       
 399   3               receiver_EN = 0;
 400   3               transmiter_EN = 0;
 401   3               }
 402   2            }  
 403   1      
 404   1         if((transceiver_power_enable == 1)&&(match_button_flag6 == 0))
 405   1            {     
 406   2            #ifdef Z2
                    if(++receiver_DisEN_count > 2500)
                    #endif
 409   2            #ifdef Z3
 410   2            if(++receiver_DisEN_count > 1500)
 411   2            #endif
 412   2               {
 413   3               transceiver_power_enable = 0;
 414   3               
 415   3               receiver_DisEN_count = 0;
 416   3      
 417   3               #ifdef F3
 418   3               transmiter_EN = 1;
 419   3               receiver_EN = 0;
 420   3               RXD = 1;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 8   

 421   3               #endif
 422   3               }
 423   2            }
 424   1         
 425   1         if(press_open_button == 0)
 426   1            {
 427   2            if(++Press_open_button_count > 3000)
 428   2               {
 429   3               transceiver_power_enable = 0;
 430   3               UART_Send_Data_F(ComMode_11);
 431   3               TXD = 0;    
 432   3               transceiver_power_enable = 1;    
 433   3               }
 434   2            }
 435   1         else
 436   1            {
 437   2            Press_open_button_count = 0;
 438   2            }
 439   1         
 440   1         if(match_button == 0)
 441   1            {
 442   2            match_button_HVcount = 0;
 443   2                     
 444   2            if(++match_button_LVcount > 4000)
 445   2               {
 446   3               match_button_LVcount = 4002;
 447   3               match_button_flag1 = 0;
 448   3               match_button_flag2 = 0;
 449   3               match_button_flag3 = 0;
 450   3               match_button_flag4 = 0;
 451   3               match_button_flag5 = 0;
 452   3               }
 453   2            else
 454   2               {
 455   3               match_button_flag1 = 1;
 456   3               if(match_button_flag2 == 1)
 457   3                  match_button_flag3 = 1;
 458   3               if(match_button_flag4 == 1)
 459   3                  match_button_flag5 = 1;
 460   3               }
 461   2            
 462   2            battery_LV_flag = 0;
 463   2            battery_HV_flag = 0;
 464   2            }
 465   1         else
 466   1            {
 467   2            match_button_LVcount = 0;
 468   2            
 469   2            if(match_button_flag1 == 1)
 470   2               match_button_flag2 = 1;       
 471   2            if(match_button_flag3 == 1)
 472   2               match_button_flag4 = 1; 
 473   2            if(match_button_flag5 == 1)
 474   2               {
 475   3               match_button_flag6 = 1;
 476   3               match_button_flag5 = 0;
 477   3               
 478   3               transceiver_power_enable = 0;
 479   3               
 480   3               #ifdef ID
                       receiver_EN_count = 0;
                       receiver_EN = 0;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 9   

                       RXD = 1;
                       #endif
 485   3               
 486   3               #ifdef WX
 487   3               UART_Send_Data_match();
 488   3               #endif
 489   3      
 490   3               if(match_moto_EN == 0)
 491   3                  {
 492   4                  Moto_Vibration(); 
 493   4                  match_moto_EN = 1;
 494   4                  }
 495   3               }
 496   2               
 497   2            if(++match_button_HVcount > 4000)
 498   2               {
 499   3               match_button_HVcount = 4002;
 500   3               match_button_flag1 = 0;
 501   3               match_button_flag2 = 0;
 502   3               match_button_flag3 = 0;
 503   3               match_button_flag4 = 0;
 504   3               match_button_flag5 = 0;
 505   3               match_moto_EN = 0;
 506   3               }
 507   2            }
 508   1      
 509   1         #ifdef ID
                 if(IDflash_EN == 1)
                    {
                    IDflash_EN = 0;
                    match_button_flag1 = 0;
                    match_button_flag2 = 0;
                    match_button_flag3 = 0;
                    match_button_flag4 = 0;
                    match_button_flag5 = 0;
                    match_button_flag6 = 0;
                    match_moto_EN = 0;
                    Self_learn_programming_F();
                    Moto_Vibration();
                    Delay(10);
                    Moto_Vibration();
                    match_button_flag6count = 0;
                    }
                 #endif
 527   1         }
 528          
 529          /*-----------------------------------------------
 530             UART interrupt
 531          -----------------------------------------------*/
 532          void uart_isr() interrupt 4 
 533             {
 534   1         if(RI)
 535   1            {
 536   2            RI=0;
 537   2            received_data_buffer[data_count] = SBUF;
 538   2            
 539   2            if(match_button_flag6 == 0)
 540   2               {
 541   3               // judge whether buffer[0] is CmdHead
 542   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 543   3                  {
 544   4                  data_count = 1;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 10  

 545   4                  }
 546   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 547   3                  {
 548   4                  data_count = 2;
 549   4                  }
 550   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 551   3                  {
 552   4                  data_count = 3;
 553   4                  }
 554   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 555   3                  {
 556   4                  data_count = 4;
 557   4                  }
 558   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 559   3                  {
 560   4                  data_count = 5;
 561   4                  }
 562   3               else if(data_count == 5)
 563   3                  {
 564   4                  receive_data_finished_flag = 1;
 565   4                  data_count = 0;
 566   4                  }
 567   3               else 
 568   3                  {
 569   4                  data_count = 0;
 570   4                  }
 571   3      
 572   3               if(receive_data_finished_flag==1)   
 573   3                  {
 574   4                  receive_data_finished_flag=0;       
 575   4                  switch(received_data_buffer[5])
 576   4                     {
 577   5                     case ComMode_2:
 578   5                        {
 579   6                        battery_stolen_EN = 1;
 580   6                        }
 581   5                     break;
 582   5                     
 583   5                     case ComMode_3:
 584   5                        {
 585   6                        stolen_alarm_flag = 1;
 586   6      
 587   6                        raised_alarm_count=0;
 588   6                        raised_alarm_flag=0;
 589   6                        fell_alarm_count=0;
 590   6                        fell_alarm_flag=0;
 591   6                        }
 592   5                     break;
 593   5                  
 594   5                     case ComMode_4:
 595   5                        {
 596   6                        raised_alarm_flag=1;
 597   6      
 598   6                        stolen_alarm_count=0;
 599   6                        stolen_alarm_flag=0;
 600   6                        fell_alarm_count=0;
 601   6                        fell_alarm_flag=0;
 602   6                        }
 603   5                     break;
 604   5      
 605   5                     case ComMode_5:
 606   5                        {
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 11  

 607   6                        fell_alarm_flag=1;   
 608   6      
 609   6                        stolen_alarm_count=0;
 610   6                        stolen_alarm_flag=0;
 611   6                        raised_alarm_count=0;
 612   6                        raised_alarm_flag=0;
 613   6                        }
 614   5                     break;
 615   5      
 616   5                     case ComMode_6:
 617   5                        {
 618   6                        wire_broken_EN = 1;
 619   6                        }
 620   5                     break;
 621   5                     }
 622   4                  }
 623   3               }
 624   2            else
 625   2               {
 626   3               if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
 627   3                  {
 628   4                  data_count = 1;
 629   4                  }
 630   3               else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
 631   3                  {
 632   4                  data_count = 2;
 633   4                  }
 634   3               else if(data_count == 2)
 635   3                  {
 636   4                  data_count = 3;
 637   4                  }
 638   3               else if(data_count == 3)
 639   3                  {
 640   4                  data_count = 4;
 641   4                  }
 642   3               else if(data_count == 4)
 643   3                  {
 644   4                  data_count = 5;
 645   4                  }
 646   3               else if(data_count == 5)
 647   3                  {
 648   4                  data_count = 6;
 649   4                  }
 650   3               else if(data_count == 6)
 651   3                  {
 652   4                  data_count = 0;
 653   4                  IDflash_EN = 1;
 654   4                  }
 655   3               else 
 656   3                  {
 657   4                  data_count = 0;
 658   4                  }
 659   3               }     
 660   2            }
 661   1         }
 662          
 663          /*-----------------------------------------------------------
 664             KBI_ISR()
 665             ¼üÅÌÖĞ¶Ï£¬Ê¹Ğ¾Æ¬´ÓÊ¡µçÄ£Ê½ÖĞ»½ĞÑ
 666          -----------------------------------------------------------*/
 667          void KBI_ISR(void) interrupt 7
 668             {
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:24:03 PAGE 12  

 669   1         EKB = 0;
 670   1         KBIF &= 0xfc;
 671   1         transceiver_power_enable = 1;
 672   1         vibration_send_EN = 1;
 673   1         receiver_EN = 0;
 674   1         RXD = 1;
 675   1         Toggle_button_HV_count = 0;
 676   1      // EKB = 1;
 677   1         }
 678                
 679          /*---------------------------------------------------
 680             end of file
 681          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1068    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     71    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     41    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
