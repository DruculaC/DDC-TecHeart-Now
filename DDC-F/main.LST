C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - INCDIR(..\Library) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-F program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          #include "main.h"             
   8          #include "port.h"
   9          
  10          #include "AD.h"
  11          #include "Timer.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Delay.h"
  15          #include "communication.h"
  16          #include "Other.h"
  17          #include "battery.h"
  18          #include "UART.h"
  19          #include "ISP_DataFlash.h"
  20          #include "schedular.h"
  21          
  22          
  23          /*------- Public variable declarations --------------------------*/
  24          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  25          extern bit enable_sensor_delayEN;
  26          
  27          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  48          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  50          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  52          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 2   

  53          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;       //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´
             -Î¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  60          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  63          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  64          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  65          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  66          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  67          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  71          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  72          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  73          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  74          bit sensor_3rdalarm_flag = 0;
  75          bit wheeled_flag = 0;
  76          tWord wheeled_count = 0;
  77          tWord match_button_count = 0;
  78          tWord Press_open_button_count = 0;
  79          
  80          // ------ Private variable definitions -----------------------------
  81          tWord stolen_alarm_count = 0;
  82          bit raised_alarm_flag = 0;
  83          bit fell_alarm_flag = 0;
  84          bit Host_battery_high_flag = 0;
  85          bit wire_broken_EN = 0;
  86          tWord Mode_detect_count = 0;
  87          bit Mode_select = 0; // Ä£Ê½Ñ¡Ôñ£¬0±íÊ¾×Ô¶¯Ä£Ê½£¬1±íÊ¾ÊÖ¶¯Ä£Ê½
  88          
  89          bit powersave_enable = 0;
  90          
  91          bit itrpt_EN = 1;
  92          tByte itrpt_count = 0;
  93          bit idle_EN = 0;
  94          
  95          bit Auto_transmit = 0;        // 0±íÊ¾·Ç×Ô¶¯·¢ËÍÊı¾İ£¬1±íÊ¾×Ô¶¯·¢ËÍÊı¾İ½øĞĞÈÏÖ¤
  96          bit IDflash_EN = 0;
  97          tWord match_button_HVcount = 0;
  98          tWord match_button_LVcount = 0;
  99          bit match_button_flag1 = 0;
 100          bit match_button_flag2 = 0;
 101          bit match_button_flag3 = 0;
 102          bit match_button_flag4 = 0;
 103          bit match_button_flag5 = 0;
 104          bit match_button_flag6 = 0;
 105          tByte match_button_flag6count = 0;
 106          
 107          tWord receiver_EN_count = 0;
 108          tWord receiver_DisEN_count = 0;
 109          
 110          bit match_moto_EN = 0;
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 3   

 111          
 112          bit battery_LV_flag = 0;
 113          tByte battery_LV_flag_count = 0;
 114          bit battery_HV_flag = 0;
 115          tByte battery_HV_flag_count = 0;
 116          tByte battery_HV_speech_count = 0;
 117          bit battery_HV_speech_over = 0;
 118          
 119          tWord Toggle_button_HV_count = 0;
 120          bit Toggle_button_HV_flag = 0;
 121          
 122          bit battery_ULV_flag = 0;
 123          tByte battery_ULV_count = 0;
 124          bit battery_hint_action = 0;
 125          bit vibration_send_EN = 0;
 126          
 127          #ifdef WX
              code tByte IDkey6 _at_ 0x001ffb;
              code tByte IDkey7 _at_ 0x001ffc;
              code tByte IDkey8 _at_ 0x001ffd;
              code tByte IDkey9 _at_ 0x001ffe;
              code tByte IDkey10 _at_ 0x001fff;
              code tByte IDkey11 _at_ 0x001fff;
              #endif
 135          #ifdef ID
 136          code tByte IDkey6 _at_ 0x003000;
 137          code tByte IDkey7 _at_ 0x003001;
 138          code tByte IDkey8 _at_ 0x003002;
 139          code tByte IDkey9 _at_ 0x003003;
 140          code tByte IDkey10 _at_ 0x003004;
 141          code tByte IDkey11 _at_ 0x003005;
 142          #endif
 143          
 144          bit ID_selflearning_flag = 0;
 145          tByte ID_selflearning_time = 0;
 146          tByte match_button_level = 0;
 147          
 148          extern tByte myTxRxData[7];
 149          
 150          /*--------------------------------------------------------------*/
 151          
 152          void main(void)
 153             {
 154   1         InitVoice();
 155   1      
 156   1         InitUART(BAUD1200);
 157   1      
 158   1         #ifdef F2
                 InitUART(BAUD9600);
                 #endif
 161   1      
 162   1         // ¼üÅÌÖĞ¶Ï³õÊ¼»¯
 163   1         press_open_button = 1;
 164   1         press_close_button = 1;
 165   1         
 166   1         #ifdef WX
                 KBLS1 |= 0x03;
                 KBLS0 |= 0x03;
                 KBIF &= 0xfc;
                 KBIE |= 0x03;
                 EKB = 1;
                 #endif
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 4   

 173   1      
 174   1         EA = 1;
 175   1      
 176   1      // Moto_EN = 1;      //³õÊ¼»¯£¬¹Ø±ÕÂí´ï
 177   1         voice_EN = 0;        //¿ª»úÊ±£¬½«¹¦·Å¹Ø±Õ
 178   1         P10 = 1;
 179   1         
 180   1      // ADC_check_result = 0x3ff;
 181   1         
 182   1         stolen_alarm_count = 0;       //Çå±¨¾¯¼ÆÊıÆ÷
 183   1         stolen_alarm_flag = 0;        //Çå±¨¾¯±êÖ¾
 184   1      
 185   1      // transmit_wire = 0;
 186   1         transmiter_EN = 0;      // turn off the transmitter
 187   1         receiver_EN = 0;        // turn on the receiver
 188   1         transceiver_power_enable = 0;         // ÉÏµçÊ±ÎŞÏßÄ£¿éµçÔ´¹Ø±Õ
 189   1      
 190   1      
 191   1         while(1)
 192   1            {
 193   2            #ifdef Z2
                    if(idle_EN == 1)
                       {
                       idle_EN = 0;
                       PCON |= 0x02;        
                       }
                    #endif
 200   2               
 201   2            
 202   2            sEOS_Go_To_Sleep();        
 203   2            }
 204   1         }
 205          
 206          /*--------------------------------------------------------------------
 207             timerT0()
 208             ¶¨Ê±Æ÷0Ã¿´ÎÒç³öºóÖ´ĞĞµÄ²Ù×÷
 209          --------------------------------------------------------------------*/
 210          
 211          void timer0() interrupt interrupt_timer_0_overflow
 212             {
 213   1         // ÖØ×°ÔÚ¶¨Ê±Æ÷µÄÊ±¼äÉèÖÃ
 214   1         TH0 = timer0_8H;
 215   1         TL0 = timer0_8L;
 216   1      
 217   1      
 218   1      
 219   1      
 220   1         // ÉèÖÃÒ»¸öÃ¿3sµÄ²Ù×÷
 221   1         if(++timer0_count >= 2000)    
 222   1            {
 223   2      
 224   2            // Ö÷»ú±»µÁ±¨¾¯
 225   2            if(stolen_alarm_flag == 1)    
 226   2               {
 227   3               // ÓïÒôÌáÊ¾£¬Âí´ïÕñ¶¯
 228   3               Alarm_stolen_speech();     
 229   3               Moto_Vibration();          
 230   3               stolen_alarm_flag = 0;
 231   3               }
 232   2      
 233   2            // Ì§ÆğĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´ÎÌ§ÆğÖ»·¢4±é¡£
 234   2            if(raised_alarm_flag == 1) 
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 5   

 235   2               {
 236   3               Alarm_raised_speech();     
 237   3               Moto_Vibration();         
 238   3               raised_alarm_flag = 0;
 239   3               }
 240   2      
 241   2            // µ¹µØĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´Îµ¹µØÖ»·¢4±é¡£
 242   2            if(fell_alarm_flag == 1)
 243   2               {
 244   3               Alarm_fell_speech();      
 245   3               Moto_Vibration();         
 246   3               fell_alarm_flag=0;
 247   3               }
 248   2      
 249   2            if(wire_broken_EN == 1)
 250   2               {
 251   3               wire_broken_speech();
 252   3               Moto_Vibration();         
 253   3               wire_broken_EN = 0;
 254   3               }
 255   2            
 256   2            if(battery_stolen_EN == 1)
 257   2               {
 258   3               battery_stolen_speech_F3();
 259   3               battery_stolen_EN = 0;
 260   3               Moto_Vibration();                
 261   3               }
 262   2      
 263   2            if(ID_selflearning_flag == 1)
 264   2               {
 265   3               ID_selflearning_time += 1;
 266   3               if(ID_selflearning_time > 10)
 267   3                  {
 268   4                  ID_selflearning_flag = 0;
 269   4                  ID_selflearning_time = 0;
 270   4                  }
 271   3               }
 272   2            
 273   2            
 274   2            // Ã¿¸ö3s×öÒ»´ÎµçÁ¿¼ì²â£¬²¢½øĞĞÏà¹ØµÄµçÁ¿ÌáÊ¾
 275   2            Check_motor_accumulator();
 276   2      
 277   2            #ifdef Z2
                    if(ADC_check_result <= 0x36a)    // 2.96V/3.47V µçÁ¿·Ç³£²»×ã
                       {
                       battery_ULV_flag = 1;
                       battery_LV_flag = 0;
                       }
                    else if((ADC_check_result > 0x36a)&&(ADC_check_result <= 0x375))  // 3.27V/3.78V µçÁ¿²»×ã
                       {
                       battery_ULV_flag = 0;
                       battery_LV_flag = 1;
                       }
                    else if(ADC_check_result > 0x375)
                       {
                       battery_ULV_flag = 0;
                       battery_LV_flag = 0;
                       }
                       
                    if(battery_ULV_flag == 1)
                       {
                       if(++battery_ULV_count >= 1)
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 6   

                          {
                          SC_RST = ~SC_RST;
                          battery_ULV_count = 0;
                          battery_hint_action = 1;
                          }
                       }
                       
                    if(battery_LV_flag == 1)
                       {
                       if(++battery_LV_flag_count > 6)
                          {
                          SC_RST = ~SC_RST;
                          battery_LV_flag_count = 0;
                          battery_hint_action = 1;
                          }
                       }
                    #endif
 314   2            
 315   2            #ifdef Z3
 316   2            if(ADC_check_result <= 0x36a)                 // 3.11V/3.64V µçÁ¿²»×ã
 317   2               {
 318   3               battery_LV_flag = 1;
 319   3               battery_HV_flag = 0;
 320   3               battery_HV_speech_over = 0;
 321   3               }
 322   2            else if(ADC_check_result >= 0x37a)            // 3.52V/4.03V µçÁ¿³ä×ã
 323   2               {
 324   3               battery_HV_flag = 1;
 325   3               battery_LV_flag = 0;
 326   3               }
 327   2            else
 328   2               {
 329   3               battery_LV_flag = 0;
 330   3               battery_HV_flag = 0;
 331   3               }
 332   2                  
 333   2            if(battery_LV_flag == 1)
 334   2               {
 335   3               if(++battery_LV_flag_count > 20)
 336   3                  {
 337   4                  Battery_low_alarm_speech();
 338   4                  battery_LV_flag_count = 0;
 339   4                  }        
 340   3               }
 341   2            #endif
 342   2      
 343   2            #ifdef WX
                    if((press_close_button == 1)&&(EKB == 0))
                       {
                       if(++Toggle_button_HV_count > 150)
                          {
                          transceiver_power_enable = 1;
                          TXD = 0;
                          MagentControl_2 = 1;
                          vibration_send_EN = 0;
                          
                          EKB = 1;
                          idle_EN = 1;
                          }
                       }
                    #endif
 358   2            timer0_count = 0;
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 7   

 359   2            }
 360   1         
 361   1         if(press_close_button == 0)
 362   1            {
 363   2            Toggle_button_HV_flag = 0;
 364   2            Toggle_button_HV_count = 0;
 365   2            MagentControl_2 = 0;
 366   2            }
 367   1      
 368   1         if((transceiver_power_enable == 0)&&(ID_selflearning_flag == 0))
 369   1            {
 370   2            #ifdef Z2
                    if(++receiver_EN_count > 80)
                    #endif
 373   2            #ifdef Z3
 374   2            if(++receiver_EN_count > 300)
 375   2            #endif
 376   2               {
 377   3               receiver_EN_count = 0;
 378   3               
 379   3               if(battery_hint_action == 1)
 380   3                  {
 381   4                  UART_Send_Data_F(ComMode_12);       
 382   4      
 383   4                  battery_hint_action = 0;
 384   4                  SC_RST = ~SC_RST;
 385   4                  }
 386   3               
 387   3               #ifdef F2
                       if(vibration_send_EN == 1)
                          {
                          tByte i;
                          
                          UART_Send_Data_F(ComMode_1);           
                          for(i = 0; i < 15; i++)
                             UART_Send_Data_F2(ComMode_1);
                          }
                       #endif
 397   3               
 398   3               #ifdef F3
 399   3               if(vibration_send_EN == 1)
 400   3                  {
 401   4                  tByte i;
 402   4                  
 403   4                  open_tranceiver_F();          
 404   4                  
 405   4                  initsignal_F();   
 406   4                  UART_Send_Data_F3(ComMode_1);
 407   4                  for(i = 0; i < 15; i++)
 408   4                     UART_Send_Data_F3(ComMode_1);
 409   4                  
 410   4                  close_tranceiver_F();            
 411   4                  }
 412   3               #endif
 413   3               
 414   3               transceiver_power_enable = 1;
 415   3               RXD = 0;
 416   3               TXD = 0;       
 417   3               receiver_EN = 0;
 418   3               transmiter_EN = 0;
 419   3               }
 420   2            }  
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 8   

 421   1      
 422   1         if((transceiver_power_enable == 1)&&(ID_selflearning_flag == 0))
 423   1            {     
 424   2            #ifdef Z2
                    if(++receiver_DisEN_count > 4000)
                    #endif
 427   2            #ifdef Z3
 428   2            if(++receiver_DisEN_count > 2000)
 429   2            #endif
 430   2               {
 431   3               transceiver_power_enable = 0;
 432   3               
 433   3               receiver_DisEN_count = 0;
 434   3      
 435   3               #ifdef F3
 436   3               transmiter_EN = 1;
 437   3               receiver_EN = 0;
 438   3               RXD = 1;
 439   3               #endif
 440   3      
 441   3               }
 442   2            }
 443   1         
 444   1         if(press_open_button == 0)
 445   1            {
 446   2            if(++Press_open_button_count > 3000)
 447   2               {
 448   3               transceiver_power_enable = 0;
 449   3               
 450   3               UART_Send_Data_F(ComMode_11);
 451   3               
 452   3               TXD = 0;    
 453   3               transceiver_power_enable = 1;    
 454   3               }
 455   2            }
 456   1         else
 457   1            {
 458   2            Press_open_button_count = 0;
 459   2            }
 460   1         
 461   1         if(match_button == 0)
 462   1            {
 463   2            match_button_LVcount += 1;
 464   2            if(match_button_LVcount >= 6000)
 465   2               {
 466   3               match_button_LVcount = 6001;
 467   3               match_button_level = 0;
 468   3               ID_selflearning_flag = 0;
 469   3               }
 470   2            }
 471   1         else
 472   1            {
 473   2            if(match_button_LVcount > 50)
 474   2               {
 475   3               match_button_LVcount = 0;
 476   3               match_button_level += 1;
 477   3               }
 478   2            }
 479   1         
 480   1         if(match_button_level >= 3)
 481   1            {
 482   2            match_button_level = 0;
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 9   

 483   2            ID_selflearning_flag = 1;
 484   2            data_count = 0;
 485   2            
 486   2            Moto_Vibration();
 487   2            Delay(10);
 488   2            Moto_Vibration();
 489   2            
 490   2            transceiver_power_enable = 0;
 491   2      
 492   2            #ifdef ID
 493   2            receiver_EN = 0;
 494   2            RXD = 1;
 495   2            #endif
 496   2            
 497   2            #ifdef WX
                    UART_Send_Data_match_F();
                    #endif
 500   2            }
 501   1      
 502   1         #ifdef ID
 503   1         if(IDflash_EN == 1)
 504   1            {
 505   2            IDflash_EN = 0;
 506   2      
 507   2            Self_learn_programming_F();
 508   2      
 509   2            Moto_Vibration();
 510   2            Delay(10);
 511   2            Moto_Vibration();
 512   2      
 513   2            ID_selflearning_flag = 0;
 514   2            
 515   2            }
 516   1         #endif
 517   1         }
 518          
 519          /*-----------------------------------------------
 520             UART interrupt
 521          -----------------------------------------------*/
 522          void uart_isr() interrupt 4 
 523             {
 524   1         if(RI)
 525   1            {
 526   2            RI=0;
 527   2            
 528   2            received_data_buffer[data_count] = SBUF;
 529   2            
 530   2            if(ID_selflearning_flag == 0)
 531   2               {
 532   3               // judge whether buffer[0] is CmdHead
 533   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 534   3                  {
 535   4                  data_count = 1;
 536   4                  }
 537   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 538   3                  {
 539   4                  data_count = 2;
 540   4                  MagentControl_2 = ~MagentControl_2;
 541   4                  }
 542   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 543   3                  {
 544   4                  data_count = 3;
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 10  

 545   4                  }
 546   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 547   3                  {
 548   4                  data_count = 4;
 549   4                  }
 550   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 551   3                  {
 552   4                  data_count = 5;
 553   4                  }
 554   3               else if(data_count == 5)
 555   3                  {
 556   4                  receive_data_finished_flag = 1;
 557   4                  data_count = 0;
 558   4                  }
 559   3               else 
 560   3                  {
 561   4                  data_count = 0;
 562   4                  }
 563   3      
 564   3               if(receive_data_finished_flag==1)   
 565   3                  {
 566   4                  receive_data_finished_flag=0;       
 567   4                  switch(received_data_buffer[5])
 568   4                     {
 569   5                     case ComMode_2:
 570   5                        {
 571   6                        battery_stolen_EN = 1;
 572   6                        }
 573   5                     break;
 574   5                     
 575   5                     case ComMode_3:
 576   5                        {
 577   6                        stolen_alarm_flag = 1;
 578   6      
 579   6                        raised_alarm_count=0;
 580   6                        raised_alarm_flag=0;
 581   6                        fell_alarm_count=0;
 582   6                        fell_alarm_flag=0;
 583   6                        }
 584   5                     break;
 585   5                  
 586   5                     case ComMode_4:
 587   5                        {
 588   6                        raised_alarm_flag=1;
 589   6      
 590   6                        stolen_alarm_count=0;
 591   6                        stolen_alarm_flag=0;
 592   6                        fell_alarm_count=0;
 593   6                        fell_alarm_flag=0;
 594   6                        }
 595   5                     break;
 596   5      
 597   5                     case ComMode_5:
 598   5                        {
 599   6                        fell_alarm_flag=1;   
 600   6      
 601   6                        stolen_alarm_count=0;
 602   6                        stolen_alarm_flag=0;
 603   6                        raised_alarm_count=0;
 604   6                        raised_alarm_flag=0;
 605   6                        }
 606   5                     break;
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 11  

 607   5      
 608   5                     case ComMode_6:
 609   5                        {
 610   6                        wire_broken_EN = 1;
 611   6                        }
 612   5                     break;
 613   5                     }
 614   4                  }
 615   3               }
 616   2            else
 617   2               {
 618   3               if((data_count == 0) && (received_data_buffer[0] == CmdHead))
 619   3      //       if(data_count == 0)
 620   3                  {
 621   4                  data_count = 1;
 622   4                  }
 623   3               else if((data_count == 1) && (received_data_buffer[1] == ComMode_1))
 624   3      //       else if(data_count == 1)
 625   3                  {
 626   4                  data_count = 2;
 627   4                  }
 628   3               else if(data_count == 2)
 629   3                  {
 630   4                  data_count = 3;
 631   4                  }
 632   3               else if(data_count == 3)
 633   3                  {
 634   4                  data_count = 4;
 635   4                  }
 636   3               else if(data_count == 4)
 637   3                  {
 638   4                  data_count = 5;
 639   4                  }
 640   3               else if(data_count == 5)
 641   3                  {
 642   4                  data_count = 6;
 643   4                  }
 644   3               else if(data_count == 6)
 645   3                  {
 646   4                  data_count = 0;
 647   4                  IDflash_EN = 1;
 648   4                  }
 649   3               else 
 650   3                  {
 651   4                  data_count = 0;
 652   4                  }
 653   3               }     
 654   2            }
 655   1         }
 656          
 657          /*-----------------------------------------------------------
 658             KBI_ISR()
 659             ¼üÅÌÖĞ¶Ï£¬Ê¹Ğ¾Æ¬´ÓÊ¡µçÄ£Ê½ÖĞ»½ĞÑ
 660          -----------------------------------------------------------*/
 661          #ifdef WX
              void KBI_ISR(void) interrupt 7
                 {
                 EKB = 0;
                 KBIF &= 0xfc;
                 transceiver_power_enable = 1;
                 vibration_send_EN = 1;
                 receiver_EN = 0;
C51 COMPILER V9.54   MAIN                                                                  05/13/2016 09:47:49 PAGE 12  

                 RXD = 1;
                 Toggle_button_HV_count = 0;
                 }
              #endif      
 673          /*---------------------------------------------------
 674             end of file
 675          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    949    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     73       1
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     42    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
