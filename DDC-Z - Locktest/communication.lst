C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE COMMUNICATION
OBJECT MODULE PLACED IN .\communication.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\communication.c COMPACT ROM(COMPACT) OPTI
                    -MIZE(8,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\communication.lst) TABS(3) OBJECT(.\communication.obj
                    -)

line level    source

   1          /*---------------------------------------------------
   2             communication.c (v1.00)
   3             
   4             通信程序
   5          ---------------------------------------------------*/ 
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "communication.h"
  11          #include "Delay.h"
  12          #include "uart.h"
  13          
  14          /*------ private variable --------------------------*/
  15          tByte myTxRxData[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  16          //tByte IDkey11 = IDkey6^IDkey7^IDkey8^IDkey9^IDkey10;
  17          
  18          /*------- Public variable declarations --------------------------*/
  19          extern tByte receive_LV_count;      
  20          extern bit receive_wire_flag;    
  21          extern tByte one_receive_byte;      
  22          extern tByte one_receive_byte_count;         
  23          extern tByte receive_HV_count;      
  24          extern tByte data_count;            
  25          extern tByte received_data_buffer[7];     
  26          extern bit receive_data_finished_flag;    
  27          
  28          extern code tByte IDkey6;
  29          extern code tByte IDkey7;
  30          extern code tByte IDkey8;
  31          extern code tByte IDkey9;
  32          extern code tByte IDkey10;
  33          
  34          /*----------------------------------------------------
  35             InitTransceiver()
  36             Initialise Transceiver
  37          ----------------------------------------------------*/
  38          void InitTransceiver(void)
  39             {
  40   1         P10 = High;
  41   1         transmiter_EN = Close;
  42   1         receiver_EN = Open;  
  43   1         transmiter_power = 0;      // High power mode
  44   1         }
  45             
  46          /*----------------------------------------------------
  47             initsignal()
  48             
  49             初始化信号程序，接收机在接接收信号的时候，需要有
  50             一段代码来使接收机打开，而这一段程序有可能无法识别
  51             出来，而是相当于废代码，只占用通信时间。
  52          ----------------------------------------------------*/
  53          void initsignal()
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 2   

  54             {
  55   1         tByte k,k1;
  56   1         tByte mystartbuffer = 0xaa;
  57   1         for(k1 = 0; k1 < 1; k1++)
  58   1            {
  59   2            for(k=0;k<8;k++)
  60   2               {
  61   3               if((mystartbuffer&0x80) == 0x80)//为1
  62   3                  {
  63   4                  P10=0;
  64   4                  Custom_Delay(46, 20);
  65   4      //          Delay_5ms();
  66   4                  }
  67   3               else
  68   3                  {
  69   4                  P10=0;
  70   4                  Custom_Delay(46, 20);
  71   4      //          Delay_5ms();
  72   4                  }
  73   3               P10=1;
  74   3               mystartbuffer<<=1;
  75   3               Custom_Delay(40, 24);
  76   3      //       Delay_5ms();
  77   3               }
  78   2            mystartbuffer=0xaa;
  79   2      //    Delay_5ms();
  80   2      //    Custom_Delay(23, 28);
  81   2            }
  82   1         P10=1;
  83   1         }
  84          
  85          void initsignal_F(void)
  86             {
  87   1         tByte k,k1;
  88   1         tByte mystartbuffer = 0xaa;
  89   1         for(k1 = 0; k1 < 1; k1++)
  90   1            {
  91   2            #ifdef Z2
                    for(k=0;k<4;k++)
                    #endif
  94   2            #ifdef Z3
  95   2            for(k=0;k<7;k++)
  96   2            #endif      
  97   2               {
  98   3               if((mystartbuffer&0x80) == 0x80)//为1
  99   3                  {
 100   4                  P10=0;
 101   4                  Custom_Delay(46, 20);
 102   4      //          Delay_5ms();
 103   4                  }
 104   3               else
 105   3                  {
 106   4                  P10=0;
 107   4                  Custom_Delay(46, 20);
 108   4      //          Delay_5ms();
 109   4                  }
 110   3               P10=1;
 111   3               mystartbuffer<<=1;
 112   3               Custom_Delay(40, 24);
 113   3      //       Delay_5ms();
 114   3               }
 115   2            mystartbuffer=0xaa;
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 3   

 116   2      //    Delay_5ms();
 117   2      //    Custom_Delay(23, 28);
 118   2            }
 119   1         P10=1;
 120   1         }
 121          
 122          /*--------------------------------------------------
 123             Send_Data()
 124             将数据发送出去
 125          --------------------------------------------------*/
 126          void Send_Data(tByte x)
 127             {
 128   1         tByte i,n;
 129   1         for(i=0;i<3;i++)
 130   1            {
 131   2            for(n=0;n<8;n++)
 132   2               {
 133   3               if((myTxRxData[i]&0x80)==0x80)
 134   3                  {
 135   4                  P10=0;
 136   4                  Custom_Delay(36, x);
 137   4                  }
 138   3               else
 139   3                  {
 140   4                  P10=0;
 141   4                  Custom_Delay(23, x);
 142   4                  }
 143   3               P10=1;
 144   3               myTxRxData[i]<<=1;
 145   3               Custom_Delay(20, x);
 146   3               }
 147   2            }  
 148   1         }
 149          
 150          /*--------------------------------------------------
 151             ComMode_Data()
 152             
 153             主机接收到编码1信号后，会反馈一个编码1信号给附机
 154             以表示主机在附机附近。
 155          ---------------------------------------------------*/
 156          void ComMode_Data(tByte ComMode, x) 
 157             {
 158   1         receiver_EN = 1;
 159   1         Delay(20);
 160   1         transmiter_EN = 0;
 161   1         myTxRxData[0] = CmdHead;
 162   1         myTxRxData[1] = MyAddress;
 163   1         myTxRxData[2] = ComMode;
 164   1      
 165   1         initsignal();
 166   1         Send_Data(x);
 167   1         
 168   1         transmiter_EN = 1;
 169   1         receiver_EN = 1;
 170   1         }
 171          
 172          /*--------------------------------------------------
 173             ComMode_Data_WX()
 174             
 175             主机接收到编码1信号后，会反馈一个编码1信号给附机
 176             以表示主机在附机附近。
 177          ---------------------------------------------------*/
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 4   

 178          void ComMode_Data_WX(tByte ComMode, x) 
 179             {
 180   1         receiver_EN = 1;
 181   1         Delay(20);
 182   1         transmiter_EN = 0;
 183   1         myTxRxData[0] = CmdHead;
 184   1         myTxRxData[1] = MyAddress;
 185   1         myTxRxData[2] = ComMode;
 186   1      
 187   1         initsignal();
 188   1         Send_Data(x);
 189   1         
 190   1         transmiter_EN = 0;
 191   1         receiver_EN = 0;
 192   1         TXD = 0;
 193   1         }
 194          
 195          /*------------------------------------------------------------------
 196             UART发送数据
 197          ------------------------------------------------------------------*/
 198          void UART_Send_Data(tByte command)
 199             {
 200   1         tByte ii = 0;
 201   1         open_tranceiver();
 202   1         myTxRxData[0] = IDkey6;
 203   1         myTxRxData[1] = IDkey7;
 204   1         myTxRxData[2] = IDkey8;
 205   1         myTxRxData[3] = IDkey9;
 206   1         myTxRxData[4] = IDkey10;
 207   1         myTxRxData[5] = command;
 208   1         
 209   1         initsignal();
 210   1         
 211   1         for(ii = 0; ii < 160; ii++)
 212   1            {
 213   2            SendNByte(myTxRxData, 6);
 214   2            Delay_10ms();     
 215   2            }
 216   1      
 217   1         close_tranceiver();
 218   1         Delay_500ms();
 219   1         }
 220          
 221          /*------------------------------------------------------------------
 222             UART附机发送数据
 223          ------------------------------------------------------------------*/
 224          void UART_Send_Data_F(tByte command)
 225             {
 226   1         tByte ii = 0;
 227   1         open_tranceiver();
 228   1         myTxRxData[0] = IDkey6;
 229   1         myTxRxData[1] = IDkey7;
 230   1         myTxRxData[2] = IDkey8;
 231   1         myTxRxData[3] = IDkey9;
 232   1         myTxRxData[4] = IDkey10;
 233   1         myTxRxData[5] = command;
 234   1      
 235   1         initsignal_F();   
 236   1         
 237   1         SendNByte(myTxRxData, 6);
 238   1      
 239   1         receiver_EN = 0;
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 5   

 240   1      
 241   1         #ifdef Z3
 242   1         InitUART(BAUD1200);
 243   1         #endif
 244   1         }
 245          
 246          /*------------------------------------------------------------------
 247             UART附机发送数据
 248          ------------------------------------------------------------------*/
 249          void UART_Send_Data_F2(tByte command)
 250             {
 251   1         tByte ii = 0;
 252   1         open_tranceiver();
 253   1         myTxRxData[0] = IDkey6;
 254   1         myTxRxData[1] = IDkey7;
 255   1         myTxRxData[2] = IDkey8;
 256   1         myTxRxData[3] = IDkey9;
 257   1         myTxRxData[4] = IDkey10;
 258   1         myTxRxData[5] = command;
 259   1         
 260   1         Delay_1ms();
 261   1         Delay_1ms();
 262   1         Delay_1ms();
 263   1         SendNByte(myTxRxData, 6);
 264   1      
 265   1         receiver_EN = 0;
 266   1         
 267   1         #ifdef Z3
 268   1         InitUART(BAUD1200);
 269   1         #endif
 270   1         }
 271          
 272          /*------------------------------------------------------------------
 273             open_tranceiver()
 274             开发射机
 275          -------------------------------------------------------------------*/
 276          void open_tranceiver(void)
 277             {
 278   1         #ifdef Z3
 279   1         InitUART(BAUD9600);
 280   1         #endif
 281   1         
 282   1         receiver_EN = 1;
 283   1         transmiter_EN = 0;
 284   1         
 285   1         }
 286          
 287          /*------------------------------------------------------------------
 288             close_tranceiver()
 289             开发射机
 290          -------------------------------------------------------------------*/
 291          void close_tranceiver(void)
 292             {
 293   1         #ifdef F3
                 transmiter_EN = 1;
                 #endif
 296   1         
 297   1         receiver_EN = 0;
 298   1         
 299   1         #ifdef Z3
 300   1         InitUART(BAUD9600);
 301   1         #endif
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 6   

 302   1         }
 303          
 304          /*------------------------------------------------------------------
 305             UART发送数据
 306          ------------------------------------------------------------------*/
 307          void UART_Send_Data_match(void)
 308             {
 309   1         open_tranceiver();
 310   1         
 311   1         myTxRxData[0] = CmdHead;
 312   1         myTxRxData[1] = ComMode_1;
 313   1         myTxRxData[2] = IDkey6;
 314   1         myTxRxData[3] = IDkey7;
 315   1         myTxRxData[4] = IDkey8;
 316   1         myTxRxData[5] = IDkey9;
 317   1         myTxRxData[6] = IDkey10;
 318   1         
 319   1         initsignal();
 320   1         
 321   1         SendNByte(myTxRxData, 8);
 322   1         Delay_50ms();
 323   1         
 324   1         close_tranceiver();
 325   1         }
 326          
 327          /*-----------------------------------------------------------------------------
 328             receive_byte()
 329             receive a byte program
 330          -----------------------------------------------------------------------------*/
 331          void receive_byte(void)
 332             {
 333   1         // P11 constantly HV, if detected a LV, judge it.
 334   1         if(P11 == 0)
 335   1            {
 336   2            // count the LV time, if more than 12ms, reset it.
 337   2            if(++receive_LV_count >= 120)
 338   2               {
 339   3               receive_LV_count = 0;
 340   3               }
 341   2            receive_wire_flag = 0;
 342   2            }
 343   1         // if P11 return to HV
 344   1         else
 345   1            {
 346   2            // and already have LV before, so we think it maybe a bit signal
 347   2            if(receive_wire_flag == 0)
 348   2               {
 349   3               // set the flag, to judge a bit only one time
 350   3               receive_wire_flag = 1;
 351   3      
 352   3               // judge the LV time, if 3.5ms < time < 8ms, we think it is a "0". time<3.5ms means a noise.
 353   3               if((receive_LV_count > 35)&&(receive_LV_count <= 80)) 
 354   3                  {
 355   4                  // save "0" to one byte
 356   4                  one_receive_byte <<= 1;
 357   4                  one_receive_byte &= 0xfe;
 358   4                  one_receive_byte_count++;
 359   4                  receive_HV_count = 0;
 360   4                  }
 361   3               // time > 8ms, means a "1"
 362   3               else if((receive_LV_count > 80))
 363   3                  {
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 7   

 364   4                  // save "1" to one byte
 365   4                  one_receive_byte <<= 1;
 366   4                  one_receive_byte |= 0x01;
 367   4                  one_receive_byte_count++;
 368   4                  receive_HV_count = 0;
 369   4                  }        
 370   3               else
 371   3                  {
 372   4                  // increase the count for HV
 373   4                  receive_HV_count++;  
 374   4                  }
 375   3               // reset LV count
 376   3               receive_LV_count = 0;
 377   3               }
 378   2            else
 379   2               {
 380   3               // judge whether HV count > 6ms, if yes, means a restart
 381   3               if(++receive_HV_count >= 60)
 382   3                  {
 383   4                  one_receive_byte_count = 0;
 384   4                  receive_wire_flag = 1;
 385   4                  data_count = 0;
 386   4                  }     
 387   3               }
 388   2            }
 389   1         }
 390          
 391          /*-----------------------------------------------------------------------------
 392             receive_byte_Lock()
 393             receive a byte program
 394          -----------------------------------------------------------------------------*/
 395          void receive_byte_Lock(void)
 396             {
 397   1         // P11 constantly HV, if detected a LV, judge it.
 398   1         if(receive_wire == 1)
 399   1            {
 400   2            // count the LV time, if more than 12ms, reset it.
 401   2            if(++receive_LV_count >= 120)
 402   2               {
 403   3               receive_LV_count = 0;
 404   3               }
 405   2            receive_wire_flag = 0;
 406   2            }
 407   1         // if P11 return to HV
 408   1         else
 409   1            {
 410   2            // and already have LV before, so we think it maybe a bit signal
 411   2            if(receive_wire_flag == 0)
 412   2               {
 413   3               // set the flag, to judge a bit only one time
 414   3               receive_wire_flag = 1;
 415   3      
 416   3               // judge the LV time, if 3.5ms < time < 8ms, we think it is a "0". time<3.5ms means a noise.
 417   3               if((receive_LV_count > 35)&&(receive_LV_count <= 80)) 
 418   3                  {
 419   4                  // save "0" to one byte
 420   4                  one_receive_byte <<= 1;
 421   4                  one_receive_byte &= 0xfe;
 422   4                  one_receive_byte_count++;
 423   4                  receive_HV_count = 0;
 424   4                  }
 425   3               // time > 8ms, means a "1"
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 8   

 426   3               else if((receive_LV_count > 80))
 427   3                  {
 428   4                  // save "1" to one byte
 429   4                  one_receive_byte <<= 1;
 430   4                  one_receive_byte |= 0x01;
 431   4                  one_receive_byte_count++;
 432   4                  receive_HV_count = 0;
 433   4                  }        
 434   3               else
 435   3                  {
 436   4                  // increase the count for HV
 437   4                  receive_HV_count++;  
 438   4                  }
 439   3               // reset LV count
 440   3               receive_LV_count = 0;
 441   3               }
 442   2            else
 443   2               {
 444   3               // judge whether HV count > 6ms, if yes, means a restart
 445   3               if(++receive_HV_count >= 60)
 446   3                  {
 447   4                  one_receive_byte_count = 0;
 448   4                  receive_wire_flag = 1;
 449   4                  data_count = 0;
 450   4                  }     
 451   3               }
 452   2            }
 453   1         }
 454          
 455          /*-----------------------------------------------------------------------------
 456             receive_word()
 457             receive a word program
 458          -----------------------------------------------------------------------------*/
 459          void receive_word(void)
 460             {
 461   1         // one byte have 8 bit, once receive a bit, the count increase, once it is 8, it means a byte received.
 462   1         if(one_receive_byte_count == 8)
 463   1            {
 464   2            one_receive_byte_count = 0;
 465   2            // assign one byte to buffer[i] 
 466   2            received_data_buffer[data_count] = one_receive_byte;
 467   2            
 468   2            // judge whether buffer[0] is CmdHead
 469   2            if((data_count == 0) && (received_data_buffer[0] == CmdHead))
 470   2               {
 471   3               data_count = 1;
 472   3               }
 473   2            // judge whether buffer[1] is MyAddress
 474   2            else if((data_count == 1) && (received_data_buffer[1] == MyAddress))
 475   2               {
 476   3               data_count = 2;
 477   3               }
 478   2            else if(data_count == 2)
 479   2               {
 480   3               receive_data_finished_flag = 1;
 481   3               data_count = 0;
 482   3               }
 483   2            else 
 484   2               {
 485   3               data_count = 0;
 486   3               }
 487   2            }
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 9   

 488   1         }
 489          
 490          /*--------------------------------------------------
 491             send_code_to_lock()
 492             
 493             将密码发送给锁体。
 494          ---------------------------------------------------*/
 495          void send_code_to_lock(tByte x, y)  
 496          {
 497   1         unsigned char i,n;
 498   1         myTxRxData[0]=CmdHead;
 499   1         myTxRxData[1]=MyAddress;
 500   1         myTxRxData[2]=x;
 501   1      /* myTxRxData[3]=0x00;
 502   1         myTxRxData[4]=0x00;
 503   1         myTxRxData[5]=0x00;
 504   1         myTxRxData[6]=0x00;
 505   1      */
 506   1         for(i=0;i<3;i++)
 507   1         {
 508   2            for(n=0;n<8;n++)
 509   2            {
 510   3               if((myTxRxData[i]&0x80) == 0x80)//为1
 511   3               {
 512   4                  MagentControl_2 = 0;
 513   4                  Custom_Delay(36, y);
 514   4               }
 515   3               else//为0的情况
 516   3               {
 517   4                  MagentControl_2 = 0;
 518   4                  Custom_Delay(23, y);
 519   4               }
 520   3               MagentControl_2 = 1;    //常态为高电平
 521   3               myTxRxData[i] <<= 1;
 522   3               Custom_Delay(15, y);
 523   3            }
 524   2         }
 525   1      }
 526          
 527          /*--------------------------------------------------
 528             send_code_to_lock_Taili()
 529             
 530             将密码发送给锁体。
 531          ---------------------------------------------------*/
 532          void send_code_to_lock_Taili(tByte x, y)  
 533          {
 534   1         unsigned char i,n;
 535   1         myTxRxData[0]=CmdHead;
 536   1         myTxRxData[1]=MyAddress;
 537   1         myTxRxData[2]=x;
 538   1      /* myTxRxData[3]=0x00;
 539   1         myTxRxData[4]=0x00;
 540   1         myTxRxData[5]=0x00;
 541   1         myTxRxData[6]=0x00;
 542   1      */
 543   1         for(i=0;i<3;i++)
 544   1         {
 545   2            for(n=0;n<8;n++)
 546   2            {
 547   3               if((myTxRxData[i]&0x80) == 0x80)//为1
 548   3               {
 549   4                  lock_code = 0;
C51 COMPILER V9.54   COMMUNICATION                                                         08/21/2015 11:49:21 PAGE 10  

 550   4                  Custom_Delay(36, y);
 551   4               }
 552   3               else//为0的情况
 553   3               {
 554   4                  lock_code = 0;
 555   4                  Custom_Delay(23, y);
 556   4               }
 557   3               lock_code = 1;    //常态为高电平
 558   3               myTxRxData[i] <<= 1;
 559   3               Custom_Delay(15, y);
 560   3            }
 561   2         }
 562   1      }
 563          
 564          /*------------------------------------------------------------------
 565             UART发送数据
 566          ------------------------------------------------------------------*/
 567          void UART_Send_Data_Broadtest(tByte command)
 568             {
 569   1         tByte ii = 0;
 570   1      // open_tranceiver();
 571   1      
 572   1         myTxRxData[0] = IDkey6;
 573   1         myTxRxData[1] = IDkey7;
 574   1         myTxRxData[2] = IDkey8;
 575   1         myTxRxData[3] = IDkey9;
 576   1         myTxRxData[4] = IDkey10;
 577   1         myTxRxData[5] = command;
 578   1         
 579   1         initsignal();
 580   1         
 581   1         for(ii = 0; ii < 10; ii++)
 582   1            {
 583   2            SendNByte(myTxRxData, 6);
 584   2            Delay_10ms();     
 585   2            }
 586   1      
 587   1      // close_tranceiver();
 588   1      // Delay_500ms();
 589   1         }
 590          
 591          
 592          /*---------------------------------------------------
 593             end of file
 594          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1257    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      7      30
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
