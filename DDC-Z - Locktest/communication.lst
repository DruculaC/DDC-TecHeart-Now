C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE COMMUNICATION
OBJECT MODULE PLACED IN .\communication.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\communication.c COMPACT OPTIMIZE(8,SPEED)
                    - BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\communication.lst) TABS(3) OBJECT(.\communication.obj)

line level    source

   1          /*---------------------------------------------------
   2             communication.c (v1.00)
   3             
   4             通信程序
   5          ---------------------------------------------------*/ 
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "communication.h"
  11          #include "Delay.h"
  12          #include "uart.h"
  13          
  14          /*------ private variable --------------------------*/
  15          tByte myTxRxData[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  16          //tByte IDkey11 = IDkey6^IDkey7^IDkey8^IDkey9^IDkey10;
  17          
  18          /*------- Public variable declarations --------------------------*/
  19          extern tByte receive_LV_count;      
  20          extern bit receive_wire_flag;    
  21          extern tByte one_receive_byte;      
  22          extern tByte one_receive_byte_count;         
  23          extern tByte receive_HV_count;      
  24          extern tByte data_count;            
  25          extern tByte received_data_buffer[7];     
  26          extern bit receive_data_finished_flag;    
  27          
  28          extern code tByte IDkey6;
  29          extern code tByte IDkey7;
  30          extern code tByte IDkey8;
  31          extern code tByte IDkey9;
  32          extern code tByte IDkey10;
  33          
  34          /*----------------------------------------------------
  35             InitTransceiver()
  36             Initialise Transceiver
  37          ----------------------------------------------------*/
  38          void InitTransceiver(void)
  39             {
  40   1         P10 = High;
  41   1         transmiter_EN = Close;
  42   1         receiver_EN = Open;  
  43   1         transmiter_power = 0;      // High power mode
  44   1         }
  45             
  46          /*----------------------------------------------------
  47             initsignal()
  48             
  49             初始化信号程序，接收机在接接收信号的时候，需要有
  50             一段代码来使接收机打开，而这一段程序有可能无法识别
  51             出来，而是相当于废代码，只占用通信时间。
  52          ----------------------------------------------------*/
  53          void initsignal()
  54             {
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 2   

  55   1         tByte k,k1;
  56   1         tByte mystartbuffer = 0xaa;
  57   1         for(k1 = 0; k1 < 3; k1++)
  58   1            {
  59   2            for(k=0;k<8;k++)
  60   2               {
  61   3               if((mystartbuffer&0x80) == 0x80)//为1
  62   3                  {
  63   4                  P10=0;
  64   4                  Custom_Delay(46, 20);
  65   4      //          Delay_5ms();
  66   4                  }
  67   3               else
  68   3                  {
  69   4                  P10=0;
  70   4                  Custom_Delay(46, 20);
  71   4      //          Delay_5ms();
  72   4                  }
  73   3               P10=1;
  74   3               mystartbuffer<<=1;
  75   3               Custom_Delay(40, 24);
  76   3      //       Delay_5ms();
  77   3               }
  78   2            mystartbuffer=0xaa;
  79   2      //    Delay_5ms();
  80   2      //    Custom_Delay(23, 28);
  81   2            }
  82   1         P10=1;
  83   1         }
  84          
  85          void initsignal_F(void)
  86             {
  87   1         tByte k,k1;
  88   1         tByte mystartbuffer = 0xaa;
  89   1         for(k1 = 0; k1 < 2; k1++)
  90   1            {
  91   2            for(k=0;k<6;k++)
  92   2               {
  93   3               if((mystartbuffer&0x80) == 0x80)//为1
  94   3                  {
  95   4                  P10=0;
  96   4                  Custom_Delay(46, 20);
  97   4      //          Delay_5ms();
  98   4                  }
  99   3               else
 100   3                  {
 101   4                  P10=0;
 102   4                  Custom_Delay(46, 20);
 103   4      //          Delay_5ms();
 104   4                  }
 105   3               P10=1;
 106   3               mystartbuffer<<=1;
 107   3               Custom_Delay(40, 24);
 108   3      //       Delay_5ms();
 109   3               }
 110   2            mystartbuffer=0xaa;
 111   2      //    Delay_5ms();
 112   2      //    Custom_Delay(23, 28);
 113   2            }
 114   1         P10=1;
 115   1         }
 116          
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 3   

 117          /*--------------------------------------------------
 118             Send_Data()
 119             将数据发送出去
 120          --------------------------------------------------*/
 121          void Send_Data(tByte x)
 122             {
 123   1         tByte i,n;
 124   1         for(i=0;i<3;i++)
 125   1            {
 126   2            for(n=0;n<8;n++)
 127   2               {
 128   3               if((myTxRxData[i]&0x80)==0x80)
 129   3                  {
 130   4                  P10=0;
 131   4                  Custom_Delay(36, x);
 132   4                  }
 133   3               else
 134   3                  {
 135   4                  P10=0;
 136   4                  Custom_Delay(23, x);
 137   4                  }
 138   3               P10=1;
 139   3               myTxRxData[i]<<=1;
 140   3               Custom_Delay(20, x);
 141   3               }
 142   2            }  
 143   1         }
 144          
 145          /*--------------------------------------------------
 146             ComMode_Data()
 147             
 148             主机接收到编码1信号后，会反馈一个编码1信号给附机
 149             以表示主机在附机附近。
 150          ---------------------------------------------------*/
 151          void ComMode_Data(tByte ComMode, x) 
 152             {
 153   1         receiver_EN = 1;
 154   1         Delay(20);
 155   1         transmiter_EN = 0;
 156   1         myTxRxData[0] = CmdHead;
 157   1         myTxRxData[1] = MyAddress;
 158   1         myTxRxData[2] = ComMode;
 159   1      
 160   1         initsignal();
 161   1         Send_Data(x);
 162   1         
 163   1         transmiter_EN = 1;
 164   1         receiver_EN = 1;
 165   1         }
 166          
 167          /*--------------------------------------------------
 168             ComMode_Data_WX()
 169             
 170             主机接收到编码1信号后，会反馈一个编码1信号给附机
 171             以表示主机在附机附近。
 172          ---------------------------------------------------*/
 173          void ComMode_Data_WX(tByte ComMode, x) 
 174             {
 175   1         receiver_EN = 1;
 176   1         Delay(20);
 177   1         transmiter_EN = 0;
 178   1         myTxRxData[0] = CmdHead;
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 4   

 179   1         myTxRxData[1] = MyAddress;
 180   1         myTxRxData[2] = ComMode;
 181   1      
 182   1         initsignal();
 183   1         Send_Data(x);
 184   1         
 185   1         transmiter_EN = 0;
 186   1         receiver_EN = 0;
 187   1         TXD = 0;
 188   1         }
 189          
 190          /*------------------------------------------------------------------
 191             UART发送数据
 192          ------------------------------------------------------------------*/
 193          void UART_Send_Data(tByte command)
 194             {
 195   1         tByte ii = 0;
 196   1         open_tranceiver();
 197   1         myTxRxData[0] = IDkey6;
 198   1         myTxRxData[1] = IDkey7;
 199   1         myTxRxData[2] = IDkey8;
 200   1         myTxRxData[3] = IDkey9;
 201   1         myTxRxData[4] = IDkey10;
 202   1         myTxRxData[5] = command;
 203   1         
 204   1         initsignal();
 205   1         
 206   1         for(ii = 0; ii < 30; ii++)
 207   1            {
 208   2            SendNByte(myTxRxData, 6);
 209   2            Delay_10ms();     
 210   2            }
 211   1      
 212   1         close_tranceiver();
 213   1         }
 214          
 215          /*------------------------------------------------------------------
 216             UART附机发送数据
 217          ------------------------------------------------------------------*/
 218          void UART_Send_Data_F(tByte command)
 219             {
 220   1         tByte ii = 0;
 221   1         open_tranceiver();
 222   1         myTxRxData[0] = IDkey6;
 223   1         myTxRxData[1] = IDkey7;
 224   1         myTxRxData[2] = IDkey8;
 225   1         myTxRxData[3] = IDkey9;
 226   1         myTxRxData[4] = IDkey10;
 227   1         myTxRxData[5] = command;
 228   1         
 229   1         initsignal_F();
 230   1         
 231   1         SendNByte(myTxRxData, 6);
 232   1      
 233   1         close_tranceiver();  
 234   1         }
 235          
 236          /*------------------------------------------------------------------
 237             open_tranceiver()
 238             开发射机
 239          -------------------------------------------------------------------*/
 240          void open_tranceiver(void)
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 5   

 241             {
 242   1         #ifdef ID
                 InitUART(BAUD1200);
                 #endif
 245   1         
 246   1         receiver_EN = 1;
 247   1         transmiter_EN = 0;   
 248   1         }
 249          
 250          /*------------------------------------------------------------------
 251             close_tranceiver()
 252             开发射机
 253          -------------------------------------------------------------------*/
 254          void close_tranceiver(void)
 255             {
 256   1         #ifdef F3
                 transmiter_EN = 1;
                 #endif
 259   1         
 260   1         receiver_EN = 0;
 261   1         
 262   1         #ifdef ID
                 InitUART(BAUD9600);
                 #endif
 265   1         }
 266          
 267          /*------------------------------------------------------------------
 268             UART发送数据
 269          ------------------------------------------------------------------*/
 270          void UART_Send_Data_match(void)
 271             {
 272   1         open_tranceiver();
 273   1         
 274   1         myTxRxData[0] = CmdHead;
 275   1         myTxRxData[1] = ComMode_1;
 276   1         myTxRxData[2] = IDkey6;
 277   1         myTxRxData[3] = IDkey7;
 278   1         myTxRxData[4] = IDkey8;
 279   1         myTxRxData[5] = IDkey9;
 280   1         myTxRxData[6] = IDkey10;
 281   1         
 282   1         initsignal();
 283   1         
 284   1         SendNByte(myTxRxData, 7);
 285   1         Delay_50ms();
 286   1         
 287   1         close_tranceiver();
 288   1         }
 289          
 290          /*-----------------------------------------------------------------------------
 291             receive_byte()
 292             receive a byte program
 293          -----------------------------------------------------------------------------*/
 294          void receive_byte(void)
 295             {
 296   1         // P11 constantly HV, if detected a LV, judge it.
 297   1         if(P11 == 0)
 298   1            {
 299   2            // count the LV time, if more than 12ms, reset it.
 300   2            if(++receive_LV_count >= 120)
 301   2               {
 302   3               receive_LV_count = 0;
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 6   

 303   3               }
 304   2            receive_wire_flag = 0;
 305   2            }
 306   1         // if P11 return to HV
 307   1         else
 308   1            {
 309   2            // and already have LV before, so we think it maybe a bit signal
 310   2            if(receive_wire_flag == 0)
 311   2               {
 312   3               // set the flag, to judge a bit only one time
 313   3               receive_wire_flag = 1;
 314   3      
 315   3               // judge the LV time, if 3.5ms < time < 8ms, we think it is a "0". time<3.5ms means a noise.
 316   3               if((receive_LV_count > 35)&&(receive_LV_count <= 80)) 
 317   3                  {
 318   4                  // save "0" to one byte
 319   4                  one_receive_byte <<= 1;
 320   4                  one_receive_byte &= 0xfe;
 321   4                  one_receive_byte_count++;
 322   4                  receive_HV_count = 0;
 323   4                  }
 324   3               // time > 8ms, means a "1"
 325   3               else if((receive_LV_count > 80))
 326   3                  {
 327   4                  // save "1" to one byte
 328   4                  one_receive_byte <<= 1;
 329   4                  one_receive_byte |= 0x01;
 330   4                  one_receive_byte_count++;
 331   4                  receive_HV_count = 0;
 332   4                  }        
 333   3               else
 334   3                  {
 335   4                  // increase the count for HV
 336   4                  receive_HV_count++;  
 337   4                  }
 338   3               // reset LV count
 339   3               receive_LV_count = 0;
 340   3               }
 341   2            else
 342   2               {
 343   3               // judge whether HV count > 6ms, if yes, means a restart
 344   3               if(++receive_HV_count >= 60)
 345   3                  {
 346   4                  one_receive_byte_count = 0;
 347   4                  receive_wire_flag = 1;
 348   4                  data_count = 0;
 349   4                  }     
 350   3               }
 351   2            }
 352   1         }
 353          
 354          /*-----------------------------------------------------------------------------
 355             receive_byte_Lock()
 356             receive a byte program
 357          -----------------------------------------------------------------------------*/
 358          void receive_byte_Lock(void)
 359             {
 360   1         // P11 constantly HV, if detected a LV, judge it.
 361   1         if(receive_wire == 1)
 362   1            {
 363   2            // count the LV time, if more than 12ms, reset it.
 364   2            if(++receive_LV_count >= 120)
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 7   

 365   2               {
 366   3               receive_LV_count = 0;
 367   3               }
 368   2            receive_wire_flag = 0;
 369   2            }
 370   1         // if P11 return to HV
 371   1         else
 372   1            {
 373   2            // and already have LV before, so we think it maybe a bit signal
 374   2            if(receive_wire_flag == 0)
 375   2               {
 376   3               // set the flag, to judge a bit only one time
 377   3               receive_wire_flag = 1;
 378   3      
 379   3               // judge the LV time, if 3.5ms < time < 8ms, we think it is a "0". time<3.5ms means a noise.
 380   3               if((receive_LV_count > 35)&&(receive_LV_count <= 80)) 
 381   3                  {
 382   4                  // save "0" to one byte
 383   4                  one_receive_byte <<= 1;
 384   4                  one_receive_byte &= 0xfe;
 385   4                  one_receive_byte_count++;
 386   4                  receive_HV_count = 0;
 387   4                  }
 388   3               // time > 8ms, means a "1"
 389   3               else if((receive_LV_count > 80))
 390   3                  {
 391   4                  // save "1" to one byte
 392   4                  one_receive_byte <<= 1;
 393   4                  one_receive_byte |= 0x01;
 394   4                  one_receive_byte_count++;
 395   4                  receive_HV_count = 0;
 396   4                  }        
 397   3               else
 398   3                  {
 399   4                  // increase the count for HV
 400   4                  receive_HV_count++;  
 401   4                  }
 402   3               // reset LV count
 403   3               receive_LV_count = 0;
 404   3               }
 405   2            else
 406   2               {
 407   3               // judge whether HV count > 6ms, if yes, means a restart
 408   3               if(++receive_HV_count >= 60)
 409   3                  {
 410   4                  one_receive_byte_count = 0;
 411   4                  receive_wire_flag = 1;
 412   4                  data_count = 0;
 413   4                  }     
 414   3               }
 415   2            }
 416   1         }
 417          
 418          /*-----------------------------------------------------------------------------
 419             receive_word()
 420             receive a word program
 421          -----------------------------------------------------------------------------*/
 422          void receive_word(void)
 423             {
 424   1         // one byte have 8 bit, once receive a bit, the count increase, once it is 8, it means a byte received.
 425   1         if(one_receive_byte_count == 8)
 426   1            {
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 8   

 427   2            one_receive_byte_count = 0;
 428   2            // assign one byte to buffer[i] 
 429   2            received_data_buffer[data_count] = one_receive_byte;
 430   2            
 431   2            // judge whether buffer[0] is CmdHead
 432   2            if((data_count == 0) && (received_data_buffer[0] == CmdHead))
 433   2               {
 434   3               data_count = 1;
 435   3               }
 436   2            // judge whether buffer[1] is MyAddress
 437   2            else if((data_count == 1) && (received_data_buffer[1] == MyAddress))
 438   2               {
 439   3               data_count = 2;
 440   3               }
 441   2            else if(data_count == 2)
 442   2               {
 443   3               receive_data_finished_flag = 1;
 444   3               data_count = 0;
 445   3               }
 446   2            else 
 447   2               {
 448   3               data_count = 0;
 449   3               }
 450   2            }
 451   1         }
 452          
 453          /*--------------------------------------------------
 454             send_code_to_lock()
 455             
 456             将密码发送给锁体。
 457          ---------------------------------------------------*/
 458          void send_code_to_lock(tByte x, y)  
 459          {
 460   1         unsigned char i,n;
 461   1         myTxRxData[0]=CmdHead;
 462   1         myTxRxData[1]=MyAddress;
 463   1         myTxRxData[2]=x;
 464   1      /* myTxRxData[3]=0x00;
 465   1         myTxRxData[4]=0x00;
 466   1         myTxRxData[5]=0x00;
 467   1         myTxRxData[6]=0x00;
 468   1      */
 469   1         for(i=0;i<3;i++)
 470   1         {
 471   2            for(n=0;n<8;n++)
 472   2            {
 473   3               if((myTxRxData[i]&0x80) == 0x80)//为1
 474   3               {
 475   4                  MagentControl_2 = 0;
 476   4                  Custom_Delay(36, y);
 477   4               }
 478   3               else//为0的情况
 479   3               {
 480   4                  MagentControl_2 = 0;
 481   4                  Custom_Delay(23, y);
 482   4               }
 483   3               MagentControl_2 = 1;    //常态为高电平
 484   3               myTxRxData[i] <<= 1;
 485   3               Custom_Delay(15, y);
 486   3            }
 487   2         }
 488   1      }
C51 COMPILER V9.54   COMMUNICATION                                                         07/02/2015 11:58:40 PAGE 9   

 489          
 490          /*--------------------------------------------------
 491             send_code_to_lock_Taili()
 492             
 493             将密码发送给锁体。
 494          ---------------------------------------------------*/
 495          void send_code_to_lock_Taili(tByte x, y)  
 496          {
 497   1         unsigned char i,n;
 498   1         myTxRxData[0]=CmdHead;
 499   1         myTxRxData[1]=MyAddress;
 500   1         myTxRxData[2]=x;
 501   1      /* myTxRxData[3]=0x00;
 502   1         myTxRxData[4]=0x00;
 503   1         myTxRxData[5]=0x00;
 504   1         myTxRxData[6]=0x00;
 505   1      */
 506   1         for(i=0;i<3;i++)
 507   1         {
 508   2            for(n=0;n<8;n++)
 509   2            {
 510   3               if((myTxRxData[i]&0x80) == 0x80)//为1
 511   3               {
 512   4                  lock_code = 0;
 513   4                  Custom_Delay(36, y);
 514   4               }
 515   3               else//为0的情况
 516   3               {
 517   4                  lock_code = 0;
 518   4                  Custom_Delay(23, y);
 519   4               }
 520   3               lock_code = 1;    //常态为高电平
 521   3               myTxRxData[i] <<= 1;
 522   3               Custom_Delay(15, y);
 523   3            }
 524   2         }
 525   1      }
 526          
 527          /*---------------------------------------------------
 528             end of file
 529          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1089    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      7      27
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
