C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:04:20 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Li
                    -brary) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          
  32          // ------ Private variable definitions -----------------------------
  33          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  34          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  35          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  36          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  37          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  38          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  39          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  40          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  41          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  42          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  43          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  44          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  45          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  46          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  47          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  48          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  49          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  50          
  51          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  52          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:04:20 PAGE 2   

  53          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  54          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  55          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  56          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  57          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  58          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  59          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  60          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  61          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  62          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  63          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  64          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  65          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  66          tByte key_rotated_on_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  67          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  68          tWord load_battery_result = 0;
  69          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  70          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  71          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  72          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  73          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  74          bit vibration_flag = 0;
  75          tWord vibration_count = 0;
  76          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  77          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ýºóÖÃ1£¬
  78          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  79          tByte enable_sensor_delay_count = 0;      // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  80          bit sensor_3rdalarm_flag = 0;
  81          bit wheeled_flag = 0;
  82          tWord wheeled_count = 0;
  83          bit IDkey_speech_flash = 0;
  84          
  85          code tByte IDkey6 _at_ 0x003000;
  86          code tByte IDkey7 _at_ 0x003001;
  87          code tByte IDkey8 _at_ 0x003002;
  88          code tByte IDkey9 _at_ 0x003003;
  89          code tByte IDkey10 _at_ 0x003004;
  90          code tByte IDkey11 _at_ 0x003005;
  91          
  92          tWord IDkey_selflearn_HVcount = 0;
  93          tWord IDkey_selflearn_LVcount = 0;
  94          bit IDkey_selflearn_flag1 = 0;
  95          bit IDkey_selflearn_flag2 = 0;
  96          bit IDkey_selflearn_flag3 = 0;
  97          bit IDkey_selflearn_flag4 = 0;
  98          bit IDkey_selflearn_flag5 = 0;
  99          bit IDkey_selflearn_flag6 = 0;
 100          tByte IDkey_selflearn_flag6count = 0;
 101          bit IDkey_flash_EN = 0;
 102          
 103          tByte IDkey_certificated_times = 0;
 104          bit Silence_Flag = 0;
 105          bit flashing_flag = 0;
 106          
 107          tByte Check_Motobattery_count = 0;
 108          bit Check_Motobattery_flag = 0;
 109          bit CheckADC_flag = 0;
 110          
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:04:20 PAGE 3   

 111          bit never_alarm = 0;
 112          bit never_alarm_speech = 0;
 113          
 114          bit slave_nearby_actioned_flag = 0;
 115          tByte slave_nearby_count = 0;
 116          
 117          bit ID_speeched_flag = 0;
 118          
 119          /*------- Private variable declarations --------------------------*/
 120          
 121          void main()
 122             {  
 123   1         InitVoice();
 124   1         
 125   1         #ifdef ID
 126   1         InitUART9600();
 127   1         #endif
 128   1         
 129   1         #ifdef WX
                 InitUART600();
                 #endif
 132   1         
 133   1         InitSensor();
 134   1         
 135   1         InitTransceiver();
 136   1         
 137   1         // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 138   1         InitElecmotor();  
 139   1         
 140   1         Externalmotor = Close;
 141   1      
 142   1         while(1)
 143   1            {
 144   2            Host_stolen_action();
 145   2            }
 146   1         }
 147          
 148          /*------------------------------------------------------------------
 149             timerT0()
 150             operation every ticket.
 151          --------------------------------------------------------------------*/
 152          
 153          void timer0() interrupt interrupt_timer_0_overflow
 154             {
 155   1         // manually reload timer0 configuration
 156   1         TH0 = timer0_8H;
 157   1         TL0 = timer0_8L;
 158   1      
 159   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 160   1         if(++timer0_count >= 1000)
 161   1            {
 162   2            // reset timer0 ticket counter every 2s
 163   2            timer0_count=0;
 164   2            
 165   2            ElecMotor_CW();
 166   2            Delay_500ms();
 167   2            Delay_500ms();
 168   2            ElecMotor_ACW();
 169   2            }  
 170   1         }
 171          
 172          /*-----------------------------------------------
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:04:20 PAGE 4   

 173             UART interrupt
 174          -----------------------------------------------*/
 175          void uart_isr() interrupt 4 
 176             {
 177   1         if(RI)
 178   1            {
 179   2            RI=0;
 180   2            received_data_buffer[data_count] = SBUF;
 181   2      
 182   2            // assign one byte to buffer[i] 
 183   2            
 184   2            if(IDkey_selflearn_flag6 == 0)
 185   2               {
 186   3               // judge whether buffer[0] is CmdHead
 187   3               if((data_count == 0) && (received_data_buffer[0] == 0x01))
 188   3                  {
 189   4                  data_count = 1;
 190   4                  }
 191   3               else if((data_count == 1) && (received_data_buffer[1] == 0x00))
 192   3                  {
 193   4                  data_count = 2;
 194   4                  }
 195   3               else if((data_count == 2) && (received_data_buffer[2] == 0x1a))
 196   3                  {
 197   4                  data_count = 3;
 198   4                  }
 199   3               else if((data_count == 3) && (received_data_buffer[3] == 0x9b))
 200   3                  {
 201   4                  data_count = 4;
 202   4                  }
 203   3               else if((data_count == 4) && (received_data_buffer[4] == 0x15))
 204   3                  {
 205   4                  data_count = 5;
 206   4                  }
 207   3               #ifdef ID
 208   3               else if((data_count == 5) && (received_data_buffer[5] == 0x95))
 209   3                  {
 210   4                  data_count = 0;   
 211   4                  IDkey_flag = 1;
 212   4                  IDkey_count = 0;
 213   4                  disable_sensor();
 214   4                  IDkey_speech_flash = 1;
 215   4                  
 216   4                  if(IDkey_certificated_times++ >= 1)
 217   4                     {
 218   5                     Silence_Flag = 1;
 219   5                     }
 220   4                  if(++IDkey_certificated_times >= 11)
 221   4                     {
 222   5                     never_alarm = 1;
 223   5                     never_alarm_speech = 1;
 224   5                     Silence_Flag = 0;
 225   5                     IDkey_certificated_times = 0;
 226   5                     }
 227   4                  }
 228   3               #endif
 229   3               #ifdef WX
                       else if(data_count == 5)
                          {
                          receive_data_finished_flag = 1;
                          data_count = 0;
                          }        
C51 COMPILER V9.54   MAIN                                                                  06/04/2015 16:04:20 PAGE 5   

                       #endif
 236   3               else 
 237   3                  {
 238   4                  data_count = 0;
 239   4                  }  
 240   3      
 241   3               #ifdef WX
                       if(receive_data_finished_flag == 1)
                          {
                          receive_data_finished_flag  = 0;
                          switch(received_data_buffer[5])
                             {
                             case ComMode_1:
                                {
                                IDkey_flag = 1;
                                IDkey_count = 0;
                                disable_sensor();
                                IDkey_speech_flash = 1;
                                slave_nearby_count = 0;
                                }
                             }
                          }
                       #endif
 258   3               }
 259   2            else
 260   2               {        
 261   3               #ifdef ID
 262   3               if(++data_count >= 6)
 263   3                  {
 264   4                  data_count = 0;
 265   4                  IDkey_flash_EN = 1;
 266   4                  }
 267   3               #endif
 268   3               }
 269   2            }
 270   1         }
 271          
 272          
 273          /*---------------------------------------------------
 274             end of file
 275          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    380    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     56    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     33    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
