C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE COMMUNICATION
OBJECT MODULE PLACED IN .\communication.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\communication.c COMPACT OPTIMIZE(8,SPEED)
                    - BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\communication.lst) TABS(3) OBJECT(.\communication.obj)

line level    source

   1          /*---------------------------------------------------
   2             communication.c (v1.00)
   3             
   4             通信程序
   5          ---------------------------------------------------*/ 
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "communication.h"
  11          #include "Delay.h"
  12          #include "uart.h"
  13          
  14          /*------ private variable --------------------------*/
  15          tByte myTxRxData[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  16          //tByte IDkey11 = IDkey6^IDkey7^IDkey8^IDkey9^IDkey10;
  17          
  18          /*------- Public variable declarations --------------------------*/
  19          extern tByte receive_LV_count;      
  20          extern bit receive_wire_flag;    
  21          extern tByte one_receive_byte;      
  22          extern tByte one_receive_byte_count;         
  23          extern tByte receive_HV_count;      
  24          extern tByte data_count;            
  25          extern tByte received_data_buffer[7];     
  26          extern bit receive_data_finished_flag;    
  27          
  28          extern code tByte IDkey6;
  29          extern code tByte IDkey7;
  30          extern code tByte IDkey8;
  31          extern code tByte IDkey9;
  32          extern code tByte IDkey10;
  33          
  34          /*----------------------------------------------------
  35             InitTransceiver()
  36             Initialise Transceiver
  37          ----------------------------------------------------*/
  38          void InitTransceiver(void)
  39             {
  40   1         P10 = High;
  41   1         transmiter_EN = Close;
  42   1         receiver_EN = Open;  
  43   1         transmiter_power = 0;      // High power mode
  44   1         }
  45             
  46          /*----------------------------------------------------
  47             initsignal()
  48             
  49             初始化信号程序，接收机在接接收信号的时候，需要有
  50             一段代码来使接收机打开，而这一段程序有可能无法识别
  51             出来，而是相当于废代码，只占用通信时间。
  52          ----------------------------------------------------*/
  53          void initsignal()
  54             {
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 2   

  55   1         tByte k,k1;
  56   1         tByte mystartbuffer = 0xaa;
  57   1         for(k1 = 0; k1 < 3; k1++)
  58   1            {
  59   2            for(k=0;k<8;k++)
  60   2               {
  61   3               if((mystartbuffer&0x80) == 0x80)//为1
  62   3                  {
  63   4                  P10=0;
  64   4                  Custom_Delay(46, 20);
  65   4      //          Delay_5ms();
  66   4                  }
  67   3               else
  68   3                  {
  69   4                  P10=0;
  70   4                  Custom_Delay(46, 20);
  71   4      //          Delay_5ms();
  72   4                  }
  73   3               P10=1;
  74   3               mystartbuffer<<=1;
  75   3               Custom_Delay(40, 24);
  76   3      //       Delay_5ms();
  77   3               }
  78   2            mystartbuffer=0xaa;
  79   2      //    Delay_5ms();
  80   2      //    Custom_Delay(23, 28);
  81   2            }
  82   1         P10=1;
  83   1         }
  84          
  85          void initsignal_F(void)
  86             {
  87   1         tByte k,k1;
  88   1         tByte mystartbuffer = 0xaa;
  89   1         for(k1 = 0; k1 < 1; k1++)
  90   1            {
  91   2            #ifdef Z2
                    for(k=0;k<4;k++)
                    #endif
  94   2            #ifdef Z3
  95   2            for(k=0;k<7;k++)
  96   2            #endif      
  97   2               {
  98   3               if((mystartbuffer&0x80) == 0x80)//为1
  99   3                  {
 100   4                  P10=0;
 101   4                  Custom_Delay(46, 20);
 102   4      //          Delay_5ms();
 103   4                  }
 104   3               else
 105   3                  {
 106   4                  P10=0;
 107   4                  Custom_Delay(46, 20);
 108   4      //          Delay_5ms();
 109   4                  }
 110   3               P10=1;
 111   3               mystartbuffer<<=1;
 112   3               Custom_Delay(40, 24);
 113   3      //       Delay_5ms();
 114   3               }
 115   2            mystartbuffer=0xaa;
 116   2      //    Delay_5ms();
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 3   

 117   2      //    Custom_Delay(23, 28);
 118   2            }
 119   1         P10=1;
 120   1         }
 121          
 122          /*--------------------------------------------------
 123             Send_Data()
 124             将数据发送出去
 125          --------------------------------------------------*/
 126          void Send_Data(tByte x)
 127             {
 128   1         tByte i,n;
 129   1         for(i=0;i<3;i++)
 130   1            {
 131   2            for(n=0;n<8;n++)
 132   2               {
 133   3               if((myTxRxData[i]&0x80)==0x80)
 134   3                  {
 135   4                  P10=0;
 136   4                  Custom_Delay(36, x);
 137   4                  }
 138   3               else
 139   3                  {
 140   4                  P10=0;
 141   4                  Custom_Delay(23, x);
 142   4                  }
 143   3               P10=1;
 144   3               myTxRxData[i]<<=1;
 145   3               Custom_Delay(20, x);
 146   3               }
 147   2            }  
 148   1         }
 149          
 150          /*--------------------------------------------------
 151             ComMode_Data()
 152             
 153             主机接收到编码1信号后，会反馈一个编码1信号给附机
 154             以表示主机在附机附近。
 155          ---------------------------------------------------*/
 156          void ComMode_Data(tByte ComMode, x) 
 157             {
 158   1         receiver_EN = 1;
 159   1         Delay(20);
 160   1         transmiter_EN = 0;
 161   1         myTxRxData[0] = CmdHead;
 162   1         myTxRxData[1] = MyAddress;
 163   1         myTxRxData[2] = ComMode;
 164   1      
 165   1         initsignal();
 166   1         Send_Data(x);
 167   1         
 168   1         transmiter_EN = 1;
 169   1         receiver_EN = 1;
 170   1         }
 171          
 172          /*--------------------------------------------------
 173             ComMode_Data_WX()
 174             
 175             主机接收到编码1信号后，会反馈一个编码1信号给附机
 176             以表示主机在附机附近。
 177          ---------------------------------------------------*/
 178          void ComMode_Data_WX(tByte ComMode, x) 
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 4   

 179             {
 180   1         receiver_EN = 1;
 181   1         Delay(20);
 182   1         transmiter_EN = 0;
 183   1         myTxRxData[0] = CmdHead;
 184   1         myTxRxData[1] = MyAddress;
 185   1         myTxRxData[2] = ComMode;
 186   1      
 187   1         initsignal();
 188   1         Send_Data(x);
 189   1         
 190   1         transmiter_EN = 0;
 191   1         receiver_EN = 0;
 192   1         TXD = 0;
 193   1         }
 194          
 195          /*------------------------------------------------------------------
 196             UART发送数据
 197          ------------------------------------------------------------------*/
 198          void UART_Send_Data(tByte command)
 199             {
 200   1         tByte ii = 0;
 201   1         open_tranceiver();
 202   1         myTxRxData[0] = IDkey6;
 203   1         myTxRxData[1] = IDkey7;
 204   1         myTxRxData[2] = IDkey8;
 205   1         myTxRxData[3] = IDkey9;
 206   1         myTxRxData[4] = IDkey10;
 207   1         myTxRxData[5] = command;
 208   1         
 209   1         initsignal();
 210   1         
 211   1         for(ii = 0; ii < 30; ii++)
 212   1            {
 213   2            SendNByte(myTxRxData, 6);
 214   2            Delay_10ms();     
 215   2            }
 216   1      
 217   1         close_tranceiver();
 218   1         }
 219          
 220          /*------------------------------------------------------------------
 221             UART附机发送数据
 222          ------------------------------------------------------------------*/
 223          void UART_Send_Data_F(tByte command)
 224             {
 225   1         tByte ii = 0;
 226   1         open_tranceiver();
 227   1         myTxRxData[0] = IDkey6;
 228   1         myTxRxData[1] = IDkey7;
 229   1         myTxRxData[2] = IDkey8;
 230   1         myTxRxData[3] = IDkey9;
 231   1         myTxRxData[4] = IDkey10;
 232   1         myTxRxData[5] = command;
 233   1         
 234   1         initsignal_F();
 235   1         SendNByte(myTxRxData, 6);
 236   1      
 237   1         close_tranceiver();  
 238   1         }
 239          
 240          /*------------------------------------------------------------------
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 5   

 241             open_tranceiver()
 242             开发射机
 243          -------------------------------------------------------------------*/
 244          void open_tranceiver(void)
 245             {
 246   1         #ifdef ID
                 InitUART(BAUD1200);
                 #endif
 249   1         
 250   1         receiver_EN = 1;
 251   1         transmiter_EN = 0;   
 252   1         }
 253          
 254          /*------------------------------------------------------------------
 255             close_tranceiver()
 256             开发射机
 257          -------------------------------------------------------------------*/
 258          void close_tranceiver(void)
 259             {
 260   1         #ifdef F3
 261   1         transmiter_EN = 1;
 262   1         #endif
 263   1         
 264   1         receiver_EN = 0;
 265   1         
 266   1         #ifdef ID
                 InitUART(BAUD9600);
                 #endif
 269   1         }
 270          
 271          /*------------------------------------------------------------------
 272             UART发送数据
 273          ------------------------------------------------------------------*/
 274          void UART_Send_Data_match(void)
 275             {
 276   1         open_tranceiver();
 277   1         
 278   1         myTxRxData[0] = CmdHead;
 279   1         myTxRxData[1] = ComMode_1;
 280   1         myTxRxData[2] = IDkey6;
 281   1         myTxRxData[3] = IDkey7;
 282   1         myTxRxData[4] = IDkey8;
 283   1         myTxRxData[5] = IDkey9;
 284   1         myTxRxData[6] = IDkey10;
 285   1         
 286   1         initsignal();
 287   1         
 288   1         SendNByte(myTxRxData, 7);
 289   1         Delay_50ms();
 290   1         
 291   1         close_tranceiver();
 292   1         }
 293          
 294          /*-----------------------------------------------------------------------------
 295             receive_byte()
 296             receive a byte program
 297          -----------------------------------------------------------------------------*/
 298          void receive_byte(void)
 299             {
 300   1         // P11 constantly HV, if detected a LV, judge it.
 301   1         if(P11 == 0)
 302   1            {
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 6   

 303   2            // count the LV time, if more than 12ms, reset it.
 304   2            if(++receive_LV_count >= 120)
 305   2               {
 306   3               receive_LV_count = 0;
 307   3               }
 308   2            receive_wire_flag = 0;
 309   2            }
 310   1         // if P11 return to HV
 311   1         else
 312   1            {
 313   2            // and already have LV before, so we think it maybe a bit signal
 314   2            if(receive_wire_flag == 0)
 315   2               {
 316   3               // set the flag, to judge a bit only one time
 317   3               receive_wire_flag = 1;
 318   3      
 319   3               // judge the LV time, if 3.5ms < time < 8ms, we think it is a "0". time<3.5ms means a noise.
 320   3               if((receive_LV_count > 35)&&(receive_LV_count <= 80)) 
 321   3                  {
 322   4                  // save "0" to one byte
 323   4                  one_receive_byte <<= 1;
 324   4                  one_receive_byte &= 0xfe;
 325   4                  one_receive_byte_count++;
 326   4                  receive_HV_count = 0;
 327   4                  }
 328   3               // time > 8ms, means a "1"
 329   3               else if((receive_LV_count > 80))
 330   3                  {
 331   4                  // save "1" to one byte
 332   4                  one_receive_byte <<= 1;
 333   4                  one_receive_byte |= 0x01;
 334   4                  one_receive_byte_count++;
 335   4                  receive_HV_count = 0;
 336   4                  }        
 337   3               else
 338   3                  {
 339   4                  // increase the count for HV
 340   4                  receive_HV_count++;  
 341   4                  }
 342   3               // reset LV count
 343   3               receive_LV_count = 0;
 344   3               }
 345   2            else
 346   2               {
 347   3               // judge whether HV count > 6ms, if yes, means a restart
 348   3               if(++receive_HV_count >= 60)
 349   3                  {
 350   4                  one_receive_byte_count = 0;
 351   4                  receive_wire_flag = 1;
 352   4                  data_count = 0;
 353   4                  }     
 354   3               }
 355   2            }
 356   1         }
 357          
 358          /*-----------------------------------------------------------------------------
 359             receive_byte_Lock()
 360             receive a byte program
 361          -----------------------------------------------------------------------------*/
 362          void receive_byte_Lock(void)
 363             {
 364   1         // P11 constantly HV, if detected a LV, judge it.
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 7   

 365   1         if(receive_wire == 1)
 366   1            {
 367   2            // count the LV time, if more than 12ms, reset it.
 368   2            if(++receive_LV_count >= 120)
 369   2               {
 370   3               receive_LV_count = 0;
 371   3               }
 372   2            receive_wire_flag = 0;
 373   2            }
 374   1         // if P11 return to HV
 375   1         else
 376   1            {
 377   2            // and already have LV before, so we think it maybe a bit signal
 378   2            if(receive_wire_flag == 0)
 379   2               {
 380   3               // set the flag, to judge a bit only one time
 381   3               receive_wire_flag = 1;
 382   3      
 383   3               // judge the LV time, if 3.5ms < time < 8ms, we think it is a "0". time<3.5ms means a noise.
 384   3               if((receive_LV_count > 35)&&(receive_LV_count <= 80)) 
 385   3                  {
 386   4                  // save "0" to one byte
 387   4                  one_receive_byte <<= 1;
 388   4                  one_receive_byte &= 0xfe;
 389   4                  one_receive_byte_count++;
 390   4                  receive_HV_count = 0;
 391   4                  }
 392   3               // time > 8ms, means a "1"
 393   3               else if((receive_LV_count > 80))
 394   3                  {
 395   4                  // save "1" to one byte
 396   4                  one_receive_byte <<= 1;
 397   4                  one_receive_byte |= 0x01;
 398   4                  one_receive_byte_count++;
 399   4                  receive_HV_count = 0;
 400   4                  }        
 401   3               else
 402   3                  {
 403   4                  // increase the count for HV
 404   4                  receive_HV_count++;  
 405   4                  }
 406   3               // reset LV count
 407   3               receive_LV_count = 0;
 408   3               }
 409   2            else
 410   2               {
 411   3               // judge whether HV count > 6ms, if yes, means a restart
 412   3               if(++receive_HV_count >= 60)
 413   3                  {
 414   4                  one_receive_byte_count = 0;
 415   4                  receive_wire_flag = 1;
 416   4                  data_count = 0;
 417   4                  }     
 418   3               }
 419   2            }
 420   1         }
 421          
 422          /*-----------------------------------------------------------------------------
 423             receive_word()
 424             receive a word program
 425          -----------------------------------------------------------------------------*/
 426          void receive_word(void)
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 8   

 427             {
 428   1         // one byte have 8 bit, once receive a bit, the count increase, once it is 8, it means a byte received.
 429   1         if(one_receive_byte_count == 8)
 430   1            {
 431   2            one_receive_byte_count = 0;
 432   2            // assign one byte to buffer[i] 
 433   2            received_data_buffer[data_count] = one_receive_byte;
 434   2            
 435   2            // judge whether buffer[0] is CmdHead
 436   2            if((data_count == 0) && (received_data_buffer[0] == CmdHead))
 437   2               {
 438   3               data_count = 1;
 439   3               }
 440   2            // judge whether buffer[1] is MyAddress
 441   2            else if((data_count == 1) && (received_data_buffer[1] == MyAddress))
 442   2               {
 443   3               data_count = 2;
 444   3               }
 445   2            else if(data_count == 2)
 446   2               {
 447   3               receive_data_finished_flag = 1;
 448   3               data_count = 0;
 449   3               }
 450   2            else 
 451   2               {
 452   3               data_count = 0;
 453   3               }
 454   2            }
 455   1         }
 456          
 457          /*--------------------------------------------------
 458             send_code_to_lock()
 459             
 460             将密码发送给锁体。
 461          ---------------------------------------------------*/
 462          void send_code_to_lock(tByte x, y)  
 463          {
 464   1         unsigned char i,n;
 465   1         myTxRxData[0]=CmdHead;
 466   1         myTxRxData[1]=MyAddress;
 467   1         myTxRxData[2]=x;
 468   1      /* myTxRxData[3]=0x00;
 469   1         myTxRxData[4]=0x00;
 470   1         myTxRxData[5]=0x00;
 471   1         myTxRxData[6]=0x00;
 472   1      */
 473   1         for(i=0;i<3;i++)
 474   1         {
 475   2            for(n=0;n<8;n++)
 476   2            {
 477   3               if((myTxRxData[i]&0x80) == 0x80)//为1
 478   3               {
 479   4                  MagentControl_2 = 0;
 480   4                  Custom_Delay(36, y);
 481   4               }
 482   3               else//为0的情况
 483   3               {
 484   4                  MagentControl_2 = 0;
 485   4                  Custom_Delay(23, y);
 486   4               }
 487   3               MagentControl_2 = 1;    //常态为高电平
 488   3               myTxRxData[i] <<= 1;
C51 COMPILER V9.54   COMMUNICATION                                                         07/27/2015 10:11:46 PAGE 9   

 489   3               Custom_Delay(15, y);
 490   3            }
 491   2         }
 492   1      }
 493          
 494          /*--------------------------------------------------
 495             send_code_to_lock_Taili()
 496             
 497             将密码发送给锁体。
 498          ---------------------------------------------------*/
 499          void send_code_to_lock_Taili(tByte x, y)  
 500          {
 501   1         unsigned char i,n;
 502   1         myTxRxData[0]=CmdHead;
 503   1         myTxRxData[1]=MyAddress;
 504   1         myTxRxData[2]=x;
 505   1      /* myTxRxData[3]=0x00;
 506   1         myTxRxData[4]=0x00;
 507   1         myTxRxData[5]=0x00;
 508   1         myTxRxData[6]=0x00;
 509   1      */
 510   1         for(i=0;i<3;i++)
 511   1         {
 512   2            for(n=0;n<8;n++)
 513   2            {
 514   3               if((myTxRxData[i]&0x80) == 0x80)//为1
 515   3               {
 516   4                  lock_code = 0;
 517   4                  Custom_Delay(36, y);
 518   4               }
 519   3               else//为0的情况
 520   3               {
 521   4                  lock_code = 0;
 522   4                  Custom_Delay(23, y);
 523   4               }
 524   3               lock_code = 1;    //常态为高电平
 525   3               myTxRxData[i] <<= 1;
 526   3               Custom_Delay(15, y);
 527   3            }
 528   2         }
 529   1      }
 530          
 531          /*---------------------------------------------------
 532             end of file
 533          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1091    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      7      27
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
