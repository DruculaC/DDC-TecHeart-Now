C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT ROM(COMPACT) OPTIMIZE
                    -(8,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          #include "ISP_DataFlash.h"
  18          
  19          /*------ private variable --------------------------*/
  20          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  21          
  22          bit sensor_EN = 0;
  23          
  24          tWord key_rotate_off_time = 0;
  25          tWord wire_broken_time = 0;
  26          tByte wire_broken_level = 0;
  27          
  28          /*------- Public variable declarations --------------------------*/
  29          extern bit position_sensor_EN;   
  30          extern bit fell_flag;                  
  31          extern bit raised_flag;          
  32          extern tByte sensor_trigger_count;  
  33          extern tByte sensor_1ststage_count; 
  34          extern bit raised_fell_once_flag;         
  35          extern bit raised_fell_flag;              
  36          extern bit EN_host_stolen_alarming;     
  37          extern bit host_stolen_alarm2_EN;      
  38          extern tByte host_stolen_alarm1_count;    
  39          extern tByte host_stolen_alarm2_count;    
  40          extern bit Host_stolen_alarming;             
  41          extern tWord sensor_3rdstage_time;        
  42          extern tByte sensor_3rdstage_effcount;    
  43          extern tByte sensor_3rdstage_count;       
  44          extern tWord sensor_3rdstage_interval;    
  45          extern tWord sensor_2ndstage_time;     
  46          extern tByte sensor_2ndstage_count;    
  47          extern tWord ADC_check_result;      
  48          extern tByte wire_broken_count;     
  49          extern bit wire_broken_flag;        
  50          extern bit battery_stolen_EN;       
  51          extern tByte battery_stolen_count;
  52          extern bit sensor_3rdalarm_flag;
  53          extern tByte enable_sensor_delay_count;      
  54          extern bit Silence_Flag;
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 2   

  55          extern tByte Open_action_flag;      
  56          extern tByte ID_certificated_numbers;
  57          extern bit ID_certificated_flag;       
  58          extern tByte After_IDcert_timecount;      
  59          extern bit never_alarm;
  60          extern bit IDkey_selflearn_flag1;
  61          extern bit IDkey_selflearn_flag2;
  62          extern bit IDkey_selflearn_flag3;
  63          extern bit IDkey_selflearn_flag4;
  64          extern bit IDkey_selflearn_flag5;
  65          extern bit ID_selflearning_flag;
  66          extern tByte ID_selflearning_timecount;
  67          extern tWord IDkey_selflearn_HVcount;
  68          extern tWord IDkey_selflearn_LVcount;
  69          extern tByte fell_alarm_count;
  70          extern tByte raised_alarm_count;
  71          extern tByte Check_Motobattery_count;
  72          extern bit Check_Motobattery_flag;
  73          extern tWord load_battery_result;
  74          extern bit ID_speeched_flag;
  75          extern bit slave_nearby_actioned_flag;
  76          extern bit IDkey_speech_flash;
  77          extern bit wire_broken_reset;
  78          extern tByte Stolen_alarm_reset_count;
  79          extern bit vibration_flag;
  80          extern tByte slave_nearby_count;
  81          extern bit wheeled_flag;
  82          extern bit IDkey_flash_EN;
  83          extern bit flashing_flag;
  84          extern tWord vibration_count;
  85          extern tWord wheeled_count;
  86          extern bit Just_power_up;
  87          
  88          /*-----------------------------------------
  89             slave_away_operation()
  90             
  91             operation for slave is away
  92          ------------------------------------------*/
  93          void slave_away_operation(void)
  94             {  
  95   1         if(Silence_Flag == 0)
  96   1            {
  97   2            close_lock_speech(); 
  98   2            load_battery_result = ADC_check_result;
  99   2            verifybattery(load_battery_result);
 100   2      
 101   2      //    Check_Motobattery_flag = 1;
 102   2      //    Check_Motobattery_count = 0;
 103   2            }
 104   1         // Enable_sensor();  
 105   1         enable_sensor_delayEN = 1;
 106   1         enable_sensor_delay_count = 0;
 107   1         // delay time, avoid sensor trigger on.
 108   1         Delay(20);
 109   1         ID_certificated_numbers = 0;
 110   1      
 111   1         if(Silence_Flag == 1)
 112   1            Silence_Flag = 0;
 113   1         }
 114          
 115          /*----------------------------------------------------------------------
 116                slave_nearby_operation()
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 3   

 117                operation for slave is nearby
 118          ----------------------------------------------------------------------*/
 119          void slave_nearby_operation(void)
 120             {
 121   1         slave_nearby_actioned_flag = 1;
 122   1         
 123   1         ID_speeched_flag = 0;      
 124   1         After_IDcert_timecount = 0;
 125   1         ID_certificated_flag = 0;
 126   1         ID_certificated_numbers = 0;     
 127   1      
 128   1         if(Silence_Flag == 0)
 129   1            {
 130   2            open_lock_speech();
 131   2            if(Just_power_up == 0)
 132   2               verifybattery(load_battery_result);
 133   2            key_rotate_on_speech();
 134   2            }
 135   1         }
 136          
 137          /*------------------------------------------------------------------
 138             InitSensor()
 139             Initialise Sensor.
 140          ------------------------------------------------------------------*/
 141          void InitSensor(void)
 142             {
 143   1         sensor_EN = 0;
 144   1         position_sensor_EN = 0;
 145   1         enable_sensor_delayEN = 0; 
 146   1         raised_sensor_detect = 1;
 147   1         fell_sensor_detect = 1; 
 148   1         }
 149             
 150          /*------------------------------------------------------------------
 151             Host_stolen_action()
 152             Determine host has been triggled 3 times, alarm action.
 153          ------------------------------------------------------------------*/
 154          void Host_stolen_action(void)
 155             {
 156   1         // if host has been touched 3 times, alarm 2 speeches alternantively.
 157   1         if(EN_host_stolen_alarming == 1)
 158   1            {
 159   2            Host_stolen_alarming = 1;
 160   2            
 161   2            stolen_alarm_speech1();
 162   2            #ifdef Z3
                    if(wire_broken_flag == 0)
                       {
                       UART_Send_Data(ComMode_3);                                                       
                       }
                    else
                       {                                                                     
                       UART_Send_Data(ComMode_6);                                                       
                       }
                    #endif
 172   2            stolen_alarm_speech2();
 173   2            }
 174   1         }
 175          
 176          /*------------------------------------------------------------------
 177             ENsensor_afterIDcert()
 178             6s After ID certificated, enable sensor. 
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 4   

 179             If ID certficated 6 times, don't enable sensor.
 180          ------------------------------------------------------------------*/
 181          void ENsensor_afterIDcert(void)
 182             {
 183   1         if(ID_certificated_flag == 1)
 184   1            {
 185   2            // 3 tickets after ID certificated.
 186   2            if(++After_IDcert_timecount >= 5)
 187   2               {
 188   3               ID_certificated_flag = 0;
 189   3               After_IDcert_timecount = 0;         
 190   3               ID_certificated_numbers = 0;
 191   3               
 192   3               // 
 193   3               if((Open_action_flag == 0)&&(never_alarm == 0))
 194   3                  {
 195   4                  Enable_sensor();              
 196   4                  }           
 197   3               never_alarm = 0;
 198   3               
 199   3               }        
 200   2            }
 201   1         }
 202          
 203          /*------------------------------------------------------------------
 204             ENsensor_After_Close()
 205          ------------------------------------------------------------------*/
 206          void ENsensor_After_Close(void)
 207             {
 208   1         if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 209   1            {
 210   2            if(++enable_sensor_delay_count >= 3)
 211   2               {
 212   3               enable_sensor_delay_count = 0;
 213   3               enable_sensor_delayEN = 0;
 214   3               if(never_alarm == 0)
 215   3                  Enable_sensor();
 216   3               }
 217   2            }  
 218   1         }
 219          
 220          /*-----------------------------------------------------------------
 221             SelfLearn_Reset()
 222             PIN22 triggles 3 times, the system enters selflearn mode
 223          ------------------------------------------------------------------*/
 224          void SelfLearn_Reset(void)
 225             {  
 226   1         if(ID_selflearning_flag == 1)
 227   1            {
 228   2            if(++ID_selflearning_timecount > 10)
 229   2               {
 230   3               ID_selflearning_flag = 0;
 231   3               ID_selflearning_timecount = 0;            
 232   3               // Reset relatively flag and count.
 233   3               IDkey_selflearn_HVcount = 0;
 234   3               IDkey_selflearn_LVcount = 0;
 235   3               IDkey_selflearn_flag1 = 0;
 236   3               IDkey_selflearn_flag2 = 0;
 237   3               IDkey_selflearn_flag3 = 0;
 238   3               IDkey_selflearn_flag4 = 0;
 239   3               IDkey_selflearn_flag5 = 0;
 240   3               }        
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 5   

 241   2            }
 242   1         }
 243          
 244          /*---------------------------------------------------
 245             Fell_Alarm_to_Slave()
 246             Send fell alarm signal to remote slave.
 247          ----------------------------------------------------*/
 248          void Fell_Alarm_to_Slave(void)
 249             {
 250   1         if((fell_flag==1)&&(fell_alarm_count<5))
 251   1            {
 252   2            UART_Send_Data(ComMode_5);                                                       
 253   2            fell_alarm_count++;
 254   2            }  
 255   1         }
 256          
 257          /*----------------------------------------------------
 258             Raise_Alarm_to_Slave()
 259             Send raised alarm signal to remote slave
 260          -----------------------------------------------------*/
 261          void Raise_Alarm_to_Slave(void)
 262             {
 263   1         if((raised_flag==1)&&(raised_alarm_count<5))    
 264   1            {
 265   2            UART_Send_Data(ComMode_4);                                                       
 266   2            raised_alarm_count++;
 267   2            }        
 268   1         }
 269          
 270          /*----------------------------------------------------
 271             Batstolen_Alarm_to_Slave()
 272             Send battery stolen alarm signal to remote slave
 273          -----------------------------------------------------*/
 274          void Batstolen_Alarm_to_Slave(void)
 275             {
 276   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 5))
 277   1            {
 278   2            UART_Send_Data(ComMode_2);                                                       
 279   2            battery_stolen_count++;
 280   2            }  
 281   1         }
 282          
 283          /*----------------------------------------------------
 284             Disable_sensor_after_IDcert()
 285          -----------------------------------------------------*/
 286          void Disable_sensor_after_IDcert(void)
 287             {
 288   1         if(IDkey_speech_flash == 1)
 289   1            {
 290   2            IDkey_speech_flash = 0;
 291   2      
 292   2            disable_sensor();
 293   2            }  
 294   1         }
 295          
 296          /*----------------------------------------------------
 297             Reset_after_wirebroken()
 298          -----------------------------------------------------*/
 299          void Reset_after_wirebroken(void)
 300             {
 301   1         if(wire_broken_reset == 1)
 302   1            {
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 6   

 303   2            wire_broken_reset = 0;
 304   2            host_stolen_alarm1_count = 0;
 305   2            EN_host_stolen_alarming = 0;           
 306   2            Host_stolen_alarming = 0;
 307   2            sensor_3rdalarm_flag = 0;
 308   2            }
 309   1         }
 310          
 311          /*----------------------------------------------------
 312             Reset_after_stolen_alarming()
 313             15 tickets after stolen alarm, shut alarm.
 314          -----------------------------------------------------*/
 315          void Reset_after_stolen_alarming(void)
 316             {
 317   1         if(EN_host_stolen_alarming == 1)
 318   1            {
 319   2            if(++Stolen_alarm_reset_count > 3)
 320   2               {
 321   3               host_stolen_alarm1_count = 0;
 322   3               EN_host_stolen_alarming = 0;
 323   3               Host_stolen_alarming = 0;
 324   3               sensor_3rdalarm_flag = 0;
 325   3               Stolen_alarm_reset_count = 0;
 326   3               close_tranceiver();
 327   3               }
 328   2            }
 329   1         }
 330          
 331          /*-----------------------------------------------------
 332             Ensensor_after_slave_away()
 333          ------------------------------------------------------*/
 334          void Ensensor_after_slave_away(void)
 335             {
 336   1         if((vibration_flag == 0)&&(wheeled_flag == 0)&&(Just_power_up == 0))
 337   1            {
 338   2            if(++slave_nearby_count > 5)
 339   2               {
 340   3               slave_nearby_count = 3;
 341   3               slave_nearby_actioned_flag = 0;
 342   3               ID_certificated_flag = 0;
 343   3               if(never_alarm == 0)
 344   3                  Enable_sensor();
 345   3               }
 346   2            }  
 347   1         }
 348          
 349          /*----------------------------------------------------
 350             Detect_selflearn_action()
 351          -----------------------------------------------------*/
 352          void Detect_selflearn_action(void)
 353             {
 354   1         if(key_rotate == 1)
 355   1            {
 356   2            if(wire_broken == 1)
 357   2               {
 358   3               wire_broken_time += 1;
 359   3               if(wire_broken_time >= 6000)
 360   3                  {
 361   4                  wire_broken_time = 6001;
 362   4                  wire_broken_level = 0;
 363   4                  ID_selflearning_flag = 0;
 364   4                  }
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 7   

 365   3               }
 366   2            else
 367   2               {
 368   3               if(wire_broken_time > 50)
 369   3                  {
 370   4                  wire_broken_time = 0;
 371   4                  wire_broken_level += 1;
 372   4                  }
 373   3               }
 374   2            
 375   2            if(wire_broken_level > 6)
 376   2               {
 377   3               wire_broken_level = 0;
 378   3               ID_selflearning_flag = 1;
 379   3               Self_learn_speech();
 380   3               }
 381   2            }
 382   1            
 383   1         if(IDkey_flash_EN == 1)
 384   1            {
 385   2            IDkey_flash_EN = 0;
 386   2            flashing_flag = 1;
 387   2            ID_selflearning_flag = 0;
 388   2            
 389   2            Self_learn_programming();
 390   2            
 391   2            Self_learn_speech();
 392   2            
 393   2            #if (defined Z3) && (defined ID)
                    UART_Send_Data_match();
                    #endif
 396   2            }  
 397   1         }
 398          
 399          /*---------------------------------------------------
 400             Detect_open_action()
 401          ---------------------------------------------------*/
 402          void Detect_open_action(void)
 403             {
 404   1      // if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1)&&(never_alarm == 0))    
 405   1         if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1))      
 406   1            {
 407   2            disable_sensor();
 408   2            Open_action_flag = 1;
 409   2            ID_speeched_flag = 0;
 410   2            
 411   2            After_IDcert_timecount = 0;
 412   2            ID_certificated_flag = 0;
 413   2            ID_certificated_numbers = 0;
 414   2            slave_nearby_actioned_flag = 1;
 415   2            ElecMotor_CW();
 416   2            slave_nearby_operation();
 417   2            
 418   2            Just_power_up = 0;
 419   2            }        
 420   1         }
 421          
 422          /*---------------------------------------------------
 423             Detect_close_action()
 424          ---------------------------------------------------*/
 425          void Detect_close_action(void)
 426             {
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 8   

 427   1         if(((key_rotate == 0)||(slave_nearby_actioned_flag == 0))&&(Open_action_flag == 1))
 428   1            {
 429   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 430   2               {
 431   3               key_rotate_off_time += 1;
 432   3               if(key_rotate_off_time >= 1500)
 433   3                  {
 434   4                  if((key_rotate == 0)||(slave_nearby_actioned_flag == 0))
 435   4                     {
 436   5                     ElecMotor_ACW();
 437   5      
 438   5                     Open_action_flag = 0;
 439   5                     slave_away_operation();
 440   5                     IDkey_speech_flash = 0;
 441   5                     ID_speeched_flag = 0;
 442   5                     }                       
 443   4                  }
 444   3               }
 445   2            }
 446   1         else if(key_rotate == 1)
 447   1            key_rotate_off_time = 0;
 448   1         }
 449          
 450          /*------------------------------------------------------
 451             Detect_vibration()
 452          -------------------------------------------------------*/
 453          void Detect_vibration(void)
 454             {
 455   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 456   1            {
 457   2            vibration_flag = 1;
 458   2            vibration_count = 0;
 459   2            }
 460   1          if(vibration_flag == 1)
 461   1            {
 462   2            if(++vibration_count >= 2000)
 463   2               {
 464   3               vibration_flag = 0;
 465   3               vibration_count = 0;
 466   3               }
 467   2            }  
 468   1         }
 469          
 470          /*----------------------------------------------------
 471             Detect_wheel_moving()
 472          -----------------------------------------------------*/
 473          void Detect_wheel_moving(void)
 474             {
 475   1         if(wheeled_rotate == 1)
 476   1            {
 477   2            wheeled_flag = 1;
 478   2            wheeled_count = 0;
 479   2            }
 480   1         if(wheeled_flag == 1)
 481   1            {
 482   2            if(++wheeled_count >= 2000)
 483   2               {
 484   3               wheeled_flag = 0;
 485   3               wheeled_count = 0;
 486   3               }
 487   2            }  
 488   1         }
C51 COMPILER V9.54   OPERATION                                                             08/01/2015 14:06:59 PAGE 9   

 489          
 490          /*---------------------------------------------------
 491             end of file
 492          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    657    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      5    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
