C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT ROM(COMPACT) OPTIMIZE
                    -(8,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          #include "ISP_DataFlash.h"
  18          
  19          /*------ private variable --------------------------*/
  20          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  21          
  22          bit sensor_EN = 0;
  23          
  24          tWord key_rotate_off_time = 0;
  25          tWord wire_broken_time = 0;
  26          tByte wire_broken_level = 0;
  27          
  28          bit vibration_flag1 = 0;
  29          tWord vibration_count1 = 0;
  30          tWord ADC_check_saved_result = 0;      //作为AD检测值的存储值，即上一次播报的值。
  31          
  32          
  33          tByte vibration_count2 = 0;
  34          /*------- Public variable declarations --------------------------*/
  35          extern bit position_sensor_EN;   
  36          extern bit fell_flag;                  
  37          extern bit raised_flag;          
  38          extern tByte sensor_trigger_count;  
  39          extern tByte sensor_1ststage_count; 
  40          extern bit raised_fell_once_flag;         
  41          extern bit raised_fell_flag;              
  42          extern bit EN_host_stolen_alarming;     
  43          extern bit host_stolen_alarm2_EN;      
  44          extern tByte host_stolen_alarm1_count;    
  45          extern tByte host_stolen_alarm2_count;    
  46          extern bit Host_stolen_alarming;             
  47          extern tWord sensor_3rdstage_time;        
  48          extern tByte sensor_3rdstage_effcount;    
  49          extern tByte sensor_3rdstage_count;       
  50          extern tWord sensor_3rdstage_interval;    
  51          extern tWord sensor_2ndstage_time;     
  52          extern tByte sensor_2ndstage_count;    
  53          extern tWord ADC_check_result;      
  54          extern tByte wire_broken_count;     
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 2   

  55          extern bit wire_broken_flag;        
  56          extern bit battery_stolen_EN;       
  57          extern tByte battery_stolen_count;
  58          extern bit sensor_3rdalarm_flag;
  59          extern tByte enable_sensor_delay_count;      
  60          extern bit Silence_Flag;
  61          extern tByte Open_action_flag;      
  62          extern tByte ID_certificated_numbers;
  63          extern bit ID_certificated_flag;       
  64          extern tByte After_IDcert_timecount;      
  65          extern bit never_alarm;
  66          extern bit IDkey_selflearn_flag1;
  67          extern bit IDkey_selflearn_flag2;
  68          extern bit IDkey_selflearn_flag3;
  69          extern bit IDkey_selflearn_flag4;
  70          extern bit IDkey_selflearn_flag5;
  71          extern bit ID_selflearning_flag;
  72          extern tByte ID_selflearning_timecount;
  73          extern tWord IDkey_selflearn_HVcount;
  74          extern tWord IDkey_selflearn_LVcount;
  75          extern tByte fell_alarm_count;
  76          extern tByte raised_alarm_count;
  77          extern tByte Check_Motobattery_count;
  78          extern bit Check_Motobattery_flag;
  79          extern tWord load_battery_result;
  80          extern bit ID_speeched_flag;
  81          extern bit slave_nearby_actioned_flag;
  82          extern bit IDkey_speech_flash;
  83          extern bit wire_broken_reset;
  84          extern tByte Stolen_alarm_reset_count;
  85          extern bit vibration_flag;
  86          extern tByte slave_nearby_count;
  87          extern bit wheeled_flag;
  88          extern bit IDkey_flash_EN;
  89          extern bit flashing_flag;
  90          extern tWord vibration_count;
  91          extern tWord wheeled_count;
  92          extern bit Just_power_up;
  93          extern bit Autolock_G;
  94          extern tWord timer0_count2;
  95          extern bit Emergency_open_G;
  96          
  97          /*-----------------------------------------
  98             slave_away_operation()
  99             
 100             operation for slave is away
 101          ------------------------------------------*/
 102          void slave_away_operation(void)
 103             {  
 104   1         if(Silence_Flag == 0)
 105   1            {
 106   2            close_lock_speech(); 
 107   2      
 108   2            Broadcast_battery();
 109   2            
 110   2      //    Check_Motobattery_flag = 1;
 111   2      //    Check_Motobattery_count = 0;
 112   2            }
 113   1         // Enable_sensor();  
 114   1         enable_sensor_delayEN = 1;
 115   1         enable_sensor_delay_count = 0;
 116   1         // delay time, avoid sensor trigger on.
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 3   

 117   1         Delay(20);
 118   1         ID_certificated_numbers = 0;
 119   1      
 120   1         if(Silence_Flag == 1)
 121   1            Silence_Flag = 0;
 122   1         }
 123          
 124          /*----------------------------------------------------------------------
 125                slave_nearby_operation()
 126                operation for slave is nearby
 127          ----------------------------------------------------------------------*/
 128          void slave_nearby_operation(void)
 129             {
 130   1         slave_nearby_actioned_flag = 1;
 131   1         
 132   1         ID_speeched_flag = 0;      
 133   1         After_IDcert_timecount = 0;
 134   1         ID_certificated_flag = 0;
 135   1         ID_certificated_numbers = 0;     
 136   1      
 137   1         Delay_500ms();
 138   1         Delay_500ms();
 139   1         Delay_500ms();
 140   1         Delay_500ms();
 141   1         Externalmotor = 0;
 142   1         
 143   1         if(Emergency_open_G == 0)
 144   1            {
 145   2            Generator_lock = 1;
 146   2            }
 147   1            
 148   1         if(Silence_Flag == 0)
 149   1            {     
 150   2            if(Just_power_up == 0)
 151   2               Broadcast_battery();
 152   2      
 153   2            open_lock_speech();
 154   2            Externalmotor = 0;
 155   2               
 156   2            key_rotate_on_speech();
 157   2            }
 158   1      
 159   1      
 160   1      /*
 161   1         if(Silence_Flag == 0)
 162   1            {
 163   1            open_lock_speech();
 164   1            Externalmotor = 0;
 165   1            if(Just_power_up == 0)
 166   1               verifybattery(load_battery_result);
 167   1            key_rotate_on_speech();
 168   1            }
 169   1         else
 170   1            {
 171   1            Delay_500ms();
 172   1            Delay_500ms();
 173   1            Externalmotor = 0;
 174   1            }
 175   1      */    
 176   1      
 177   1         }
 178          
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 4   

 179          /*------------------------------------------------------------------
 180             InitSensor()
 181             Initialise Sensor.
 182          ------------------------------------------------------------------*/
 183          void InitSensor(void)
 184             {
 185   1         sensor_EN = 0;
 186   1         enable_sensor_delayEN = 0; 
 187   1         }
 188             
 189          /*------------------------------------------------------------------
 190             Host_stolen_action()
 191             Determine host has been triggled 3 times, alarm action.
 192          ------------------------------------------------------------------*/
 193          void Host_stolen_action(void)
 194             {
 195   1         // if host has been touched 3 times, alarm 2 speeches alternantively.
 196   1         if(EN_host_stolen_alarming == 1)
 197   1            {
 198   2            Host_stolen_alarming = 1;
 199   2            
 200   2            stolen_alarm_speech1();
 201   2            stolen_alarm_speech2();
 202   2            #ifdef Z3
                    if(wire_broken_flag == 0)
                       {
                       UART_Send_Data(ComMode_3);                                                       
                       }
                    else
                       {                                                                     
                       UART_Send_Data(ComMode_6);                                                       
                       }
                    #endif
 212   2            }
 213   1         }
 214          
 215          /*------------------------------------------------------------------
 216             ENsensor_afterIDcert()
 217             6s After ID certificated, enable sensor. 
 218             If ID certficated 6 times, don't enable sensor.
 219          ------------------------------------------------------------------*/
 220          void ENsensor_afterIDcert(void)
 221             {
 222   1         if(ID_certificated_flag == 1)
 223   1            {
 224   2            // 3 tickets after ID certificated.
 225   2            if(++After_IDcert_timecount >= 15)
 226   2               {
 227   3               ID_certificated_flag = 0;
 228   3               After_IDcert_timecount = 0;         
 229   3               ID_certificated_numbers = 0;
 230   3               
 231   3               // 
 232   3               if((Open_action_flag == 0)&&(never_alarm == 0))
 233   3                  {
 234   4                  Enable_sensor();              
 235   4                  }           
 236   3               never_alarm = 0;
 237   3               
 238   3               }        
 239   2            }
 240   1         }
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 5   

 241          
 242          /*------------------------------------------------------------------
 243             ENsensor_After_Close()
 244          ------------------------------------------------------------------*/
 245          void ENsensor_After_Close(void)
 246             {
 247   1         if((enable_sensor_delayEN == 1)&&((key_rotate == 0)||(Autolock_G == 1)))
 248   1            {
 249   2            if(++enable_sensor_delay_count >= 3)
 250   2               {
 251   3               enable_sensor_delay_count = 0;
 252   3               enable_sensor_delayEN = 0;
 253   3               if(never_alarm == 0)
 254   3                  Enable_sensor();
 255   3               }
 256   2            }  
 257   1         }
 258          
 259          /*-----------------------------------------------------------------
 260             SelfLearn_Reset()
 261             PIN22 triggles 3 times, the system enters selflearn mode
 262          ------------------------------------------------------------------*/
 263          void SelfLearn_Reset(void)
 264             {  
 265   1         if(ID_selflearning_flag == 1)
 266   1            {
 267   2            if(++ID_selflearning_timecount > 10)
 268   2               {
 269   3               ID_selflearning_flag = 0;
 270   3               ID_selflearning_timecount = 0;            
 271   3               // Reset relatively flag and count.
 272   3               IDkey_selflearn_HVcount = 0;
 273   3               IDkey_selflearn_LVcount = 0;
 274   3               IDkey_selflearn_flag1 = 0;
 275   3               IDkey_selflearn_flag2 = 0;
 276   3               IDkey_selflearn_flag3 = 0;
 277   3               IDkey_selflearn_flag4 = 0;
 278   3               IDkey_selflearn_flag5 = 0;
 279   3               }        
 280   2            }
 281   1         }
 282          
 283          /*---------------------------------------------------
 284             Fell_Alarm_to_Slave()
 285             Send fell alarm signal to remote slave.
 286          ----------------------------------------------------*/
 287          void Fell_Alarm_to_Slave(void)
 288             {
 289   1         if((fell_flag==1)&&(fell_alarm_count<5))
 290   1            {
 291   2            UART_Send_Data(ComMode_5);                                                       
 292   2            fell_alarm_count++;
 293   2            }  
 294   1         }
 295          
 296          /*----------------------------------------------------
 297             Raise_Alarm_to_Slave()
 298             Send raised alarm signal to remote slave
 299          -----------------------------------------------------*/
 300          void Raise_Alarm_to_Slave(void)
 301             {
 302   1         if((raised_flag==1)&&(raised_alarm_count<5))    
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 6   

 303   1            {
 304   2            UART_Send_Data(ComMode_4);                                                       
 305   2            raised_alarm_count++;
 306   2            }        
 307   1         }
 308          
 309          /*----------------------------------------------------
 310             Batstolen_Alarm_to_Slave()
 311             Send battery stolen alarm signal to remote slave
 312          -----------------------------------------------------*/
 313          void Batstolen_Alarm_to_Slave(void)
 314             {
 315   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 20))
 316   1            {
 317   2            UART_Send_Data(ComMode_2);                                                       
 318   2            battery_stolen_count++;
 319   2            }  
 320   1         }
 321          
 322          /*----------------------------------------------------
 323             Disable_sensor_after_IDcert()
 324          -----------------------------------------------------*/
 325          void Disable_sensor_after_IDcert(void)
 326             {
 327   1         if(IDkey_speech_flash == 1)
 328   1            {
 329   2            IDkey_speech_flash = 0;
 330   2      
 331   2            disable_sensor();
 332   2            }  
 333   1         }
 334          
 335          /*----------------------------------------------------
 336             Reset_after_wirebroken()
 337          -----------------------------------------------------*/
 338          void Reset_after_wirebroken(void)
 339             {
 340   1         if(wire_broken_reset == 1)
 341   1            {
 342   2            wire_broken_reset = 0;
 343   2            host_stolen_alarm1_count = 0;
 344   2            EN_host_stolen_alarming = 0;           
 345   2            Host_stolen_alarming = 0;
 346   2            sensor_3rdalarm_flag = 0;
 347   2            }
 348   1         }
 349          
 350          /*----------------------------------------------------
 351             Reset_after_stolen_alarming()
 352             15 tickets after stolen alarm, shut alarm.
 353          -----------------------------------------------------*/
 354          void Reset_after_stolen_alarming(void)
 355             {
 356   1         if(EN_host_stolen_alarming == 1)
 357   1            {
 358   2            if(++Stolen_alarm_reset_count > 5)
 359   2               {
 360   3               host_stolen_alarm1_count = 0;
 361   3               EN_host_stolen_alarming = 0;
 362   3               Host_stolen_alarming = 0;
 363   3               sensor_3rdalarm_flag = 0;
 364   3               Stolen_alarm_reset_count = 0;
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 7   

 365   3               close_tranceiver();
 366   3               }
 367   2            }
 368   1         }
 369          
 370          /*-----------------------------------------------------
 371             Ensensor_after_slave_away()
 372          ------------------------------------------------------*/
 373          void Ensensor_after_slave_away(void)
 374             {
 375   1         if((vibration_flag1 == 0)&&(wheeled_flag == 0)&&(Just_power_up == 0))
 376   1            {
 377   2            if(++slave_nearby_count > 6)
 378   2               {
 379   3               slave_nearby_count = 7;
 380   3               slave_nearby_actioned_flag = 0;
 381   3               ID_certificated_flag = 0;
 382   3               if(never_alarm == 0)
 383   3                  Enable_sensor();
 384   3               }
 385   2            }  
 386   1         }
 387          
 388          /*----------------------------------------------------
 389             Detect_selflearn_action()
 390          -----------------------------------------------------*/
 391          void Detect_selflearn_action(void)
 392             {
 393   1         if((key_rotate == 1)||(Emergency_open_G == 1))
 394   1      // if(key_rotate == 1)
 395   1            {
 396   2      
 397   2            if(Match_wire == 1)
 398   2               {
 399   3               wire_broken_time += 1;
 400   3               if(wire_broken_time >= 6000)
 401   3                  {
 402   4                  wire_broken_time = 6001;
 403   4                  wire_broken_level = 0;
 404   4                  ID_selflearning_flag = 0;
 405   4                  }
 406   3               }
 407   2            else
 408   2               {
 409   3               if(wire_broken_time > 50)
 410   3                  {
 411   4                  wire_broken_time = 0;
 412   4                  wire_broken_level += 1;
 413   4                  }
 414   3               }
 415   2            
 416   2            if(wire_broken_level > 6)
 417   2               {
 418   3               wire_broken_level = 0;
 419   3               ID_selflearning_flag = 1;
 420   3               Self_learn_speech();
 421   3               }
 422   2            }
 423   1            
 424   1         if(IDkey_flash_EN == 1)
 425   1            {
 426   2            IDkey_flash_EN = 0;
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 8   

 427   2            flashing_flag = 1;
 428   2            ID_selflearning_flag = 0;
 429   2            
 430   2            Self_learn_programming();
 431   2            
 432   2            Self_learn_speech();
 433   2            
 434   2            #if (defined Z3) && (defined ID)
                    UART_Send_Data_match();
                    #endif
 437   2            }  
 438   1         }
 439          
 440          /*---------------------------------------------------
 441             Detect_open_action()
 442          ---------------------------------------------------*/
 443          void Detect_open_action(void)
 444             {
 445   1         if(((key_rotate == 1)||(Emergency_open_G == 1))&&(Open_action_flag == 0)&&(ID_certificated_flag == 1)&&(n
             -ever_alarm == 0))      
 446   1            {
 447   2            disable_sensor();
 448   2            Open_action_flag = 1;
 449   2            ID_speeched_flag = 0;
 450   2            
 451   2            After_IDcert_timecount = 0;
 452   2            ID_certificated_flag = 0;
 453   2            ID_certificated_numbers = 0;
 454   2            slave_nearby_actioned_flag = 1;
 455   2            //ElecMotor_CW();
 456   2            ElecMotor_code();
 457   2            slave_nearby_operation();
 458   2      
 459   2            Just_power_up = 0;
 460   2                  
 461   2            Autolock_G = 0;
 462   2            timer0_count2 = 0;
 463   2            }        
 464   1         }
 465          
 466          /*---------------------------------------------------
 467             Detect_close_action()
 468          ---------------------------------------------------*/
 469          void Detect_close_action(void)
 470             {
 471   1         if((((key_rotate == 0)&&(Emergency_open_G == 0))||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1))&&
             -(Open_action_flag == 1))
 472   1      // if(((key_rotate == 0)||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1)||(Emergency_open_G == 0))&&
             -(Open_action_flag == 1))
 473   1            {
 474   2            Generator_lock = 0;
 475   2            
 476   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 477   2               {
 478   3               key_rotate_off_time += 1;
 479   3               if(key_rotate_off_time >= 1500)
 480   3                  {
 481   4                  if((key_rotate == 0)||(slave_nearby_actioned_flag == 0)||(Autolock_G == 1))
 482   4                     {
 483   5                     //ElecMotor_ACW();
 484   5                     ElecMotor_closecode();
 485   5      
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 9   

 486   5                     Open_action_flag = 0;
 487   5                     slave_away_operation();
 488   5                     IDkey_speech_flash = 0;
 489   5                     ID_speeched_flag = 0;
 490   5      
 491   5                     timer0_count2 = 0;
 492   5                     Emergency_open_G = 0;
 493   5                     }
 494   4                  }
 495   3               }
 496   2            }
 497   1         else if(key_rotate == 1)
 498   1            key_rotate_off_time = 0;
 499   1         }
 500          
 501          /*------------------------------------------------------
 502             Detect_vibration()
 503          -------------------------------------------------------*/
 504          void Detect_vibration(void)
 505             {
 506   1         if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 507   1            {
 508   2            if(++vibration_count2 >= 2)
 509   2               {
 510   3               vibration_count2 = 0;
 511   3               vibration_flag = 1;
 512   3               vibration_count = 0;
 513   3               
 514   3               vibration_flag1 = 1;
 515   3               vibration_count1 = 0;   
 516   3               
 517   3               timer0_count2 = 0;         
 518   3               }     
 519   2            }
 520   1         else
 521   1            vibration_count2 = 0;
 522   1            
 523   1          if(vibration_flag == 1)
 524   1            {
 525   2            if(++vibration_count >= 4000)
 526   2               {
 527   3               vibration_flag = 0;
 528   3               vibration_count = 0;
 529   3               }
 530   2            }
 531   1      
 532   1          if(vibration_flag1 == 1)
 533   1            {
 534   2            if(++vibration_count1 >= 10000)
 535   2               {
 536   3               vibration_flag1 = 0;
 537   3               vibration_count1 = 0;
 538   3               }
 539   2            }
 540   1         }
 541          
 542          /*----------------------------------------------------
 543             Detect_wheel_moving()
 544          -----------------------------------------------------*/
 545          void Detect_wheel_moving(void)
 546             {
 547   1         if(wheeled_rotate == 1)
C51 COMPILER V9.54   OPERATION                                                             11/15/2016 14:57:55 PAGE 10  

 548   1            {
 549   2            wheeled_flag = 1;
 550   2            wheeled_count = 0;
 551   2            
 552   2            timer0_count2 = 0;
 553   2            }
 554   1         if(wheeled_flag == 1)
 555   1            {
 556   2            if(++wheeled_count >= 2000)
 557   2               {
 558   3               wheeled_flag = 0;
 559   3               wheeled_count = 0;
 560   3               }
 561   2            }  
 562   1         }
 563          
 564          /*---------------------------------------------------
 565             end of file
 566          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    757    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     10    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
