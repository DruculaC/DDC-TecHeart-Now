C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          #include "ISP_DataFlash.h"
  18          
  19          /*------ private variable --------------------------*/
  20          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  21          
  22          bit sensor_EN = 0;
  23          
  24          /*------- Public variable declarations --------------------------*/
  25          extern bit position_sensor_EN;   
  26          extern bit fell_flag;                  
  27          extern bit raised_flag;          
  28          extern tByte sensor_trigger_count;  
  29          extern tByte sensor_1ststage_count; 
  30          extern bit raised_fell_once_flag;         
  31          extern bit raised_fell_flag;              
  32          extern bit EN_host_stolen_alarming;     
  33          extern bit host_stolen_alarm2_EN;      
  34          extern tByte host_stolen_alarm1_count;    
  35          extern tByte host_stolen_alarm2_count;    
  36          extern bit Host_stolen_alarming;             
  37          extern tWord sensor_3rdstage_time;        
  38          extern tByte sensor_3rdstage_effcount;    
  39          extern tByte sensor_3rdstage_count;       
  40          extern tWord sensor_3rdstage_interval;    
  41          extern tWord sensor_2ndstage_time;     
  42          extern tByte sensor_2ndstage_count;    
  43          extern tWord ADC_check_result;      
  44          extern tByte wire_broken_count;     
  45          extern bit wire_broken_flag;        
  46          extern bit battery_stolen_EN;       
  47          extern tByte battery_stolen_count;
  48          extern bit sensor_3rdalarm_flag;
  49          extern tByte enable_sensor_delay_count;      
  50          extern bit Silence_Flag;
  51          extern tByte Open_action_flag;      
  52          extern tByte ID_certificated_numbers;
  53          extern bit ID_certificated_flag;       
  54          extern tByte After_IDcert_timecount;      
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 2   

  55          extern bit never_alarm;
  56          extern bit IDkey_selflearn_flag1;
  57          extern bit IDkey_selflearn_flag2;
  58          extern bit IDkey_selflearn_flag3;
  59          extern bit IDkey_selflearn_flag4;
  60          extern bit IDkey_selflearn_flag5;
  61          extern bit ID_selflearning_flag;
  62          extern tByte ID_selflearning_timecount;
  63          extern tWord IDkey_selflearn_HVcount;
  64          extern tWord IDkey_selflearn_LVcount;
  65          extern tByte fell_alarm_count;
  66          extern tByte raised_alarm_count;
  67          extern tByte Check_Motobattery_count;
  68          extern bit Check_Motobattery_flag;
  69          extern tWord load_battery_result;
  70          extern bit ID_speeched_flag;
  71          extern bit slave_nearby_actioned_flag;
  72          extern bit IDkey_speech_flash;
  73          extern bit wire_broken_reset;
  74          extern tByte Stolen_alarm_reset_count;
  75          extern bit vibration_flag;
  76          extern tByte slave_nearby_count;
  77          extern bit wheeled_flag;
  78          extern bit IDkey_flash_EN;
  79          extern bit flashing_flag;
  80          extern tWord vibration_count;
  81          extern tWord wheeled_count;
  82          extern bit Just_power_up;
  83          
  84          /*-----------------------------------------
  85             slave_away_operation()
  86             
  87             operation for slave is away
  88          ------------------------------------------*/
  89          void slave_away_operation(void)
  90             {  
  91   1         if(Silence_Flag == 0)
  92   1            {
  93   2            close_lock_speech(); 
  94   2            load_battery_result = ADC_check_result;
  95   2            verifybattery(load_battery_result);
  96   2      
  97   2      //    Check_Motobattery_flag = 1;
  98   2      //    Check_Motobattery_count = 0;
  99   2            }
 100   1         // Enable_sensor();  
 101   1         enable_sensor_delayEN = 1;
 102   1         enable_sensor_delay_count = 0;
 103   1         // delay time, avoid sensor trigger on.
 104   1         Delay(20);
 105   1         ID_certificated_numbers = 0;
 106   1      
 107   1         if(Silence_Flag == 1)
 108   1            Silence_Flag = 0;
 109   1         }
 110          
 111          /*----------------------------------------------------------------------
 112                slave_nearby_operation()
 113                operation for slave is nearby
 114          ----------------------------------------------------------------------*/
 115          void slave_nearby_operation(void)
 116             {
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 3   

 117   1         slave_nearby_actioned_flag = 1;
 118   1         
 119   1         ID_speeched_flag = 0;      
 120   1         After_IDcert_timecount = 0;
 121   1         ID_certificated_flag = 0;
 122   1         ID_certificated_numbers = 0;     
 123   1      
 124   1         if(Silence_Flag == 0)
 125   1            {
 126   2            open_lock_speech();
 127   2            if(Just_power_up == 0)
 128   2               verifybattery(load_battery_result);
 129   2            key_rotate_on_speech();
 130   2            }
 131   1         }
 132          
 133          /*------------------------------------------------------------------
 134             InitSensor()
 135             Initialise Sensor.
 136          ------------------------------------------------------------------*/
 137          void InitSensor(void)
 138             {
 139   1         sensor_EN = 0;
 140   1         position_sensor_EN = 0;
 141   1         enable_sensor_delayEN = 0; 
 142   1         raised_sensor_detect = 1;
 143   1         fell_sensor_detect = 1; 
 144   1         }
 145             
 146          /*------------------------------------------------------------------
 147             Host_stolen_action()
 148             Determine host has been triggled 3 times, alarm action.
 149          ------------------------------------------------------------------*/
 150          void Host_stolen_action(void)
 151             {
 152   1         // if host has been touched 3 times, alarm 2 speeches alternantively.
 153   1         if(EN_host_stolen_alarming == 1)
 154   1            {
 155   2            Host_stolen_alarming = 1;
 156   2            
 157   2            stolen_alarm_speech1();
 158   2            #ifdef Z3
                    if(wire_broken_flag == 0)
                       {
                       UART_Send_Data(ComMode_3);                                                       
                       }
                    else
                       {                                                                     
                       UART_Send_Data(ComMode_6);                                                       
                       }
                    #endif
 168   2            stolen_alarm_speech2();
 169   2            }
 170   1         }
 171          
 172          /*------------------------------------------------------------------
 173             ENsensor_afterIDcert()
 174             6s After ID certificated, enable sensor. 
 175             If ID certficated 6 times, don't enable sensor.
 176          ------------------------------------------------------------------*/
 177          void ENsensor_afterIDcert(void)
 178             {
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 4   

 179   1         if(ID_certificated_flag == 1)
 180   1            {
 181   2            // 3 tickets after ID certificated.
 182   2            if(++After_IDcert_timecount >= 5)
 183   2               {
 184   3               ID_certificated_flag = 0;
 185   3               After_IDcert_timecount = 0;         
 186   3               ID_certificated_numbers = 0;
 187   3               
 188   3               // 
 189   3               if((Open_action_flag == 0)&&(never_alarm == 0))
 190   3                  {
 191   4                  Enable_sensor();              
 192   4                  }           
 193   3               never_alarm = 0;
 194   3               
 195   3               }        
 196   2            }
 197   1         }
 198          
 199          /*------------------------------------------------------------------
 200             ENsensor_After_Close()
 201          ------------------------------------------------------------------*/
 202          void ENsensor_After_Close(void)
 203             {
 204   1         if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 205   1            {
 206   2            if(++enable_sensor_delay_count >= 3)
 207   2               {
 208   3               enable_sensor_delay_count = 0;
 209   3               enable_sensor_delayEN = 0;
 210   3               if(never_alarm == 0)
 211   3                  Enable_sensor();
 212   3               }
 213   2            }  
 214   1         }
 215          
 216          /*-----------------------------------------------------------------
 217             SelfLearn_Reset()
 218             PIN22 triggles 3 times, the system enters selflearn mode
 219          ------------------------------------------------------------------*/
 220          void SelfLearn_Reset(void)
 221             {  
 222   1         if(ID_selflearning_flag == 1)
 223   1            {
 224   2            if(++ID_selflearning_timecount > 10)
 225   2               {
 226   3               ID_selflearning_flag = 0;
 227   3               ID_selflearning_timecount = 0;            
 228   3               // Reset relatively flag and count.
 229   3               IDkey_selflearn_HVcount = 0;
 230   3               IDkey_selflearn_LVcount = 0;
 231   3               IDkey_selflearn_flag1 = 0;
 232   3               IDkey_selflearn_flag2 = 0;
 233   3               IDkey_selflearn_flag3 = 0;
 234   3               IDkey_selflearn_flag4 = 0;
 235   3               IDkey_selflearn_flag5 = 0;
 236   3               }        
 237   2            }
 238   1         }
 239          
 240          /*---------------------------------------------------
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 5   

 241             Fell_Alarm_to_Slave()
 242             Send fell alarm signal to remote slave.
 243          ----------------------------------------------------*/
 244          void Fell_Alarm_to_Slave(void)
 245             {
 246   1         if((fell_flag==1)&&(fell_alarm_count<5))
 247   1            {
 248   2            UART_Send_Data(ComMode_5);                                                       
 249   2            fell_alarm_count++;
 250   2            }  
 251   1         }
 252          
 253          /*----------------------------------------------------
 254             Raise_Alarm_to_Slave()
 255             Send raised alarm signal to remote slave
 256          -----------------------------------------------------*/
 257          void Raise_Alarm_to_Slave(void)
 258             {
 259   1         if((raised_flag==1)&&(raised_alarm_count<5))    
 260   1            {
 261   2            UART_Send_Data(ComMode_4);                                                       
 262   2            raised_alarm_count++;
 263   2            }        
 264   1         }
 265          
 266          /*----------------------------------------------------
 267             Batstolen_Alarm_to_Slave()
 268             Send battery stolen alarm signal to remote slave
 269          -----------------------------------------------------*/
 270          void Batstolen_Alarm_to_Slave(void)
 271             {
 272   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 5))
 273   1            {
 274   2            UART_Send_Data(ComMode_2);                                                       
 275   2            battery_stolen_count++;
 276   2            }  
 277   1         }
 278          
 279          /*----------------------------------------------------
 280             Disable_sensor_after_IDcert()
 281          -----------------------------------------------------*/
 282          void Disable_sensor_after_IDcert(void)
 283             {
 284   1         if(IDkey_speech_flash == 1)
 285   1            {
 286   2            IDkey_speech_flash = 0;
 287   2      
 288   2            disable_sensor();
 289   2            }  
 290   1         }
 291          
 292          /*----------------------------------------------------
 293             Reset_after_wirebroken()
 294          -----------------------------------------------------*/
 295          void Reset_after_wirebroken(void)
 296             {
 297   1         if(wire_broken_reset == 1)
 298   1            {
 299   2            wire_broken_reset = 0;
 300   2            host_stolen_alarm1_count = 0;
 301   2            EN_host_stolen_alarming = 0;           
 302   2            Host_stolen_alarming = 0;
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 6   

 303   2            sensor_3rdalarm_flag = 0;
 304   2            }
 305   1         }
 306          
 307          /*----------------------------------------------------
 308             Reset_after_stolen_alarming()
 309             15 tickets after stolen alarm, shut alarm.
 310          -----------------------------------------------------*/
 311          void Reset_after_stolen_alarming(void)
 312             {
 313   1         if(EN_host_stolen_alarming == 1)
 314   1            {
 315   2            if(++Stolen_alarm_reset_count > 3)
 316   2               {
 317   3               host_stolen_alarm1_count = 0;
 318   3               EN_host_stolen_alarming = 0;
 319   3               Host_stolen_alarming = 0;
 320   3               sensor_3rdalarm_flag = 0;
 321   3               Stolen_alarm_reset_count = 0;
 322   3               close_tranceiver();
 323   3               }
 324   2            }
 325   1         }
 326          
 327          /*-----------------------------------------------------
 328             Ensensor_after_slave_away()
 329          ------------------------------------------------------*/
 330          void Ensensor_after_slave_away(void)
 331             {
 332   1         if((vibration_flag == 0)&&(wheeled_flag == 0)&&(Just_power_up == 0))
 333   1            {
 334   2            if(++slave_nearby_count > 4)
 335   2               {
 336   3               slave_nearby_count = 5;
 337   3               slave_nearby_actioned_flag = 0;
 338   3               ID_certificated_flag = 0;
 339   3               if(never_alarm == 0)
 340   3                  Enable_sensor();
 341   3               }
 342   2            }  
 343   1         }
 344          
 345          /*----------------------------------------------------
 346             Detect_selflearn_action()
 347          -----------------------------------------------------*/
 348          void Detect_selflearn_action(void)
 349             {
 350   1         if(key_rotate == 1)
 351   1            {
 352   2            if(wire_broken == 1)
 353   2               {
 354   3               IDkey_selflearn_LVcount = 0;
 355   3                        
 356   3               if(++IDkey_selflearn_HVcount > 4000)
 357   3                  {
 358   4                  IDkey_selflearn_HVcount = 4002;
 359   4                  IDkey_selflearn_flag1 = 0;
 360   4                  IDkey_selflearn_flag2 = 0;
 361   4                  IDkey_selflearn_flag3 = 0;
 362   4                  IDkey_selflearn_flag4 = 0;
 363   4                  IDkey_selflearn_flag5 = 0;
 364   4                  }
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 7   

 365   3               else
 366   3                  {
 367   4                  IDkey_selflearn_flag1 = 1;
 368   4                  if(IDkey_selflearn_flag2 == 1)
 369   4                     IDkey_selflearn_flag3 = 1;
 370   4                  if(IDkey_selflearn_flag4 == 1)
 371   4                     IDkey_selflearn_flag5 = 1;
 372   4                  }
 373   3               }
 374   2            else
 375   2               {
 376   3               IDkey_selflearn_HVcount = 0;
 377   3               
 378   3               if(IDkey_selflearn_flag1 == 1)
 379   3                  IDkey_selflearn_flag2 = 1;
 380   3                  
 381   3               if(IDkey_selflearn_flag3 == 1)
 382   3                  IDkey_selflearn_flag4 = 1;       
 383   3               
 384   3               if(IDkey_selflearn_flag5 == 1)
 385   3                  {
 386   4                  ID_selflearning_flag = 1;
 387   4                  IDkey_selflearn_flag5 = 0;
 388   4                  Self_learn_speech();
 389   4                  }
 390   3                  
 391   3               if(++IDkey_selflearn_LVcount > 4000)
 392   3                  {
 393   4                  IDkey_selflearn_LVcount = 4002;
 394   4                  IDkey_selflearn_flag1 = 0;
 395   4                  IDkey_selflearn_flag2 = 0;
 396   4                  IDkey_selflearn_flag3 = 0;
 397   4                  IDkey_selflearn_flag4 = 0;
 398   4                  IDkey_selflearn_flag5 = 0;
 399   4                  ID_selflearning_flag = 0;
 400   4                  }
 401   3               }     
 402   2            }
 403   1      
 404   1         if(IDkey_flash_EN == 1)
 405   1            {
 406   2            IDkey_flash_EN = 0;
 407   2            flashing_flag = 1;
 408   2            IDkey_selflearn_flag1 = 0;
 409   2            IDkey_selflearn_flag2 = 0;
 410   2            IDkey_selflearn_flag3 = 0;
 411   2            IDkey_selflearn_flag4 = 0;
 412   2            IDkey_selflearn_flag5 = 0;
 413   2            ID_selflearning_flag = 0;
 414   2            
 415   2            Self_learn_programming();
 416   2            
 417   2            Self_learn_speech();
 418   2            
 419   2            #if (defined Z3) && (defined ID)
                    UART_Send_Data_match();
                    #endif
 422   2            }  
 423   1         }
 424          
 425          /*---------------------------------------------------
 426             Detect_open_action()
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 8   

 427          ---------------------------------------------------*/
 428          void Detect_open_action(void)
 429             {
 430   1      // if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1)&&(never_alarm == 0))    
 431   1         if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1))      
 432   1            {
 433   2            disable_sensor();
 434   2            Open_action_flag = 1;
 435   2            ID_speeched_flag = 0;
 436   2            
 437   2            After_IDcert_timecount = 0;
 438   2            ID_certificated_flag = 0;
 439   2            ID_certificated_numbers = 0;
 440   2            slave_nearby_actioned_flag = 1;
 441   2            ElecMotor_CW();
 442   2            slave_nearby_operation();
 443   2            
 444   2            Just_power_up = 0;
 445   2            }        
 446   1         }
 447          
 448          /*---------------------------------------------------
 449             Detect_close_action()
 450          ---------------------------------------------------*/
 451          void Detect_close_action(void)
 452             {
 453   1         if(((key_rotate == 0)||(slave_nearby_actioned_flag == 0))&&(Open_action_flag == 1))
 454   1            {
 455   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 456   2               {
 457   3               Delay_1ms();
 458   3               if((key_rotate == 0)||(slave_nearby_actioned_flag == 0))
 459   3                  {
 460   4                  ElecMotor_ACW();
 461   4      
 462   4                  Open_action_flag = 0;
 463   4                  slave_away_operation();    
 464   4                  IDkey_speech_flash = 0;
 465   4                  ID_speeched_flag = 0;
 466   4                  }           
 467   3               }
 468   2            }  
 469   1         }
 470          
 471          /*------------------------------------------------------
 472             Detect_vibration()
 473          -------------------------------------------------------*/
 474          void Detect_vibration(void)
 475             {
 476   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 477   1            {
 478   2            vibration_flag = 1;
 479   2            vibration_count = 0;
 480   2            }
 481   1          if(vibration_flag == 1)
 482   1            {
 483   2            if(++vibration_count >= 2000)
 484   2               {
 485   3               vibration_flag = 0;
 486   3               vibration_count = 0;
 487   3               }
 488   2            }  
C51 COMPILER V9.54   OPERATION                                                             07/02/2015 15:44:18 PAGE 9   

 489   1         }
 490          
 491          /*----------------------------------------------------
 492             Detect_wheel_moving()
 493          -----------------------------------------------------*/
 494          void Detect_wheel_moving(void)
 495             {
 496   1         if(wheeled_rotate == 1)
 497   1            {
 498   2            wheeled_flag = 1;
 499   2            wheeled_count = 0;
 500   2            }
 501   1         if(wheeled_flag == 1)
 502   1            {
 503   2            if(++wheeled_count >= 2000)
 504   2               {
 505   3               wheeled_flag = 0;
 506   3               wheeled_count = 0;
 507   3               }
 508   2            }  
 509   1         }
 510          
 511          /*---------------------------------------------------
 512             end of file
 513          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    698    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
