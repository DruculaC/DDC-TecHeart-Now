C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Li
                    -brary) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          /*------- Public variable definitions --------------------------*/
  32          bit ID_certificated_flag = 0;       // Flagged once ID card or Slave certificated successfully.
  33          tByte ID_certificated_numbers = 0;  // Numbers of ID certificated.
  34          
  35          bit Host_stolen_alarming = 0;       // Host stolen is alarming, don't detect vibration for 1st stage.
  36          
  37          // ------ Private variable definitions -----------------------------
  38          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  39          bit EN_host_stolen_alarming = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  40          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  41          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  42          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  43          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  44          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  45          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  46          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  47          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  48          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  49          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  50          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  52          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  53          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 2   

  54          
  55          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  56          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  57          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  58          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  59          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  60          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  61          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  62          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  63          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  64          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  65          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  66          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  67          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  68          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  69          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  70          tByte Open_action_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  71          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  72          tWord load_battery_result = 0;
  73          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  74          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  75          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  76          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  77          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  78          bit vibration_flag = 0;
  79          tWord vibration_count = 0;
  80          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  81          tByte After_IDcert_timecount = 0;      // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  82          tByte enable_sensor_delay_count = 0;      // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  83          bit sensor_3rdalarm_flag = 0;
  84          bit wheeled_flag = 0;
  85          tWord wheeled_count = 0;
  86          bit IDkey_speech_flash = 0;
  87          
  88          code tByte IDkey6 _at_ 0x003000;
  89          code tByte IDkey7 _at_ 0x003001;
  90          code tByte IDkey8 _at_ 0x003002;
  91          code tByte IDkey9 _at_ 0x003003;
  92          code tByte IDkey10 _at_ 0x003004;
  93          code tByte IDkey11 _at_ 0x003005;
  94          
  95          tWord IDkey_selflearn_HVcount = 0;
  96          tWord IDkey_selflearn_LVcount = 0;
  97          bit IDkey_selflearn_flag1 = 0;
  98          bit IDkey_selflearn_flag2 = 0;
  99          bit IDkey_selflearn_flag3 = 0;
 100          bit IDkey_selflearn_flag4 = 0;
 101          bit IDkey_selflearn_flag5 = 0;
 102          bit ID_selflearning_flag = 0;
 103          tByte ID_selflearning_timecount = 0;
 104          bit IDkey_flash_EN = 0;
 105          
 106          bit Silence_Flag = 0;
 107          bit flashing_flag = 0;
 108          
 109          tByte Check_Motobattery_count = 0;
 110          bit Check_Motobattery_flag = 0;
 111          bit CheckADC_flag = 0;
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 3   

 112          
 113          bit never_alarm = 0;
 114          bit never_alarm_speech = 0;
 115          
 116          bit slave_nearby_actioned_flag = 0;
 117          tByte slave_nearby_count = 0;
 118          
 119          bit ID_speeched_flag = 0;
 120          
 121          tByte Stolen_alarm_reset_count = 0;
 122          
 123          bit wire_broken_reset = 0;
 124          
 125          bit Just_power_up = 1;
 126          
 127          /*------- Private variable declaratuions --------------------------*/
 128          
 129          void main()
 130             {
 131   1         InitVoice();
 132   1         
 133   1         #ifdef ID
                 InitUART(BAUD9600);
                 #endif   
 136   1         #ifdef WX
 137   1         InitUART(BAUD1200);
 138   1         #endif
 139   1         
 140   1         InitSensor();
 141   1         
 142   1         InitTransceiver();
 143   1         
 144   1         // lock the external motor, prohibit motor moving when power up.
 145   1         InitElecmotor();  
 146   1        
 147   1         Externalmotor = Close;
 148   1         while(1)
 149   1            {     
 150   2            }
 151   1         }
 152          
 153          /*------------------------------------------------------------------
 154             timerT0()
 155             operation every ticket.
 156          --------------------------------------------------------------------*/
 157          
 158          void timer0() interrupt interrupt_timer_0_overflow
 159             {
 160   1         // manually reload timer0 configuration
 161   1         TH0 = timer0_8H;
 162   1         TL0 = timer0_8L;
 163   1      
 164   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 165   1         if(++timer0_count >= 2000)
 166   1            {
 167   2            // reset timer0 ticket counter every 2s
 168   2            timer0_count=0;
 169   2      
 170   2      /*----- Accumulator relevantly ------------------------------------*/
 171   2            Check_motor_accumulator();    
 172   2            Accumulator_voice_promot();
 173   2      
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 4   

 174   2      /*----- Enable sensor ---------------------------------------------*/
 175   2            #ifdef ID
                    ENsensor_afterIDcert();
                    #endif
 178   2            // if no vibration and wheeled, decrease slave_nearby_count,
 179   2            // if more than 3 times, it means slave is away, then enable sensor.
 180   2            #ifdef WX
 181   2            Ensensor_after_slave_away();
 182   2            #endif      
 183   2            
 184   2            ENsensor_After_Close();
 185   2      
 186   2      /*----- Alarm relevantly -----------------------------------------*/    
 187   2            #ifdef Z3
                    Fell_Alarm_to_Slave();
                    Raise_Alarm_to_Slave();
                    Batstolen_Alarm_to_Slave();
                    #endif      
 192   2            Host_stolen_action();
 193   2      
 194   2      /*----- Reset flag and disabling sensor relevantly --------------*/
 195   2            Disable_sensor_after_IDcert();      
 196   2            //
 197   2            Reset_after_wirebroken();
 198   2            Reset_after_stolen_alarming();
 199   2            SelfLearn_Reset();               
 200   2            }  
 201   1         
 202   1         // Voice hint for entering no guard mode, 
 203   1         Enter_noguard_voice();
 204   1      
 205   1      /*----- Detectiong relevantly -----------------------------------*/
 206   1         Detect_selflearn_action();
 207   1         Detect_vibration();
 208   1         Detect_wheel_moving();
 209   1      
 210   1         Detect_open_action();
 211   1         Detect_close_action();     
 212   1      
 213   1      // judge host is fell or raised every 1ms?
 214   1      // if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 215   1      //    {
 216   1            // judge vibration sensor is enable?
 217   1            if(sensor_EN == 1)   
 218   1               {        
 219   2               // sensor trigger status, 0, 1 or 2?
 220   2               switch(sensor_trigger_count)
 221   2                  {
 222   3                  // case 0, it means host is in waiting status. waiting for first touch.
 223   3                  case 0:
 224   3                     {              
 225   4                     // judge host been touched and also not in vibration alarm
 226   4      //             if((sensor_detect == 0)&&(Host_stolen_alarming == 0)&&(transmiter_EN == 1))      
 227   4                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(Host_stolen_alarming == 0)&&(flashing_flag == 0
             -)&&(transmiter_EN == 1))     
 228   4                        {
 229   5                        // judge LV is more than 2ms, if yes, it means a effective touch
 230   5                        if(++sensor_1ststage_count >= 1)       
 231   5                           {
 232   6                           sensor_1ststage_count=0;
 233   6                           
 234   6                           // sensor trigge status progress to case 1.
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 5   

 235   6                           sensor_trigger_count = 1;
 236   6                           // alarm speech for first touch
 237   6      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 238   6      //                   host_touch_speech();
 239   6                           Delay_500ms();
 240   6                           Delay_500ms();
 241   6                           Delay_500ms();
 242   6                           Delay_500ms();
 243   6                           }
 244   5                        }
 245   4                     else
 246   4                        {
 247   5                        // if no LV, reset the count.
 248   5                        sensor_1ststage_count = 0;
 249   5                        }
 250   4                     }
 251   3                  break;
 252   3                  
 253   3                  // waiting for next touch, 
 254   3                  case 1:
 255   3                     {
 256   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 257   4                        {
 258   5                        // LV for 2s, means a effective touch
 259   5                        if(++sensor_2ndstage_count >= 1)
 260   5                           {
 261   6                           sensor_2ndstage_count = 0;
 262   6                           sensor_trigger_count = 2;
 263   6                           // alarm speech for 2nd touch
 264   6      //                   SCH_Add_Task(host_2ndtouch_speech, 0, 0);
 265   6                           host_touch_speech();
 266   6                           }
 267   5                        }
 268   4                     else
 269   4                        {
 270   5                        sensor_2ndstage_count = 0;
 271   5                        }
 272   4                     
 273   4                     // if there is no touch in 4s, reset sensor trigger status, etc.
 274   4                     if(++sensor_2ndstage_time >= 4000)
 275   4                        {
 276   5                        sensor_trigger_count = 0;
 277   5                        sensor_2ndstage_count = 0;
 278   5                        sensor_1ststage_count = 0;
 279   5                        sensor_2ndstage_time = 0;
 280   5                        }
 281   4                     }
 282   3                  break;
 283   3                  
 284   3                  // waiting for 3rd touch
 285   3                  case 2:
 286   3                     {
 287   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 288   4                        {
 289   5                        // 2s LV is a effective touch
 290   5                        if(++sensor_3rdstage_count >= 1)
 291   5                           {
 292   6                           sensor_3rdstage_count = 0;
 293   6                           // stolen alarm speech enable
 294   6                           EN_host_stolen_alarming = 1;
 295   6                           host_stolen_alarm2_EN = 1; 
 296   6                           sensor_3rdalarm_flag = 1;  
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 6   

 297   6                           Stolen_alarm_reset_count = 0;
 298   6                           }
 299   5                        }
 300   4                     else
 301   4                        {
 302   5                        sensor_3rdstage_count = 0;
 303   5                        }
 304   4                     
 305   4                     // if there is no touch in 4s, reset all.
 306   4                     if(++sensor_3rdstage_time >= 4000)
 307   4                        {
 308   5                        sensor_trigger_count = 0;
 309   5                        sensor_1ststage_count = 0;
 310   5                        sensor_2ndstage_count = 0;
 311   5                        sensor_2ndstage_time = 0;
 312   5                        sensor_3rdstage_time = 0;
 313   5                        sensor_3rdstage_count = 0;
 314   5                        }
 315   4                     }
 316   3                  break;
 317   3                  }
 318   2               
 319   2               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 320   2               if(wire_broken == 0)
 321   2                  {
 322   3                  EN_host_stolen_alarming = 1;
 323   3                  host_stolen_alarm2_EN = 1;
 324   3                  Stolen_alarm_reset_count = 0;    
 325   3                  wire_broken_flag = 1;
 326   3                  }
 327   2               else if((wire_broken == 1)&&(wire_broken_flag == 1))
 328   2                  {
 329   3                  wire_broken_reset = 1;
 330   3                  wire_broken_flag = 0;            
 331   3                  ID_speech();
 332   3                  }
 333   2               
 334   2               
 335   2               if(ADC_check_result < 0x100)
 336   2                  {
 337   3                  battery_stolen_EN = 1;
 338   3                  }
 339   2               else
 340   2                  battery_stolen_EN = 0;
 341   2               }
 342   1      //    }
 343   1         
 344   1         // judge whether position sensor is enable
 345   1         if(position_sensor_EN==1)     
 346   1            {
 347   2            // judge whether there is a LV
 348   2            if(raised_sensor_detect == 0) 
 349   2               {
 350   3               // LV > 0.5s means a effective input
 351   3               if(++raise_wire_time==10)
 352   3                  {
 353   4                  // flag raised, and reset fell
 354   4                  raised_flag=1;
 355   4                  fell_flag=0;
 356   4                  // judge whether there once been a raised or fell.
 357   4                  if(raised_fell_once_flag == 0)
 358   4                     {
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 7   

 359   5                     // if no, flag raised and fell flag
 360   5                     raised_fell_flag = 1;               
 361   5                     }
 362   4                  }     
 363   3               }
 364   2            else
 365   2               {
 366   3               raised_flag=0;
 367   3               raised_alarm_count=0;
 368   3               raise_wire_time=0;
 369   3               raised_fell_flag = 0;
 370   3               }
 371   2            // judge whether there is a LV
 372   2            if(fell_sensor_detect==0)
 373   2               {
 374   3               // LV > 0.5s means a effective input
 375   3               if(++fell_wire_time==10)   
 376   3                  {
 377   4                  // flag fell, and reset raised
 378   4                  fell_flag=1;         
 379   4                  raised_flag=0;
 380   4                  // judge whether there once been a raised or fell
 381   4                  if(raised_fell_once_flag == 0)
 382   4                     {
 383   5                     raised_fell_flag = 1;               
 384   5                     }
 385   4                  }     
 386   3               }
 387   2            else
 388   2               {
 389   3               fell_flag=0;
 390   3               fell_alarm_count=0;
 391   3               fell_wire_time=0;
 392   3               raised_fell_flag = 0;
 393   3               }
 394   2            }
 395   1         
 396   1         // judge whether raised or fell, if yes, reset all after 10s.
 397   1         if(raised_fell_flag == 1)
 398   1            {
 399   2            if(++raised_fell_number >= 4000)
 400   2               {
 401   3               raised_fell_flag = 0;
 402   3               raised_fell_number = 0;
 403   3               raised_fell_once_flag = 1;
 404   3               
 405   3               sensor_trigger_count = 0;
 406   3               sensor_1ststage_count = 0;
 407   3               sensor_2ndstage_count = 0;
 408   3               sensor_2ndstage_time = 0;
 409   3               sensor_3rdstage_time = 0;
 410   3               sensor_3rdstage_interval = 800;
 411   3               sensor_3rdstage_count = 0;
 412   3               sensor_3rdstage_effcount = 0;             
 413   3               }
 414   2            }
 415   1         }
 416          
 417          /*-----------------------------------------------
 418             UART interrupt
 419          -----------------------------------------------*/
 420          void uart_isr() interrupt 4 
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 8   

 421             {
 422   1         if(RI)
 423   1            {
 424   2            RI=0;
 425   2            received_data_buffer[data_count] = SBUF;
 426   2      
 427   2            // assign one byte to buffer[i] 
 428   2            
 429   2            if(ID_selflearning_flag == 0)
 430   2               {
 431   3               // judge whether buffer[0] is CmdHead
 432   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 433   3                  {
 434   4                  data_count = 1;
 435   4                  }
 436   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 437   3                  {
 438   4                  data_count = 2;
 439   4                  }
 440   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 441   3                  {
 442   4                  data_count = 3;
 443   4                  }
 444   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 445   3                  {
 446   4                  data_count = 4;
 447   4                  }
 448   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 449   3                  {
 450   4                  data_count = 5;
 451   4                  }
 452   3               #ifdef ID
                       else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
                          {
                          data_count = 0;   
                          ID_certificated_flag = 1;
                          After_IDcert_timecount = 0;
                          IDkey_speech_flash = 1;
                          
                          IDcerted_speech();
                                
                          if(ID_certificated_numbers++ >= 1)
                             {
                             Silence_Flag = 1;
                             }
                          if(++ID_certificated_numbers >= 11)
                             {
                             never_alarm = 1;
                             never_alarm_speech = 1;
                             Silence_Flag = 0;
                             ID_certificated_numbers = 0;
                             }
                          }
                       #endif
 475   3               #ifdef WX
 476   3               else if(data_count == 5)
 477   3                  {
 478   4                  receive_data_finished_flag = 1;
 479   4                  data_count = 0;
 480   4                  }        
 481   3               #endif
 482   3               else 
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 9   

 483   3                  {
 484   4                  data_count = 0;
 485   4                  }  
 486   3      
 487   3               #ifdef WX
 488   3               if(receive_data_finished_flag == 1)
 489   3                  {
 490   4                  receive_data_finished_flag  = 0;
 491   4                  switch(received_data_buffer[5])
 492   4                     {
 493   5                     case ComMode_1:
 494   5                        {
 495   6                        ID_certificated_flag = 1;
 496   6                        After_IDcert_timecount = 0;
 497   6                        IDkey_speech_flash = 1;
 498   6                        IDcerted_speech();
 499   6                        slave_nearby_count = 0;
 500   6                        }
 501   5                     break;
 502   5                     
 503   5                     case ComMode_11:
 504   5                        {
 505   6                        Silence_Flag = 1;
 506   6                        Self_learn_speech();
 507   6      //                never_alarm = ~never_alarm;
 508   6                        }
 509   5                     break;
 510   5                     }
 511   4                  }
 512   3               #endif
 513   3               }
 514   2            else
 515   2               {        
 516   3               #ifdef ID
                       if(++data_count >= 6)
                          {
                          data_count = 0;
                          IDkey_flash_EN = 1;
                          }
                       #endif
 523   3               
 524   3               #ifdef WX
 525   3               if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
 526   3                  {
 527   4                  data_count = 1;
 528   4                  }
 529   3               else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
 530   3                  {
 531   4                  data_count = 2;
 532   4                  }
 533   3               else if(data_count == 2)
 534   3                  {
 535   4                  data_count = 3;
 536   4                  }
 537   3               else if(data_count == 3)
 538   3                  {
 539   4                  data_count = 4;
 540   4                  }
 541   3               else if(data_count == 4)
 542   3                  {
 543   4                  data_count = 5;
 544   4                  }
C51 COMPILER V9.54   MAIN                                                                  06/10/2015 16:56:24 PAGE 10  

 545   3               else if(data_count == 5)
 546   3                  {
 547   4                  data_count = 6;
 548   4                  }
 549   3               else if(data_count == 6)
 550   3                  {
 551   4                  data_count = 0;
 552   4                  IDkey_flash_EN = 1;
 553   4                  ID_speech();
 554   4                  }
 555   3               else 
 556   3                  {
 557   4                  data_count = 0;
 558   4                  }
 559   3               #endif
 560   3               }
 561   2            }
 562   1         }
 563          
 564          
 565          /*---------------------------------------------------
 566             end of file
 567          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    932    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     57    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     35    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
