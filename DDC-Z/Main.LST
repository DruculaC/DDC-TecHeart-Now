C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\Library) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*---------------------------------------------------
   2            main.c (v1.00)
   3          
   4            DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
*** ERROR C141 IN LINE 19 OF ..\Library\ElecMotor.h: syntax error near '<<'
*** ERROR C129 IN LINE 20 OF ..\Library\ElecMotor.h: missing ';' before '=='
  24          
  25          
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          /*------- Public variable definitions --------------------------*/
  32          bit ID_certificated_flag = 0;     // Flagged once ID card or Slave certificated successfully.
  33          tByte ID_certificated_numbers = 0;  // Numbers of ID certificated.
  34          
  35          bit Host_stolen_alarming = 0;     // Host stolen is alarming, don't detect vibration for 1st stage.
  36          
  37          // ------ Private variable definitions -----------------------------
  38          bit position_sensor_EN=0;     //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  39          bit EN_host_stolen_alarming = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  40          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  41          tByte host_stolen_alarm1_count = 0;   //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  42          tByte host_stolen_alarm2_count = 0;   //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  43          bit fell_flag=0;            //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  44          bit raised_flag=0;          //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  45          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  46          tWord sensor_3rdstage_time = 0;     //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  47          tByte sensor_3rdstage_effcount = 0;   //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  48          tByte sensor_3rdstage_count = 0;      //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  49          tWord sensor_3rdstage_interval = 0;   //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  50          bit raised_fell_flag = 0;         //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte sensor_trigger_count=0;   //´«¸ÐÆ÷´¥·¢¼ÆÊý
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 2   

  52          tWord sensor_2ndstage_time=0;   //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  53          tByte sensor_1ststage_count=0;  //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  54          
  55          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  56          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  57          tWord timer0_count=0;   // counter for timer0, increment every ticket       
  58          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};   //½ÓÊÕÊý¾Ý»º´æ
  59          bit receive_data_finished_flag = 0;   //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  60          tByte data_count = 0;       //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  61          tByte one_receive_byte = 0;   //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  62          tByte one_receive_byte_count = 0;     //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  63          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  64          tByte receive_HV_count = 0;   //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  65          tByte receive_LV_count = 0;   //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  66          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  67          tByte raise_wire_time=0;      //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  68          tWord raised_fell_number = 0;       //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  69          bit raised_fell_once_flag = 0;      //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  70          tByte Open_action_flag = 0;     //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  71          tWord ADC_check_result = 0;   //×÷ÎªAD¼ì²âÖµ
  72          
  73          
  74          tWord load_battery_result = 0xfff;
  75          tByte wire_broken_count = 0;    // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  76          bit battery_stolen_EN = 0;      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  77          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  78          bit horizontal_vibration = 0;   // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  79          tWord horizontal_vibration_count = 0; //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  80          bit vibration_flag = 0;
  81          tWord vibration_count = 0;
  82          bit wire_broken_flag = 0;     // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  83          tByte After_IDcert_timecount = 0;   // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  84          tByte enable_sensor_delay_count = 0;    // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  85          bit sensor_3rdalarm_flag = 0;
  86          bit wheeled_flag = 0;
  87          tWord wheeled_count = 0;
  88          bit IDkey_speech_flash = 0;
  89          bit Emergency_open_G = 0;
  90          
  91          bit Speech_closed_G = 0;
  92          tByte Speech_closed_time = 0;
  93          
  94          // If it is a debug program, define IDkey6~11 to RAM
  95          #ifdef Debug
                tByte IDkey6;
                tByte IDkey7;
                tByte IDkey8;
                tByte IDkey9;
                tByte IDkey10;
                tByte IDkey11;
              // If it is a normal program, define IDkey6~11 to Flash ROM
              #else
 104            code tByte IDkey6 _at_ 0x003000;
 105            code tByte IDkey7 _at_ 0x003001;
 106            code tByte IDkey8 _at_ 0x003002;
 107            code tByte IDkey9 _at_ 0x003003;
 108            code tByte IDkey10 _at_ 0x003004;
 109            code tByte IDkey11 _at_ 0x003005;
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 3   

 110          #endif
 111          
 112          tWord IDkey_selflearn_HVcount = 0;
 113          tWord IDkey_selflearn_LVcount = 0;
 114          bit IDkey_selflearn_flag1 = 0;
 115          bit IDkey_selflearn_flag2 = 0;
 116          bit IDkey_selflearn_flag3 = 0;
 117          bit IDkey_selflearn_flag4 = 0;
 118          bit IDkey_selflearn_flag5 = 0;
 119          bit ID_selflearning_flag = 0;
 120          tByte ID_selflearning_timecount = 0;
 121          bit IDkey_flash_EN = 0;
 122          
 123          bit Silence_Flag = 0;
 124          bit flashing_flag = 0;
 125          
 126          tByte Check_Motobattery_count = 0;
 127          bit Check_Motobattery_flag = 0;
 128          bit CheckADC_flag = 0;
 129          
 130          bit never_alarm = 0;
 131          bit never_alarm_speech = 0;
 132          
 133          bit slave_nearby_actioned_flag = 0;
 134          tByte slave_nearby_count = 0;
 135          
 136          bit ID_speeched_flag = 0;
 137          
 138          tByte Stolen_alarm_reset_count = 0;
 139          
 140          bit wire_broken_reset = 0;
 141          
 142          bit Just_power_up = 1;
 143          
 144          bit Battery_hint_flag = 0;
 145          
 146          bit Autolock_G = 0;
 147          tWord timer0_count2 = 0;
 148          
 149          /*------- Private variable declaratuions --------------------------*/
 150          
 151          void main()
 152            {
 153            InitVoice();
 154          
 155            // lock the external motor, prohibit motor moving when power up.
 156          //  InitElecmotor();
 157          
 158            ID_speech();
 159          
 160            InitUART(BAUD9600);
 161          
 162            InitSensor();
 163          
 164            InitTransceiver();
 165            
 166            
 167            // ½«P0.1, P0.2ÉèÖÃ³ÉÊäÈë¸ß×èÄ£Ê½
 168            P0M1 |= 0x06;
 169            P0M2 &= 0xf9;
 170            // ½«P2.5£¬¼´PIN16ÉèÖÃ³ÉÊäÈë¸ß×èÄ£Ê½
 171            P2M1 |= 0x20;
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 4   

 172            P2M2 &= 0xdf;
 173          
 174            Lock_EN = 1;
 175            
 176            // µç»úËø
 177            Generator_lock = 0;
 178            Externalmotor = 1;
 179          
 180            lock_power = 0;
 181              
 182            while(1)
 183              {
 184              }
 185            }
 186          
 187          /*------------------------------------------------------------------
 188            timerT0()
 189            operation every ticket.
 190          --------------------------------------------------------------------*/
 191          void timer0() interrupt interrupt_timer_0_overflow
 192            {
 193            // manually reload timer0 configuration
 194            TH0 = timer0_8H;
 195            TL0 = timer0_8L;
 196          
 197            // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 198            if(++timer0_count >= 2000)
 199              {
 200              // reset timer0 ticket counter every 2s
 201              timer0_count=0;
 202          
 203          
 204          //    UART_Send_Data_match();
 205          
 206              #ifdef ID
 207              if((++timer0_count2 >= 35)&&(Autolock_G == 0))
 208                {
 209                Autolock_G = 1;
 210                }
 211              #endif
 212          /*----- Wire_cut detection ----------------------------------------*/
 213              if(sensor_EN == 1)
 214                {
 215                // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 216                if(wire_broken == 0)
 217                  {
 218                  EN_host_stolen_alarming = 1;
 219                  host_stolen_alarm2_EN = 1;
 220                  Stolen_alarm_reset_count = 0;   
 221                  wire_broken_flag = 1;
 222                  }
 223                else if((wire_broken == 1)&&(wire_broken_flag == 1))
 224                  {
 225                  wire_broken_reset = 1;
 226                  wire_broken_flag = 0;       
 227                  ID_speech();
 228                  }
 229                }
 230              
 231              if(Speech_closed_G == 1)
 232                {
 233                Speech_closed_time += 1;
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 5   

 234                if(Speech_closed_time > 2)
 235                  {
 236                  Speech_closed_time = 0;
 237                  voice_EN = 0;
 238                  }
 239                }
 240          
 241          /*----- Accumulator relevantly ------------------------------------*/
 242              Check_motor_accumulator();
 243              Accumulator_voice_promot();
 244          
 245          /*----- Enable sensor ---------------------------------------------*/
 246              #ifdef ID
 247              ENsensor_afterIDcert();
 248              #endif
 249              // if no vibration and wheeled, decrease slave_nearby_count,
 250              // if more than 3 times, it means slave is away, then enable sensor.
 251              #ifdef WX
                  Ensensor_after_slave_away();
                  #endif    
 254          
 255              ENsensor_After_Close();
 256          
 257          /*----- Alarm relevantly -----------------------------------------*/
 258              #ifdef Z3
                  Fell_Alarm_to_Slave();
                  Raise_Alarm_to_Slave();
                  Batstolen_Alarm_to_Slave();
                  #endif
 263              
 264              Host_stolen_action();
 265          
 266          /*----- Reset flag and disabling sensor relevantly --------------*/
 267          
 268              Reset_after_wirebroken();
 269              Reset_after_stolen_alarming();
 270              SelfLearn_Reset();
 271              }
 272          
 273            // Voice hint for entering no guard mode,
 274            Enter_noguard_voice();
 275          
 276          /*----- Detectiong relevantly -----------------------------------*/
 277            Detect_selflearn_action();
 278            Detect_vibration();
 279            Detect_wheel_moving();
 280            
 281            Disable_sensor_after_IDcert();
 282          
 283            Detect_open_action();
 284            Detect_close_action();  
 285            
 286            if(Battery_hint_flag == 1)
 287              {
 288              Battery_hint_flag = 0;
 289              Battery_hint();
 290              }
 291          
 292          // judge host is fell or raised every 1ms?
 293          //  if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 294          //    {
 295              // judge vibration sensor is enable?
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 6   

 296              if(sensor_EN == 1)  
 297                {     
 298                // sensor trigger status, 0, 1 or 2?
 299                switch(sensor_trigger_count)
 300                  {
 301                  // case 0, it means host is in waiting status. waiting for first touch.
 302                  case 0:
 303                    {         
 304                    // judge host been touched and also not in vibration alarm
 305          //          if((sensor_detect == 0)&&(Host_stolen_alarming == 0)&&(transmiter_EN == 1))   
 306          //          if(((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))&&(Host_stolen_alarming ==
             - 0)&&(flashing_flag == 0)&&(transmiter_EN == 1))    
 307                    if(((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))&&(Host_stolen_alarming == 0
             -)&&(flashing_flag == 0))    
 308                      {
 309                      // judge LV is more than 2ms, if yes, it means a effective touch
 310                      if(++sensor_1ststage_count >= 1)      
 311                        {
 312                        sensor_1ststage_count=0;
 313                        
 314                        
 315                        sensor_2ndstage_time = 0;
 316                        // sensor trigge status progress to case 1.
 317                        sensor_trigger_count = 1;
 318                        // alarm speech for first touch
 319          //              SCH_Add_Task(host_touch_speech, 0, 0);
 320          
 321                        // æ¥è­¦æ¶ä½¿æ§å¶å¨ä¾çµ
 322                        Generator_lock = 1;
 323                        // çµæºéæ­»
 324                        Externalmotor = 0;
 325          
 326                        #ifdef voice
                            host_touch_speech();
                            #endif
 329                        
 330                        Delay_500ms();Delay_500ms();Delay_500ms();Delay_500ms();
 331                               }
 332                      }
 333                    else
 334                      {
 335                      // if no LV, reset the count.
 336                      sensor_1ststage_count = 0;
 337                      }
 338                    }
 339                  break;
 340                  
 341                  // waiting for next touch, 
 342                  case 1:
 343                    {
 344                    if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 345                      {
 346                      // LV for 2s, means a effective touch
 347                      if(++sensor_2ndstage_count >= 1)
 348                        {
 349                        sensor_2ndstage_count = 0;
 350                        sensor_trigger_count = 2;
 351                        
 352                        sensor_3rdstage_time = 0;
 353                        // alarm speech for 2nd touch
 354                        
 355                        // æ¥è­¦æ¶ä½¿æ§å¶å¨ä¾çµ
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 7   

 356                        Generator_lock = 1;
 357                        // çµæºéæ­»
 358                        Externalmotor = 0;
 359                          
 360                        #ifdef voice
                            //host_2ndtouch_speech();
                            host_touch_speech();
                            #endif
 364                        }
 365                      }
 366                    else
 367                      {
 368                      sensor_2ndstage_count = 0;
 369                      }
 370          
 371                    // if there is no touch in 4s, reset sensor trigger status, etc.
 372                    if(++sensor_2ndstage_time >= 8000)
 373                      {
 374                      sensor_trigger_count = 0;
 375                      sensor_2ndstage_count = 0;
 376                      sensor_1ststage_count = 0;
 377                      sensor_2ndstage_time = 0;
 378          
 379                      // æ¥è­¦æ¶ä½¿æ§å¶å¨ä¾çµ
 380                      Generator_lock = 0;
 381                      // çµæºéæ­»
 382                      Externalmotor = 1;
 383                      }
 384                    }
 385                  break;
 386          
 387                  case 2:
 388                    {
 389                    if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 390                      {
 391                      // LV for 2s, means a effective touch
 392                      if(++sensor_3rdstage_count >= 2)
 393                        {
 394                        sensor_3rdstage_count = 0;
 395                        sensor_trigger_count = 3;
 396                        sensor_3rdstage_time = 0;
 397          
 398                        // alarm speech for 2nd touch
 399          //              host_2ndtouch_speech();
 400          
 401                        // æ¥è­¦æ¶ä½¿æ§å¶å¨ä¾çµ
 402                        Generator_lock = 1;
 403                        // çµæºéæ­»
 404                        Externalmotor = 0;
 405          
 406                        #ifdef voice
                            host_touch_speech();
                            #endif
 409                        }
 410                      }
 411                    else
 412                      {
 413                      sensor_3rdstage_count = 0;
 414                      }
 415                      
 416                    // if there is no touch in 4s, reset sensor trigger status, etc.
 417                    if(++sensor_3rdstage_time >= 8000)
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 8   

 418                      {
 419                      sensor_trigger_count = 0;
 420                      sensor_3rdstage_count = 0;
 421                      sensor_2ndstage_count = 0;
 422                      sensor_1ststage_count = 0;
 423                      sensor_3rdstage_time = 0;
 424          
 425                      // æ¥è­¦æ¶ä½¿æ§å¶å¨ä¾çµ
 426                      Generator_lock = 0;
 427                      // çµæºéæ­»
 428                      Externalmotor = 1;
 429                      }
 430                    }
 431                  break;
 432                  
 433                  // waiting for 3rd touch
 434                  case 3:
 435                    {
 436                    if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 437                      {
 438                      // 2s LV is a effective touch
 439                      if(++sensor_3rdstage_count >= 3)
 440                        {
 441                        sensor_3rdstage_count = 0;
 442                        // stolen alarm speech enable
 443                        EN_host_stolen_alarming = 1;
 444                        host_stolen_alarm2_EN = 1;  
 445                        sensor_3rdalarm_flag = 1; 
 446                        Stolen_alarm_reset_count = 0;
 447                        
 448                        // æ¥è­¦æ¶ä½¿æ§å¶å¨ä¾çµ
 449                        Generator_lock = 1;
 450                        // çµæºéæ­»
 451                        Externalmotor = 0;
 452                        }
 453                      }
 454                    else
 455                      {
 456                      sensor_3rdstage_count = 0;
 457                      }
 458                    
 459                    // if there is no touch in 4s, reset all.
 460                    if(++sensor_3rdstage_time >= 8000)
 461                      {
 462                      sensor_trigger_count = 0;
 463                      sensor_1ststage_count = 0;
 464                      sensor_2ndstage_count = 0;
 465                      sensor_2ndstage_time = 0;
 466                      sensor_3rdstage_time = 0;
 467                      sensor_3rdstage_count = 0;
 468                      
 469                      if(EN_host_stolen_alarming == 0)
 470                        {
 471                        // æ¥è­¦æ¶ä½¿æ§å¶å¨ä¾çµ
 472                        Generator_lock = 0;
 473                        // çµæºéæ­»
 474                        Externalmotor = 1;              
 475                        }
 476                      }
 477                    }
 478                  break;
 479                  }
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 9   

 480                
 481                
 482                if(ADC_check_result < 0x100)
 483                  {
 484                  battery_stolen_EN = 1;
 485                  }
 486                else
 487                  battery_stolen_EN = 0;
 488                  }
 489          //      }
 490            
 491            // judge whether position sensor is enable
 492            if(position_sensor_EN==1)   
 493              {
 494              // judge whether there is a LV
 495              if(raised_sensor_detect == 0) 
 496                {
 497                // LV > 0.5s means a effective input
 498                if(++raise_wire_time==10)
 499                  {
 500                  // flag raised, and reset fell
 501                  raised_flag=1;
 502                  fell_flag=0;
 503                  // judge whether there once been a raised or fell.
 504                  if(raised_fell_once_flag == 0)
 505                    {
 506                    // if no, flag raised and fell flag
 507                    raised_fell_flag = 1;         
 508                    }
 509                  }   
 510                }
 511              else
 512                {
 513                raised_flag=0;
 514                raised_alarm_count=0;
 515                raise_wire_time=0;
 516                raised_fell_flag = 0;
 517                }
 518                // judge whether there is a LV
 519              if(fell_sensor_detect==0)
 520                {
 521                // LV > 0.5s means a effective input
 522                if(++fell_wire_time==10)  
 523                  { 
 524                  //  flag fell, and reset raised
 525                  fell_flag=1;      
 526                  raised_flag=0;
 527                  // judge whether there once been a raised or fell
 528                  if(raised_fell_once_flag == 0)
 529                    {
 530                    raised_fell_flag = 1;         
 531                    }
 532                  }   
 533                }
 534              else
 535                {
 536                fell_flag=0;
 537                fell_alarm_count=0;
 538                fell_wire_time=0;
 539                raised_fell_flag = 0;
 540                }
 541              }
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 10  

 542            
 543            // judge whether raised or fell, if yes, reset all after 10s.
 544            if(raised_fell_flag == 1)
 545              {
 546              if(++raised_fell_number >= 4000)
 547                {
 548                raised_fell_flag = 0;
 549                raised_fell_number = 0;
 550                raised_fell_once_flag = 1;
 551                
 552                sensor_trigger_count = 0;
 553                sensor_1ststage_count = 0;
 554                sensor_2ndstage_count = 0;
 555                sensor_2ndstage_time = 0;
 556                sensor_3rdstage_time = 0;
 557                sensor_3rdstage_interval = 800;
 558                sensor_3rdstage_count = 0;
 559                sensor_3rdstage_effcount = 0;         
 560                }
 561              }
 562            }
 563          
 564          /*-----------------------------------------------
 565            UART interrupt
 566          -----------------------------------------------*/
 567          void uart_isr() interrupt 4 
 568            {
 569            if(RI)
 570              {
 571              RI=0;
 572              received_data_buffer[data_count] = SBUF;
 573          
 574              // assign one byte to buffer[i] 
 575              
 576              if(ID_selflearning_flag == 0)
 577                {
 578                // judge whether buffer[0] is CmdHead
 579                if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 580                  {
 581                  data_count = 1;
 582                  }
 583                else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 584                  {
 585                  data_count = 2;
 586                  }
 587                else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 588                  {
 589                  data_count = 3;
 590                  }
 591                else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 592                  {
 593                  data_count = 4;
 594                  }
 595                else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 596                  {
 597                  data_count = 5;
 598                  }
 599                #ifdef ID
 600                else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
 601                  {
 602                  data_count = 0;
 603                  ID_certificated_flag = 1;
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 11  

 604                  After_IDcert_timecount = 0;
 605                  IDkey_speech_flash = 1;
 606                  
 607                  IDcerted_speech();
 608                      
 609                  if(ID_certificated_numbers++ >= 1)
 610                    {
 611                    // éé³æ¨¡å¼
 612                    // Silence_Flag = 1;
 613                    }
 614                  if(++ID_certificated_numbers >= 11)
 615                    {
 616                    //never_alarm = 1;
 617                    
 618                    // Ó¦¼±¿ªËø
 619                    Emergency_open_G = ~Emergency_open_G;
 620                    ID_certificated_flag = 1;
 621                    never_alarm_speech = 1;
 622                    
 623                    Silence_Flag = 0;
 624                    ID_certificated_numbers = 0;
 625                    }
 626                  }
 627                #endif
 628                #ifdef WX
                    else if(data_count == 5)
                      {
                      receive_data_finished_flag = 1;
                      data_count = 0;
                      }     
                    #endif
 635                else
 636                  {
 637                  data_count = 0;
 638                  }
 639          
 640                #ifdef WX
                    if(receive_data_finished_flag == 1)
                      {
                      receive_data_finished_flag  = 0;
                      switch(received_data_buffer[5])
                        {
                        case ComMode_1:
                          {
                          ID_certificated_flag = 1;
                          After_IDcert_timecount = 0;
                          IDkey_speech_flash = 1;
                          IDcerted_speech();
                          slave_nearby_count = 0;
                          }
                        break;
              
                        case ComMode_11:
                          {
                          Silence_Flag = 1;
                          Self_learn_speech();
                          }
                        break;
              
                        case ComMode_12:
                          {
                          Battery_hint_flag = 1;
C51 COMPILER V9.54   MAIN                                                                  06/04/2017 11:50:55 PAGE 12  

                          }
                        break;
                        }
                      }
                    #endif
 671                }
 672              else
 673                {
 674                #ifdef ID
 675                if(++data_count >= 6)
 676                  {
 677                  data_count = 0;
 678                  IDkey_flash_EN = 1;
 679                  }
 680                #endif
 681          
 682                #ifdef WX
                    if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
                      {
                      data_count = 1;
                      }
                    else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
                      {
                      data_count = 2;
                      }
                    else if(data_count == 2)
                      {
                      data_count = 3;
                      }
                    else if(data_count == 3)
                      {
                      data_count = 4;
                      }
                    else if(data_count == 4)
                      {
                      data_count = 5;
                      }
                    else if(data_count == 5)
                      {
                      data_count = 6;
                      }
                    else if(data_count == 6)
                      {
                      data_count = 0;
                      IDkey_flash_EN = 1;
                      ID_speech();
                      }
                    else
                      {
                      data_count = 0;
                      }
                    #endif
 718                }
 719              }
 720            }
 721          /*---------------------------------------------------
 722            end of file
 723          ----------------------------------------------------*/

C51 COMPILATION COMPLETE.  0 WARNING(S),  2 ERROR(S)
