C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - INCDIR(..\Library) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3          
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25          
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          /*------- Public variable definitions --------------------------*/
  32          bit ID_certificated_flag = 0;       // Flagged once ID card or Slave certificated successfully.
  33          tByte ID_certificated_numbers = 0;  // Numbers of ID certificated.
  34          
  35          bit Host_stolen_alarming = 0;       // Host stolen is alarming, don't detect vibration for 1st stage.
  36          
  37          // ------ Private variable definitions -----------------------------
  38          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  39          bit EN_host_stolen_alarming = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  40          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  41          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  42          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  43          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  44          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  45          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  46          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  47          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  48          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  49          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  50          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  52          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  53          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 2   

  54          
  55          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  56          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  57          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  58          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  59          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  60          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  61          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  62          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  63          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  64          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  65          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  66          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  67          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  68          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  69          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  70          tByte Open_action_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  71          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  72          
  73          
  74          tWord load_battery_result = 0xfff;
  75          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  76          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  77          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  78          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  79          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  80          bit vibration_flag = 0;
  81          tWord vibration_count = 0;
  82          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  83          tByte After_IDcert_timecount = 0;      // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  84          tByte enable_sensor_delay_count = 0;      // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  85          bit sensor_3rdalarm_flag = 0;
  86          bit wheeled_flag = 0;
  87          tWord wheeled_count = 0;
  88          bit IDkey_speech_flash = 0;
  89          bit Emergency_open_G = 0;
  90          
  91          bit Speech_closed_G = 0;
  92          tByte Speech_closed_time = 0;
  93          
  94          code tByte IDkey6 _at_ 0x003000;
  95          code tByte IDkey7 _at_ 0x003001;
  96          code tByte IDkey8 _at_ 0x003002;
  97          code tByte IDkey9 _at_ 0x003003;
  98          code tByte IDkey10 _at_ 0x003004;
  99          code tByte IDkey11 _at_ 0x003005;
 100          
 101          tWord IDkey_selflearn_HVcount = 0;
 102          tWord IDkey_selflearn_LVcount = 0;
 103          bit IDkey_selflearn_flag1 = 0;
 104          bit IDkey_selflearn_flag2 = 0;
 105          bit IDkey_selflearn_flag3 = 0;
 106          bit IDkey_selflearn_flag4 = 0;
 107          bit IDkey_selflearn_flag5 = 0;
 108          bit ID_selflearning_flag = 0;
 109          tByte ID_selflearning_timecount = 0;
 110          bit IDkey_flash_EN = 0;
 111          
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 3   

 112          bit Silence_Flag = 0;
 113          bit flashing_flag = 0;
 114          
 115          tByte Check_Motobattery_count = 0;
 116          bit Check_Motobattery_flag = 0;
 117          bit CheckADC_flag = 0;
 118          
 119          bit never_alarm = 0;
 120          bit never_alarm_speech = 0;
 121          
 122          bit slave_nearby_actioned_flag = 0;
 123          tByte slave_nearby_count = 0;
 124          
 125          bit ID_speeched_flag = 0;
 126          
 127          tByte Stolen_alarm_reset_count = 0;
 128          
 129          bit wire_broken_reset = 0;
 130          
 131          bit Just_power_up = 1;
 132          
 133          bit Battery_hint_flag = 0;
 134          
 135          bit Autolock_G = 0;
 136          tWord timer0_count2 = 0;
 137          
 138          /*------- Private variable declaratuions --------------------------*/
 139          
 140          void main()
 141             {
 142   1         InitVoice();
 143   1      
 144   1         ID_speech();
 145   1      
 146   1         InitUART(BAUD9600);
 147   1      
 148   1         InitSensor();
 149   1      
 150   1         Externalmotor = Close;
 151   1         
 152   1         // P0.1, P0.2, input mode
 153   1         P0M1 |= 0x06;
 154   1         P0M2 &= 0xf9;
 155   1         // P2.5ï¼ŒP2.6ï¼ŒP2.7, input mode
 156   1         P2M1 |= 0xe0;
 157   1         P2M2 &= 0x1f;
 158   1      
 159   1         Generator_lock = 0;
 160   1      
 161   1         while(1)
 162   1            {
 163   2            }
 164   1         }
 165          
 166          /*------------------------------------------------------------------
 167             timerT0()
 168             operation every ticket.
 169          --------------------------------------------------------------------*/
 170          
 171          void timer0() interrupt interrupt_timer_0_overflow
 172             {
 173   1         // manually reload timer0 configuration
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 4   

 174   1         TH0 = timer0_8H;
 175   1         TL0 = timer0_8L;
 176   1      
 177   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 178   1         if(++timer0_count >= 2000)
 179   1            {
 180   2            // reset timer0 ticket counter every 2s
 181   2            timer0_count=0;
 182   2      
 183   2      //    UART_Send_Data_match();
 184   2      
 185   2            #ifdef ID
 186   2            if((++timer0_count2 >= 100)&&(Autolock_G == 0))
 187   2               {
 188   3               Autolock_G = 1;
 189   3               }
 190   2            #endif
 191   2      /*----- Wire_cut detection ----------------------------------------*/
 192   2      /*    if(sensor_EN == 1)
 193   2               {
 194   2               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 195   2               if(wire_broken == 0)
 196   2                  {
 197   2                  EN_host_stolen_alarming = 1;
 198   2                  host_stolen_alarm2_EN = 1;
 199   2                  Stolen_alarm_reset_count = 0;    
 200   2                  wire_broken_flag = 1;
 201   2                  }
 202   2               else if((wire_broken == 1)&&(wire_broken_flag == 1))
 203   2                  {
 204   2                  wire_broken_reset = 1;
 205   2                  wire_broken_flag = 0;            
 206   2                  ID_speech();
 207   2                  }
 208   2               }
 209   2      */    
 210   2            if(Speech_closed_G == 1)
 211   2               {
 212   3               Speech_closed_time += 1;
 213   3               if(Speech_closed_time > 2)
 214   3                  {
 215   4                  Speech_closed_time = 0;
 216   4                  voice_EN = 0;
 217   4                  }
 218   3               }
 219   2      
 220   2      /*----- Accumulator relevantly ------------------------------------*/
 221   2            Check_motor_accumulator();
 222   2            Accumulator_voice_promot();
 223   2      
 224   2      /*----- Enable sensor ---------------------------------------------*/
 225   2            #ifdef ID
 226   2            ENsensor_afterIDcert();
 227   2            #endif
 228   2            // if no vibration and wheeled, decrease slave_nearby_count,
 229   2            // if more than 3 times, it means slave is away, then enable sensor.
 230   2            #ifdef WX
                    Ensensor_after_slave_away();
                    #endif      
 233   2      
 234   2            ENsensor_After_Close();
 235   2      
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 5   

 236   2      /*----- Alarm relevantly -----------------------------------------*/
 237   2            #ifdef Z3
                    Fell_Alarm_to_Slave();
                    Raise_Alarm_to_Slave();
                    Batstolen_Alarm_to_Slave();
                    #endif
 242   2            Host_stolen_action();
 243   2      
 244   2      /*----- Reset flag and disabling sensor relevantly --------------*/
 245   2            Disable_sensor_after_IDcert();
 246   2      
 247   2            Reset_after_wirebroken();
 248   2            Reset_after_stolen_alarming();
 249   2            SelfLearn_Reset();
 250   2            }
 251   1      
 252   1         // Voice hint for entering no guard mode,
 253   1         Enter_noguard_voice();
 254   1      
 255   1      /*----- Detectiong relevantly -----------------------------------*/
 256   1         Detect_selflearn_action();
 257   1         Detect_vibration();
 258   1         Detect_wheel_moving();
 259   1      
 260   1         Detect_open_action();
 261   1         Detect_close_action();
 262   1      
 263   1         if(Battery_hint_flag == 1)
 264   1            {
 265   2            Battery_hint_flag = 0;
 266   2            Battery_hint();
 267   2            }
 268   1      
 269   1      // judge host is fell or raised every 1ms?
 270   1      // if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 271   1      //    {
 272   1            // judge vibration sensor is enable?
 273   1            if(sensor_EN == 1)   
 274   1               {        
 275   2               // sensor trigger status, 0, 1 or 2?
 276   2               switch(sensor_trigger_count)
 277   2                  {
 278   3                  // case 0, it means host is in waiting status. waiting for first touch.
 279   3                  case 0:
 280   3                     {              
 281   4                     // judge host been touched and also not in vibration alarm
 282   4      //             if((sensor_detect == 0)&&(Host_stolen_alarming == 0)&&(transmiter_EN == 1))      
 283   4      //             if(((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))&&(Host_stolen_alarming ==
             - 0)&&(flashing_flag == 0)&&(transmiter_EN == 1))     
 284   4                     if(((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))&&(Host_stolen_alarming == 0
             -)&&(flashing_flag == 0))     
 285   4                        {
 286   5                        // judge LV is more than 2ms, if yes, it means a effective touch
 287   5                        if(++sensor_1ststage_count >= 1)       
 288   5                           {
 289   6                           sensor_1ststage_count=0;
 290   6                           
 291   6                           // sensor trigge status progress to case 1.
 292   6                           sensor_trigger_count = 1;
 293   6                           // alarm speech for first touch
 294   6      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 295   6      //                   host_touch_speech();
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 6   

 296   6                           Delay_500ms();
 297   6                           Delay_500ms();
 298   6                           Delay_500ms();
 299   6                           Delay_500ms();
 300   6                           }
 301   5                        }
 302   4                     else
 303   4                        {
 304   5                        // if no LV, reset the count.
 305   5                        sensor_1ststage_count = 0;
 306   5                        }
 307   4                     }
 308   3                  break;
 309   3                  
 310   3                  // waiting for next touch, 
 311   3                  case 1:
 312   3                     {
 313   4                     if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 314   4                        {
 315   5                        // LV for 2s, means a effective touch
 316   5                        if(++sensor_2ndstage_count >= 1)
 317   5                           {
 318   6                           sensor_2ndstage_count = 0;
 319   6                           sensor_trigger_count = 2;
 320   6                           // alarm speech for 2nd touch
 321   6      //                   host_2ndtouch_speech();
 322   6                           host_touch_speech();
 323   6                           }
 324   5                        }
 325   4                     else
 326   4                        {
 327   5                        sensor_2ndstage_count = 0;
 328   5                        }
 329   4                     
 330   4                     // if there is no touch in 4s, reset sensor trigger status, etc.
 331   4                     if(++sensor_2ndstage_time >= 4000)
 332   4                        {
 333   5                        sensor_trigger_count = 0;
 334   5                        sensor_2ndstage_count = 0;
 335   5                        sensor_1ststage_count = 0;
 336   5                        sensor_2ndstage_time = 0;
 337   5                        }
 338   4                     }
 339   3                  break;
 340   3                  
 341   3                  // waiting for 3rd touch
 342   3                  case 2:
 343   3                     {
 344   4                     if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 345   4                        {
 346   5                        // 2s LV is a effective touch
 347   5                        if(++sensor_3rdstage_count >= 3)
 348   5                           {
 349   6                           sensor_3rdstage_count = 0;
 350   6                           // stolen alarm speech enable
 351   6                           EN_host_stolen_alarming = 1;
 352   6                           host_stolen_alarm2_EN = 1; 
 353   6                           sensor_3rdalarm_flag = 1;  
 354   6                           Stolen_alarm_reset_count = 0;
 355   6                           }
 356   5                        }
 357   4                     else
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 7   

 358   4                        {
 359   5                        sensor_3rdstage_count = 0;
 360   5                        }
 361   4                     
 362   4                     // if there is no touch in 4s, reset all.
 363   4                     if(++sensor_3rdstage_time >= 4000)
 364   4                        {
 365   5                        sensor_trigger_count = 0;
 366   5                        sensor_1ststage_count = 0;
 367   5                        sensor_2ndstage_count = 0;
 368   5                        sensor_2ndstage_time = 0;
 369   5                        sensor_3rdstage_time = 0;
 370   5                        sensor_3rdstage_count = 0;
 371   5                        }
 372   4                     }
 373   3                  break;
 374   3                  }
 375   2               
 376   2               
 377   2               if(ADC_check_result < 0x100)
 378   2                  {
 379   3                  battery_stolen_EN = 1;
 380   3                  }
 381   2               else
 382   2                  battery_stolen_EN = 0;
 383   2               }
 384   1      //    }
 385   1      /* 
 386   1         // judge whether position sensor is enable
 387   1         if(position_sensor_EN==1)     
 388   1            {
 389   1            // judge whether there is a LV
 390   1            if(raised_sensor_detect == 0) 
 391   1               {
 392   1               // LV > 0.5s means a effective input
 393   1               if(++raise_wire_time==10)
 394   1                  {
 395   1                  // flag raised, and reset fell
 396   1                  raised_flag=1;
 397   1                  fell_flag=0;
 398   1                  // judge whether there once been a raised or fell.
 399   1                  if(raised_fell_once_flag == 0)
 400   1                     {
 401   1                     // if no, flag raised and fell flag
 402   1                     raised_fell_flag = 1;               
 403   1                     }
 404   1                  }     
 405   1               }
 406   1            else
 407   1               {
 408   1               raised_flag=0;
 409   1               raised_alarm_count=0;
 410   1               raise_wire_time=0;
 411   1               raised_fell_flag = 0;
 412   1               }
 413   1            // judge whether there is a LV
 414   1            if(fell_sensor_detect==0)
 415   1               {
 416   1               // LV > 0.5s means a effective input
 417   1               if(++fell_wire_time==10)   
 418   1                  { 
 419   1                  //  flag fell, and reset raised
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 8   

 420   1                  fell_flag=1;         
 421   1                  raised_flag=0;
 422   1                  // judge whether there once been a raised or fell
 423   1                  if(raised_fell_once_flag == 0)
 424   1                     {
 425   1                     raised_fell_flag = 1;               
 426   1                     }
 427   1                  }     
 428   1               }
 429   1            else
 430   1               {
 431   1               fell_flag=0;
 432   1               fell_alarm_count=0;
 433   1               fell_wire_time=0;
 434   1               raised_fell_flag = 0;
 435   1               }
 436   1            }
 437   1         
 438   1         // judge whether raised or fell, if yes, reset all after 10s.
 439   1         if(raised_fell_flag == 1)
 440   1            {
 441   1            if(++raised_fell_number >= 4000)
 442   1               {
 443   1               raised_fell_flag = 0;
 444   1               raised_fell_number = 0;
 445   1               raised_fell_once_flag = 1;
 446   1               
 447   1               sensor_trigger_count = 0;
 448   1               sensor_1ststage_count = 0;
 449   1               sensor_2ndstage_count = 0;
 450   1               sensor_2ndstage_time = 0;
 451   1               sensor_3rdstage_time = 0;
 452   1               sensor_3rdstage_interval = 800;
 453   1               sensor_3rdstage_count = 0;
 454   1               sensor_3rdstage_effcount = 0;             
 455   1               }
 456   1            }
 457   1            */
 458   1         }
 459          
 460          /*-----------------------------------------------
 461             UART interrupt
 462          -----------------------------------------------*/
 463          void uart_isr() interrupt 4 
 464             {
 465   1         if(RI)
 466   1            {
 467   2            RI=0;
 468   2            
 469   2            testport = ~testport;
 470   2            
 471   2            received_data_buffer[data_count] = SBUF;
 472   2      
 473   2            // assign one byte to buffer[i] 
 474   2            
 475   2            if(ID_selflearning_flag == 0)
 476   2               {
 477   3               // judge whether buffer[0] is CmdHead
 478   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 479   3                  {
 480   4                  data_count = 1;
 481   4                  }
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 9   

 482   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 483   3                  {
 484   4                  data_count = 2;
 485   4                  }
 486   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 487   3                  {
 488   4                  data_count = 3;
 489   4                  }
 490   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 491   3                  {
 492   4                  data_count = 4;
 493   4                  }
 494   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 495   3                  {
 496   4                  data_count = 5;
 497   4                  }
 498   3               #ifdef ID
 499   3               else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
 500   3                  {
 501   4                  data_count = 0;
 502   4                  ID_certificated_flag = 1;
 503   4                  After_IDcert_timecount = 0;
 504   4                  IDkey_speech_flash = 1;
 505   4                  
 506   4                  IDcerted_speech();
 507   4                        
 508   4                  if(ID_certificated_numbers++ >= 1)
 509   4                     {
 510   5                     Silence_Flag = 1;
 511   5                     }
 512   4                  if(++ID_certificated_numbers >= 11)
 513   4                     {
 514   5                     //never_alarm = 1;
 515   5                     
 516   5                     // Ó¦¼±¿ªËø
 517   5                     Emergency_open_G = ~Emergency_open_G;
 518   5                     ID_certificated_flag = 1;
 519   5                     never_alarm_speech = 1;
 520   5                     
 521   5                     Silence_Flag = 0;
 522   5                     ID_certificated_numbers = 0;
 523   5                     }
 524   4                  }
 525   3               #endif
 526   3               #ifdef WX
                       else if(data_count == 5)
                          {
                          receive_data_finished_flag = 1;
                          data_count = 0;
                          }        
                       #endif
 533   3               else
 534   3                  {
 535   4                  data_count = 0;
 536   4                  }
 537   3      
 538   3               #ifdef WX
                       if(receive_data_finished_flag == 1)
                          {
                          receive_data_finished_flag  = 0;
                          switch(received_data_buffer[5])
                             {
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 10  

                             case ComMode_1:
                                {
                                ID_certificated_flag = 1;
                                After_IDcert_timecount = 0;
                                IDkey_speech_flash = 1;
                                IDcerted_speech();
                                slave_nearby_count = 0;
                                }
                             break;
              
                             case ComMode_11:
                                {
                                Silence_Flag = 1;
                                Self_learn_speech();
                                }
                             break;
              
                             case ComMode_12:
                                {
                                Battery_hint_flag = 1;
                                }
                             break;
                             }
                          }
                       #endif
 569   3               }
 570   2            else
 571   2               {
 572   3               #ifdef ID
 573   3               if(++data_count >= 6)
 574   3                  {
 575   4                  data_count = 0;
 576   4                  IDkey_flash_EN = 1;
 577   4                  }
 578   3               #endif
 579   3      
 580   3               #ifdef WX
                       if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
                          {
                          data_count = 1;
                          }
                       else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
                          {
                          data_count = 2;
                          }
                       else if(data_count == 2)
                          {
                          data_count = 3;
                          }
                       else if(data_count == 3)
                          {
                          data_count = 4;
                          }
                       else if(data_count == 4)
                          {
                          data_count = 5;
                          }
                       else if(data_count == 5)
                          {
                          data_count = 6;
                          }
                       else if(data_count == 6)
C51 COMPILER V9.54   MAIN                                                                  11/15/2016 14:57:57 PAGE 11  

                          {
                          data_count = 0;
                          IDkey_flash_EN = 1;
                          ID_speech();
                          }
                       else
                          {
                          data_count = 0;
                          }
                       #endif
 616   3               }
 617   2            }
 618   1         }
 619          /*---------------------------------------------------
 620             end of file
 621          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    759    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     60    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     39    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
