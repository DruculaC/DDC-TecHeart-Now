C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - INCDIR(..\Library) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3          
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25          
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          /*------- Public variable definitions --------------------------*/
  32          bit ID_certificated_flag = 0;       // Flagged once ID card or Slave certificated successfully.
  33          tByte ID_certificated_numbers = 0;  // Numbers of ID certificated.
  34          
  35          bit Host_stolen_alarming = 0;       // Host stolen is alarming, don't detect vibration for 1st stage.
  36          
  37          // ------ Private variable definitions -----------------------------
  38          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  39          bit EN_host_stolen_alarming = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  40          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  41          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  42          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  43          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  44          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  45          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  46          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  47          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  48          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  49          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  50          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  52          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  53          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 2   

  54          
  55          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  56          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  57          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  58          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  59          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  60          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  61          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  62          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  63          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  64          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  65          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  66          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  67          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  68          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  69          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  70          tByte Open_action_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  71          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  72          tWord load_battery_result = 0;
  73          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  74          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  75          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  76          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  77          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  78          bit vibration_flag = 0;
  79          tWord vibration_count = 0;
  80          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  81          tByte After_IDcert_timecount = 0;      // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  82          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  83          bit sensor_3rdalarm_flag = 0;
  84          bit wheeled_flag = 0;
  85          tWord wheeled_count = 0;
  86          bit IDkey_speech_flash = 0;
  87          bit Emergency_open_G = 0;
  88          
  89          
  90          code tByte IDkey6 _at_ 0x003000;
  91          code tByte IDkey7 _at_ 0x003001;
  92          code tByte IDkey8 _at_ 0x003002;
  93          code tByte IDkey9 _at_ 0x003003;
  94          code tByte IDkey10 _at_ 0x003004;
  95          code tByte IDkey11 _at_ 0x003005;
  96          
  97          tWord IDkey_selflearn_HVcount = 0;
  98          tWord IDkey_selflearn_LVcount = 0;
  99          bit IDkey_selflearn_flag1 = 0;
 100          bit IDkey_selflearn_flag2 = 0;
 101          bit IDkey_selflearn_flag3 = 0;
 102          bit IDkey_selflearn_flag4 = 0;
 103          bit IDkey_selflearn_flag5 = 0;
 104          bit ID_selflearning_flag = 0;
 105          tByte ID_selflearning_timecount = 0;
 106          bit IDkey_flash_EN = 0;
 107          
 108          bit Silence_Flag = 0;
 109          bit flashing_flag = 0;
 110          
 111          tByte Check_Motobattery_count = 0;
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 3   

 112          bit Check_Motobattery_flag = 0;
 113          bit CheckADC_flag = 0;
 114          
 115          bit never_alarm = 0;
 116          bit never_alarm_speech = 0;
 117          
 118          bit slave_nearby_actioned_flag = 0;
 119          tByte slave_nearby_count = 0;
 120          
 121          bit ID_speeched_flag = 0;
 122          
 123          tByte Stolen_alarm_reset_count = 0;
 124          
 125          bit wire_broken_reset = 0;
 126          
 127          bit Just_power_up = 1;
 128          
 129          bit Battery_hint_flag = 0;
 130          
 131          bit Autolock_G = 0;
 132          tWord timer0_count2 = 0;
 133          
 134          /*------- Private variable declaratuions --------------------------*/
 135          
 136          void main()
 137             {
 138   1         InitVoice();
 139   1      
 140   1         // lock the external motor, prohibit motor moving when power up.
 141   1      // InitElecmotor();
 142   1      
 143   1         ID_speech();
 144   1      
 145   1         InitUART(BAUD9600);
 146   1      
 147   1         InitSensor();
 148   1      
 149   1         InitTransceiver();
 150   1      
 151   1         Externalmotor = Close;
 152   1         
 153   1         // ½«P0.1, P0.2ÉèÖÃ³ÉÊäÈë¸ß×èÄ£Ê½
 154   1         P0M1 |= 0x06;
 155   1         P0M2 &= 0xf9;
 156   1         // ½«P2.5£¬¼´PIN16ÉèÖÃ³ÉÊäÈë¸ß×èÄ£Ê½
 157   1         P2M1 |= 0x20;
 158   1         P2M2 &= 0xdf;
 159   1      
 160   1         Lock_EN = 1;
 161   1         Generator_lock = 0;
 162   1      
 163   1         while(1)
 164   1            {
 165   2            }
 166   1         }
 167          
 168          /*------------------------------------------------------------------
 169             timerT0()
 170             operation every ticket.
 171          --------------------------------------------------------------------*/
 172          
 173          void timer0() interrupt interrupt_timer_0_overflow
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 4   

 174             {
 175   1         // manually reload timer0 configuration
 176   1         TH0 = timer0_8H;
 177   1         TL0 = timer0_8L;
 178   1      
 179   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 180   1         if(++timer0_count >= 2000)
 181   1            {
 182   2            // reset timer0 ticket counter every 2s
 183   2            timer0_count=0;
 184   2      
 185   2      //    UART_Send_Data_match();
 186   2      
 187   2            #ifdef ID
 188   2            if((++timer0_count2 >= 100)&&(Autolock_G == 0))
 189   2               {
 190   3               Autolock_G = 1;
 191   3               }
 192   2            #endif
 193   2      /*----- Wire_cut detection ----------------------------------------*/
 194   2            if(sensor_EN == 1)
 195   2               {
 196   3               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 197   3               if(wire_broken == 0)
 198   3                  {
 199   4                  EN_host_stolen_alarming = 1;
 200   4                  host_stolen_alarm2_EN = 1;
 201   4                  Stolen_alarm_reset_count = 0;    
 202   4                  wire_broken_flag = 1;
 203   4                  }
 204   3               else if((wire_broken == 1)&&(wire_broken_flag == 1))
 205   3                  {
 206   4                  wire_broken_reset = 1;
 207   4                  wire_broken_flag = 0;            
 208   4                  ID_speech();
 209   4                  }
 210   3               }
 211   2      
 212   2      
 213   2      /*----- Accumulator relevantly ------------------------------------*/
 214   2            Check_motor_accumulator();
 215   2            Accumulator_voice_promot();
 216   2      
 217   2      /*----- Enable sensor ---------------------------------------------*/
 218   2            #ifdef ID
 219   2            ENsensor_afterIDcert();
 220   2            #endif
 221   2            // if no vibration and wheeled, decrease slave_nearby_count,
 222   2            // if more than 3 times, it means slave is away, then enable sensor.
 223   2            #ifdef WX
                    Ensensor_after_slave_away();
                    #endif      
 226   2      
 227   2            ENsensor_After_Close();
 228   2      
 229   2      /*----- Alarm relevantly -----------------------------------------*/
 230   2            #ifdef Z3
                    Fell_Alarm_to_Slave();
                    Raise_Alarm_to_Slave();
                    Batstolen_Alarm_to_Slave();
                    #endif
 235   2            Host_stolen_action();
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 5   

 236   2      
 237   2      /*----- Reset flag and disabling sensor relevantly --------------*/
 238   2            Disable_sensor_after_IDcert();
 239   2      
 240   2            Reset_after_wirebroken();
 241   2            Reset_after_stolen_alarming();
 242   2            SelfLearn_Reset();
 243   2            }
 244   1      
 245   1         // Voice hint for entering no guard mode,
 246   1         Enter_noguard_voice();
 247   1      
 248   1      /*----- Detectiong relevantly -----------------------------------*/
 249   1         Detect_selflearn_action();
 250   1         Detect_vibration();
 251   1         Detect_wheel_moving();
 252   1      
 253   1         Detect_open_action();
 254   1         Detect_close_action();
 255   1      
 256   1         if(Battery_hint_flag == 1)
 257   1            {
 258   2            Battery_hint_flag = 0;
 259   2            Battery_hint();
 260   2            }
 261   1      
 262   1      // judge host is fell or raised every 1ms?
 263   1      // if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 264   1      //    {
 265   1            // judge vibration sensor is enable?
 266   1            if(sensor_EN == 1)   
 267   1               {        
 268   2               // sensor trigger status, 0, 1 or 2?
 269   2               switch(sensor_trigger_count)
 270   2                  {
 271   3                  // case 0, it means host is in waiting status. waiting for first touch.
 272   3                  case 0:
 273   3                     {              
 274   4                     // judge host been touched and also not in vibration alarm
 275   4      //             if((sensor_detect == 0)&&(Host_stolen_alarming == 0)&&(transmiter_EN == 1))      
 276   4                     if(((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))&&(Host_stolen_alarming == 0
             -)&&(flashing_flag == 0)&&(transmiter_EN == 1))    
 277   4                        {
 278   5                        // judge LV is more than 2ms, if yes, it means a effective touch
 279   5                        if(++sensor_1ststage_count >= 1)       
 280   5                           {
 281   6                           sensor_1ststage_count=0;
 282   6                           
 283   6                           // sensor trigge status progress to case 1.
 284   6                           sensor_trigger_count = 1;
 285   6                           // alarm speech for first touch
 286   6      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 287   6      //                   host_touch_speech();
 288   6                           Delay_500ms();
 289   6                           Delay_500ms();
 290   6                           Delay_500ms();
 291   6                           Delay_500ms();
 292   6                           }
 293   5                        }
 294   4                     else
 295   4                        {
 296   5                        // if no LV, reset the count.
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 6   

 297   5                        sensor_1ststage_count = 0;
 298   5                        }
 299   4                     }
 300   3                  break;
 301   3                  
 302   3                  // waiting for next touch, 
 303   3                  case 1:
 304   3                     {
 305   4                     if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 306   4                        {
 307   5                        // LV for 2s, means a effective touch
 308   5                        if(++sensor_2ndstage_count >= 1)
 309   5                           {
 310   6                           sensor_2ndstage_count = 0;
 311   6                           sensor_trigger_count = 2;
 312   6                           // alarm speech for 2nd touch
 313   6      //                   host_2ndtouch_speech();
 314   6                           host_touch_speech();
 315   6                           }
 316   5                        }
 317   4                     else
 318   4                        {
 319   5                        sensor_2ndstage_count = 0;
 320   5                        }
 321   4                     
 322   4                     // if there is no touch in 4s, reset sensor trigger status, etc.
 323   4                     if(++sensor_2ndstage_time >= 4000)
 324   4                        {
 325   5                        sensor_trigger_count = 0;
 326   5                        sensor_2ndstage_count = 0;
 327   5                        sensor_1ststage_count = 0;
 328   5                        sensor_2ndstage_time = 0;
 329   5                        }
 330   4                     }
 331   3                  break;
 332   3                  
 333   3                  // waiting for 3rd touch
 334   3                  case 2:
 335   3                     {
 336   4                     if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 337   4                        {
 338   5                        // 2s LV is a effective touch
 339   5                        if(++sensor_3rdstage_count >= 3)
 340   5                           {
 341   6                           sensor_3rdstage_count = 0;
 342   6                           // stolen alarm speech enable
 343   6                           EN_host_stolen_alarming = 1;
 344   6                           host_stolen_alarm2_EN = 1; 
 345   6                           sensor_3rdalarm_flag = 1;  
 346   6                           Stolen_alarm_reset_count = 0;
 347   6                           }
 348   5                        }
 349   4                     else
 350   4                        {
 351   5                        sensor_3rdstage_count = 0;
 352   5                        }
 353   4                     
 354   4                     // if there is no touch in 4s, reset all.
 355   4                     if(++sensor_3rdstage_time >= 4000)
 356   4                        {
 357   5                        sensor_trigger_count = 0;
 358   5                        sensor_1ststage_count = 0;
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 7   

 359   5                        sensor_2ndstage_count = 0;
 360   5                        sensor_2ndstage_time = 0;
 361   5                        sensor_3rdstage_time = 0;
 362   5                        sensor_3rdstage_count = 0;
 363   5                        }
 364   4                     }
 365   3                  break;
 366   3                  }
 367   2               
 368   2               
 369   2               if(ADC_check_result < 0x100)
 370   2                  {
 371   3                  battery_stolen_EN = 1;
 372   3                  }
 373   2               else
 374   2                  battery_stolen_EN = 0;
 375   2               }
 376   1      //    }
 377   1         
 378   1         // judge whether position sensor is enable
 379   1         if(position_sensor_EN==1)     
 380   1            {
 381   2            // judge whether there is a LV
 382   2            if(raised_sensor_detect == 0) 
 383   2               {
 384   3               // LV > 0.5s means a effective input
 385   3               if(++raise_wire_time==10)
 386   3                  {
 387   4                  // flag raised, and reset fell
 388   4                  raised_flag=1;
 389   4                  fell_flag=0;
 390   4                  // judge whether there once been a raised or fell.
 391   4                  if(raised_fell_once_flag == 0)
 392   4                     {
 393   5                     // if no, flag raised and fell flag
 394   5                     raised_fell_flag = 1;               
 395   5                     }
 396   4                  }     
 397   3               }
 398   2            else
 399   2               {
 400   3               raised_flag=0;
 401   3               raised_alarm_count=0;
 402   3               raise_wire_time=0;
 403   3               raised_fell_flag = 0;
 404   3               }
 405   2            // judge whether there is a LV
 406   2            if(fell_sensor_detect==0)
 407   2               {
 408   3               // LV > 0.5s means a effective input
 409   3               if(++fell_wire_time==10)   
 410   3                  { 
 411   4                  //  flag fell, and reset raised
 412   4                  fell_flag=1;         
 413   4                  raised_flag=0;
 414   4                  // judge whether there once been a raised or fell
 415   4                  if(raised_fell_once_flag == 0)
 416   4                     {
 417   5                     raised_fell_flag = 1;               
 418   5                     }
 419   4                  }     
 420   3               }
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 8   

 421   2            else
 422   2               {
 423   3               fell_flag=0;
 424   3               fell_alarm_count=0;
 425   3               fell_wire_time=0;
 426   3               raised_fell_flag = 0;
 427   3               }
 428   2            }
 429   1         
 430   1         // judge whether raised or fell, if yes, reset all after 10s.
 431   1         if(raised_fell_flag == 1)
 432   1            {
 433   2            if(++raised_fell_number >= 4000)
 434   2               {
 435   3               raised_fell_flag = 0;
 436   3               raised_fell_number = 0;
 437   3               raised_fell_once_flag = 1;
 438   3               
 439   3               sensor_trigger_count = 0;
 440   3               sensor_1ststage_count = 0;
 441   3               sensor_2ndstage_count = 0;
 442   3               sensor_2ndstage_time = 0;
 443   3               sensor_3rdstage_time = 0;
 444   3               sensor_3rdstage_interval = 800;
 445   3               sensor_3rdstage_count = 0;
 446   3               sensor_3rdstage_effcount = 0;             
 447   3               }
 448   2            }
 449   1         }
 450          
 451          /*-----------------------------------------------
 452             UART interrupt
 453          -----------------------------------------------*/
 454          void uart_isr() interrupt 4 
 455             {
 456   1         if(RI)
 457   1            {
 458   2            RI=0;
 459   2            received_data_buffer[data_count] = SBUF;
 460   2      
 461   2            // assign one byte to buffer[i] 
 462   2            
 463   2            if(ID_selflearning_flag == 0)
 464   2               {
 465   3               // judge whether buffer[0] is CmdHead
 466   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 467   3                  {
 468   4                  data_count = 1;
 469   4                  }
 470   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 471   3                  {
 472   4                  data_count = 2;
 473   4                  }
 474   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 475   3                  {
 476   4                  data_count = 3;
 477   4                  }
 478   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 479   3                  {
 480   4                  data_count = 4;
 481   4                  }
 482   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 9   

 483   3                  {
 484   4                  data_count = 5;
 485   4                  }
 486   3               #ifdef ID
 487   3               else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
 488   3                  {
 489   4                  data_count = 0;
 490   4                  ID_certificated_flag = 1;
 491   4                  After_IDcert_timecount = 0;
 492   4                  IDkey_speech_flash = 1;
 493   4                  
 494   4                  IDcerted_speech();
 495   4                        
 496   4                  if(ID_certificated_numbers++ >= 1)
 497   4                     {
 498   5                     Silence_Flag = 1;
 499   5                     }
 500   4                  if(++ID_certificated_numbers >= 11)
 501   4                     {
 502   5                     //never_alarm = 1;
 503   5                     
 504   5                     // Ó¦¼±¿ªËø
 505   5                     Emergency_open_G = ~Emergency_open_G;
 506   5                     ID_certificated_flag = 1;
 507   5                     never_alarm_speech = 1;
 508   5                     
 509   5                     Silence_Flag = 0;
 510   5                     ID_certificated_numbers = 0;
 511   5                     }
 512   4                  }
 513   3               #endif
 514   3               #ifdef WX
                       else if(data_count == 5)
                          {
                          receive_data_finished_flag = 1;
                          data_count = 0;
                          }        
                       #endif
 521   3               else
 522   3                  {
 523   4                  data_count = 0;
 524   4                  }
 525   3      
 526   3               #ifdef WX
                       if(receive_data_finished_flag == 1)
                          {
                          receive_data_finished_flag  = 0;
                          switch(received_data_buffer[5])
                             {
                             case ComMode_1:
                                {
                                ID_certificated_flag = 1;
                                After_IDcert_timecount = 0;
                                IDkey_speech_flash = 1;
                                IDcerted_speech();
                                slave_nearby_count = 0;
                                }
                             break;
              
                             case ComMode_11:
                                {
                                Silence_Flag = 1;
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 10  

                                Self_learn_speech();
                                }
                             break;
              
                             case ComMode_12:
                                {
                                Battery_hint_flag = 1;
                                }
                             break;
                             }
                          }
                       #endif
 557   3               }
 558   2            else
 559   2               {
 560   3               #ifdef ID
 561   3               if(++data_count >= 6)
 562   3                  {
 563   4                  data_count = 0;
 564   4                  IDkey_flash_EN = 1;
 565   4                  }
 566   3               #endif
 567   3      
 568   3               #ifdef WX
                       if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
                          {
                          data_count = 1;
                          }
                       else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
                          {
                          data_count = 2;
                          }
                       else if(data_count == 2)
                          {
                          data_count = 3;
                          }
                       else if(data_count == 3)
                          {
                          data_count = 4;
                          }
                       else if(data_count == 4)
                          {
                          data_count = 5;
                          }
                       else if(data_count == 5)
                          {
                          data_count = 6;
                          }
                       else if(data_count == 6)
                          {
                          data_count = 0;
                          IDkey_flash_EN = 1;
                          ID_speech();
                          }
                       else
                          {
                          data_count = 0;
                          }
                       #endif
 604   3               }
 605   2            }
 606   1         }
C51 COMPILER V9.54   MAIN                                                                  09/06/2016 14:33:05 PAGE 11  

 607          /*---------------------------------------------------
 608             end of file
 609          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    916    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     59    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     38    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
