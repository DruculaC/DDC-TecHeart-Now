C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - INCDIR(..\Library) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3          
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25          
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          /*------- Public variable definitions --------------------------*/
  32          bit ID_certificated_flag = 0;       // Flagged once ID card or Slave certificated successfully.
  33          tByte ID_certificated_numbers = 0;  // Numbers of ID certificated.
  34          
  35          bit Host_stolen_alarming = 0;       // Host stolen is alarming, don't detect vibration for 1st stage.
  36          
  37          // ------ Private variable definitions -----------------------------
  38          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  39          bit EN_host_stolen_alarming = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  40          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  41          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  42          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  43          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  44          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  45          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  46          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  47          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  48          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  49          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  50          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  52          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  53          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 2   

  54          
  55          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  56          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  57          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  58          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  59          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  60          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  61          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  62          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  63          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  64          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  65          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  66          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  67          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  68          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  69          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  70          tByte Open_action_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  71          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  72          
  73          
  74          tWord load_battery_result = 0xfff;
  75          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  76          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  77          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  78          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  79          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  80          bit vibration_flag = 0;
  81          tWord vibration_count = 0;
  82          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  83          tByte After_IDcert_timecount = 0;      // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  84          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  85          bit sensor_3rdalarm_flag = 0;
  86          bit wheeled_flag = 0;
  87          tWord wheeled_count = 0;
  88          bit IDkey_speech_flash = 0;
  89          bit Emergency_open_G = 0;
  90          
  91          bit Speech_closed_G = 0;
  92          tByte Speech_closed_time = 0;
  93          
  94          code tByte IDkey6 _at_ 0x003000;
  95          code tByte IDkey7 _at_ 0x003001;
  96          code tByte IDkey8 _at_ 0x003002;
  97          code tByte IDkey9 _at_ 0x003003;
  98          code tByte IDkey10 _at_ 0x003004;
  99          code tByte IDkey11 _at_ 0x003005;
 100          
 101          tWord IDkey_selflearn_HVcount = 0;
 102          tWord IDkey_selflearn_LVcount = 0;
 103          bit IDkey_selflearn_flag1 = 0;
 104          bit IDkey_selflearn_flag2 = 0;
 105          bit IDkey_selflearn_flag3 = 0;
 106          bit IDkey_selflearn_flag4 = 0;
 107          bit IDkey_selflearn_flag5 = 0;
 108          bit ID_selflearning_flag = 0;
 109          tByte ID_selflearning_timecount = 0;
 110          bit IDkey_flash_EN = 0;
 111          
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 3   

 112          bit Silence_Flag = 0;
 113          bit flashing_flag = 0;
 114          
 115          tByte Check_Motobattery_count = 0;
 116          bit Check_Motobattery_flag = 0;
 117          bit CheckADC_flag = 0;
 118          
 119          bit never_alarm = 0;
 120          bit never_alarm_speech = 0;
 121          
 122          bit slave_nearby_actioned_flag = 0;
 123          tByte slave_nearby_count = 0;
 124          
 125          bit ID_speeched_flag = 0;
 126          
 127          tByte Stolen_alarm_reset_count = 0;
 128          
 129          bit wire_broken_reset = 0;
 130          
 131          bit Just_power_up = 1;
 132          
 133          bit Battery_hint_flag = 0;
 134          
 135          bit Autolock_G = 0;
 136          tWord timer0_count2 = 0;
 137          
 138          /*------- Private variable declaratuions --------------------------*/
 139          
 140          void main()
 141             {
 142   1         InitVoice();
 143   1      
 144   1         // lock the external motor, prohibit motor moving when power up.
 145   1      // InitElecmotor();
 146   1      
 147   1         ID_speech();
 148   1      
 149   1         InitUART(BAUD9600);
 150   1      
 151   1         InitSensor();
 152   1      
 153   1         InitTransceiver();
 154   1      
 155   1         Externalmotor = Close;
 156   1         
 157   1         // ½«P0.1, P0.2ÉèÖÃ³ÉÊäÈë¸ß×èÄ£Ê½
 158   1         P0M1 |= 0x06;
 159   1         P0M2 &= 0xf9;
 160   1         // ½«P2.5£¬¼´PIN16ÉèÖÃ³ÉÊäÈë¸ß×èÄ£Ê½
 161   1         P2M1 |= 0x20;
 162   1         P2M2 &= 0xdf;
 163   1      
 164   1         Lock_EN = 1;
 165   1         Generator_lock = 0;
 166   1      
 167   1         while(1)
 168   1            {
 169   2            }
 170   1         }
 171          
 172          /*------------------------------------------------------------------
 173             timerT0()
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 4   

 174             operation every ticket.
 175          --------------------------------------------------------------------*/
 176          
 177          void timer0() interrupt interrupt_timer_0_overflow
 178             {
 179   1         // manually reload timer0 configuration
 180   1         TH0 = timer0_8H;
 181   1         TL0 = timer0_8L;
 182   1      
 183   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 184   1         if(++timer0_count >= 2000)
 185   1            {
 186   2            // reset timer0 ticket counter every 2s
 187   2            timer0_count=0;
 188   2      
 189   2      //    UART_Send_Data_match();
 190   2      
 191   2            #ifdef ID
 192   2            if((++timer0_count2 >= 100)&&(Autolock_G == 0))
 193   2               {
 194   3               Autolock_G = 1;
 195   3               }
 196   2            #endif
 197   2      /*----- Wire_cut detection ----------------------------------------*/
 198   2            if(sensor_EN == 1)
 199   2               {
 200   3               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 201   3               if(wire_broken == 0)
 202   3                  {
 203   4                  EN_host_stolen_alarming = 1;
 204   4                  host_stolen_alarm2_EN = 1;
 205   4                  Stolen_alarm_reset_count = 0;    
 206   4                  wire_broken_flag = 1;
 207   4                  }
 208   3               else if((wire_broken == 1)&&(wire_broken_flag == 1))
 209   3                  {
 210   4                  wire_broken_reset = 1;
 211   4                  wire_broken_flag = 0;            
 212   4                  ID_speech();
 213   4                  }
 214   3               }
 215   2            
 216   2            if(Speech_closed_G == 1)
 217   2               {
 218   3               Speech_closed_time += 1;
 219   3               if(Speech_closed_time > 2)
 220   3                  {
 221   4                  Speech_closed_time = 0;
 222   4                  voice_EN = 0;
 223   4                  }
 224   3               }
 225   2      
 226   2      /*----- Accumulator relevantly ------------------------------------*/
 227   2            Check_motor_accumulator();
 228   2            Accumulator_voice_promot();
 229   2      
 230   2      /*----- Enable sensor ---------------------------------------------*/
 231   2            #ifdef ID
 232   2            ENsensor_afterIDcert();
 233   2            #endif
 234   2            // if no vibration and wheeled, decrease slave_nearby_count,
 235   2            // if more than 3 times, it means slave is away, then enable sensor.
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 5   

 236   2            #ifdef WX
                    Ensensor_after_slave_away();
                    #endif      
 239   2      
 240   2            ENsensor_After_Close();
 241   2      
 242   2      /*----- Alarm relevantly -----------------------------------------*/
 243   2            #ifdef Z3
                    Fell_Alarm_to_Slave();
                    Raise_Alarm_to_Slave();
                    Batstolen_Alarm_to_Slave();
                    #endif
 248   2            Host_stolen_action();
 249   2      
 250   2      /*----- Reset flag and disabling sensor relevantly --------------*/
 251   2            Disable_sensor_after_IDcert();
 252   2      
 253   2            Reset_after_wirebroken();
 254   2            Reset_after_stolen_alarming();
 255   2            SelfLearn_Reset();
 256   2            }
 257   1      
 258   1         // Voice hint for entering no guard mode,
 259   1         Enter_noguard_voice();
 260   1      
 261   1      /*----- Detectiong relevantly -----------------------------------*/
 262   1         Detect_selflearn_action();
 263   1         Detect_vibration();
 264   1         Detect_wheel_moving();
 265   1      
 266   1         Detect_open_action();
 267   1         Detect_close_action();
 268   1      
 269   1         if(Battery_hint_flag == 1)
 270   1            {
 271   2            Battery_hint_flag = 0;
 272   2            Battery_hint();
 273   2            }
 274   1      
 275   1      // judge host is fell or raised every 1ms?
 276   1      // if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 277   1      //    {
 278   1            // judge vibration sensor is enable?
 279   1            if(sensor_EN == 1)   
 280   1               {        
 281   2               // sensor trigger status, 0, 1 or 2?
 282   2               switch(sensor_trigger_count)
 283   2                  {
 284   3                  // case 0, it means host is in waiting status. waiting for first touch.
 285   3                  case 0:
 286   3                     {              
 287   4                     // judge host been touched and also not in vibration alarm
 288   4      //             if((sensor_detect == 0)&&(Host_stolen_alarming == 0)&&(transmiter_EN == 1))      
 289   4                     if(((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))&&(Host_stolen_alarming == 0
             -)&&(flashing_flag == 0)&&(transmiter_EN == 1))    
 290   4                        {
 291   5                        // judge LV is more than 2ms, if yes, it means a effective touch
 292   5                        if(++sensor_1ststage_count >= 1)       
 293   5                           {
 294   6                           sensor_1ststage_count=0;
 295   6                           
 296   6                           // sensor trigge status progress to case 1.
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 6   

 297   6                           sensor_trigger_count = 1;
 298   6                           // alarm speech for first touch
 299   6      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 300   6      //                   host_touch_speech();
 301   6                           Delay_500ms();
 302   6                           Delay_500ms();
 303   6                           Delay_500ms();
 304   6                           Delay_500ms();
 305   6                           }
 306   5                        }
 307   4                     else
 308   4                        {
 309   5                        // if no LV, reset the count.
 310   5                        sensor_1ststage_count = 0;
 311   5                        }
 312   4                     }
 313   3                  break;
 314   3                  
 315   3                  // waiting for next touch, 
 316   3                  case 1:
 317   3                     {
 318   4                     if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 319   4                        {
 320   5                        // LV for 2s, means a effective touch
 321   5                        if(++sensor_2ndstage_count >= 1)
 322   5                           {
 323   6                           sensor_2ndstage_count = 0;
 324   6                           sensor_trigger_count = 2;
 325   6                           // alarm speech for 2nd touch
 326   6      //                   host_2ndtouch_speech();
 327   6                           host_touch_speech();
 328   6                           }
 329   5                        }
 330   4                     else
 331   4                        {
 332   5                        sensor_2ndstage_count = 0;
 333   5                        }
 334   4                     
 335   4                     // if there is no touch in 4s, reset sensor trigger status, etc.
 336   4                     if(++sensor_2ndstage_time >= 4000)
 337   4                        {
 338   5                        sensor_trigger_count = 0;
 339   5                        sensor_2ndstage_count = 0;
 340   5                        sensor_1ststage_count = 0;
 341   5                        sensor_2ndstage_time = 0;
 342   5                        }
 343   4                     }
 344   3                  break;
 345   3                  
 346   3                  // waiting for 3rd touch
 347   3                  case 2:
 348   3                     {
 349   4                     if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 350   4                        {
 351   5                        // 2s LV is a effective touch
 352   5                        if(++sensor_3rdstage_count >= 3)
 353   5                           {
 354   6                           sensor_3rdstage_count = 0;
 355   6                           // stolen alarm speech enable
 356   6                           EN_host_stolen_alarming = 1;
 357   6                           host_stolen_alarm2_EN = 1; 
 358   6                           sensor_3rdalarm_flag = 1;  
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 7   

 359   6                           Stolen_alarm_reset_count = 0;
 360   6                           }
 361   5                        }
 362   4                     else
 363   4                        {
 364   5                        sensor_3rdstage_count = 0;
 365   5                        }
 366   4                     
 367   4                     // if there is no touch in 4s, reset all.
 368   4                     if(++sensor_3rdstage_time >= 4000)
 369   4                        {
 370   5                        sensor_trigger_count = 0;
 371   5                        sensor_1ststage_count = 0;
 372   5                        sensor_2ndstage_count = 0;
 373   5                        sensor_2ndstage_time = 0;
 374   5                        sensor_3rdstage_time = 0;
 375   5                        sensor_3rdstage_count = 0;
 376   5                        }
 377   4                     }
 378   3                  break;
 379   3                  }
 380   2               
 381   2               
 382   2               if(ADC_check_result < 0x100)
 383   2                  {
 384   3                  battery_stolen_EN = 1;
 385   3                  }
 386   2               else
 387   2                  battery_stolen_EN = 0;
 388   2               }
 389   1      //    }
 390   1         
 391   1         // judge whether position sensor is enable
 392   1         if(position_sensor_EN==1)     
 393   1            {
 394   2            // judge whether there is a LV
 395   2            if(raised_sensor_detect == 0) 
 396   2               {
 397   3               // LV > 0.5s means a effective input
 398   3               if(++raise_wire_time==10)
 399   3                  {
 400   4                  // flag raised, and reset fell
 401   4                  raised_flag=1;
 402   4                  fell_flag=0;
 403   4                  // judge whether there once been a raised or fell.
 404   4                  if(raised_fell_once_flag == 0)
 405   4                     {
 406   5                     // if no, flag raised and fell flag
 407   5                     raised_fell_flag = 1;               
 408   5                     }
 409   4                  }     
 410   3               }
 411   2            else
 412   2               {
 413   3               raised_flag=0;
 414   3               raised_alarm_count=0;
 415   3               raise_wire_time=0;
 416   3               raised_fell_flag = 0;
 417   3               }
 418   2            // judge whether there is a LV
 419   2            if(fell_sensor_detect==0)
 420   2               {
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 8   

 421   3               // LV > 0.5s means a effective input
 422   3               if(++fell_wire_time==10)   
 423   3                  { 
 424   4                  //  flag fell, and reset raised
 425   4                  fell_flag=1;         
 426   4                  raised_flag=0;
 427   4                  // judge whether there once been a raised or fell
 428   4                  if(raised_fell_once_flag == 0)
 429   4                     {
 430   5                     raised_fell_flag = 1;               
 431   5                     }
 432   4                  }     
 433   3               }
 434   2            else
 435   2               {
 436   3               fell_flag=0;
 437   3               fell_alarm_count=0;
 438   3               fell_wire_time=0;
 439   3               raised_fell_flag = 0;
 440   3               }
 441   2            }
 442   1         
 443   1         // judge whether raised or fell, if yes, reset all after 10s.
 444   1         if(raised_fell_flag == 1)
 445   1            {
 446   2            if(++raised_fell_number >= 4000)
 447   2               {
 448   3               raised_fell_flag = 0;
 449   3               raised_fell_number = 0;
 450   3               raised_fell_once_flag = 1;
 451   3               
 452   3               sensor_trigger_count = 0;
 453   3               sensor_1ststage_count = 0;
 454   3               sensor_2ndstage_count = 0;
 455   3               sensor_2ndstage_time = 0;
 456   3               sensor_3rdstage_time = 0;
 457   3               sensor_3rdstage_interval = 800;
 458   3               sensor_3rdstage_count = 0;
 459   3               sensor_3rdstage_effcount = 0;             
 460   3               }
 461   2            }
 462   1         }
 463          
 464          /*-----------------------------------------------
 465             UART interrupt
 466          -----------------------------------------------*/
 467          void uart_isr() interrupt 4 
 468             {
 469   1         if(RI)
 470   1            {
 471   2            RI=0;
 472   2            received_data_buffer[data_count] = SBUF;
 473   2      
 474   2            // assign one byte to buffer[i] 
 475   2            
 476   2            if(ID_selflearning_flag == 0)
 477   2               {
 478   3               // judge whether buffer[0] is CmdHead
 479   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 480   3                  {
 481   4                  data_count = 1;
 482   4                  }
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 9   

 483   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 484   3                  {
 485   4                  data_count = 2;
 486   4                  }
 487   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 488   3                  {
 489   4                  data_count = 3;
 490   4                  }
 491   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 492   3                  {
 493   4                  data_count = 4;
 494   4                  }
 495   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 496   3                  {
 497   4                  data_count = 5;
 498   4                  }
 499   3               #ifdef ID
 500   3               else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
 501   3                  {
 502   4                  data_count = 0;
 503   4                  ID_certificated_flag = 1;
 504   4                  After_IDcert_timecount = 0;
 505   4                  IDkey_speech_flash = 1;
 506   4                  
 507   4                  IDcerted_speech();
 508   4                        
 509   4                  if(ID_certificated_numbers++ >= 1)
 510   4                     {
 511   5                     Silence_Flag = 1;
 512   5                     }
 513   4                  if(++ID_certificated_numbers >= 11)
 514   4                     {
 515   5                     //never_alarm = 1;
 516   5                     
 517   5                     // Ó¦¼±¿ªËø
 518   5                     Emergency_open_G = ~Emergency_open_G;
 519   5                     ID_certificated_flag = 1;
 520   5                     never_alarm_speech = 1;
 521   5                     
 522   5                     Silence_Flag = 0;
 523   5                     ID_certificated_numbers = 0;
 524   5                     }
 525   4                  }
 526   3               #endif
 527   3               #ifdef WX
                       else if(data_count == 5)
                          {
                          receive_data_finished_flag = 1;
                          data_count = 0;
                          }        
                       #endif
 534   3               else
 535   3                  {
 536   4                  data_count = 0;
 537   4                  }
 538   3      
 539   3               #ifdef WX
                       if(receive_data_finished_flag == 1)
                          {
                          receive_data_finished_flag  = 0;
                          switch(received_data_buffer[5])
                             {
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 10  

                             case ComMode_1:
                                {
                                ID_certificated_flag = 1;
                                After_IDcert_timecount = 0;
                                IDkey_speech_flash = 1;
                                IDcerted_speech();
                                slave_nearby_count = 0;
                                }
                             break;
              
                             case ComMode_11:
                                {
                                Silence_Flag = 1;
                                Self_learn_speech();
                                }
                             break;
              
                             case ComMode_12:
                                {
                                Battery_hint_flag = 1;
                                }
                             break;
                             }
                          }
                       #endif
 570   3               }
 571   2            else
 572   2               {
 573   3               #ifdef ID
 574   3               if(++data_count >= 6)
 575   3                  {
 576   4                  data_count = 0;
 577   4                  IDkey_flash_EN = 1;
 578   4                  }
 579   3               #endif
 580   3      
 581   3               #ifdef WX
                       if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
                          {
                          data_count = 1;
                          }
                       else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
                          {
                          data_count = 2;
                          }
                       else if(data_count == 2)
                          {
                          data_count = 3;
                          }
                       else if(data_count == 3)
                          {
                          data_count = 4;
                          }
                       else if(data_count == 4)
                          {
                          data_count = 5;
                          }
                       else if(data_count == 5)
                          {
                          data_count = 6;
                          }
                       else if(data_count == 6)
C51 COMPILER V9.54   MAIN                                                                  10/18/2016 11:28:10 PAGE 11  

                          {
                          data_count = 0;
                          IDkey_flash_EN = 1;
                          ID_speech();
                          }
                       else
                          {
                          data_count = 0;
                          }
                       #endif
 617   3               }
 618   2            }
 619   1         }
 620          /*---------------------------------------------------
 621             end of file
 622          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    934    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     60    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     39    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
