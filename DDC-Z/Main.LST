C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Li
                    -brary) DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          /*------- Public variable definitions --------------------------*/
  32          bit ID_certificated_flag = 0;       // Flagged once ID card or Slave certificated successfully.
  33          tByte ID_certificated_numbers = 0;  // Numbers of ID certificated.
  34          
  35          bit Host_stolen_alarming = 0;       // Host stolen is alarming, don't detect vibration for 1st stage.
  36          
  37          // ------ Private variable definitions -----------------------------
  38          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  39          bit EN_host_stolen_alarming = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  40          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  41          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  42          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  43          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  44          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  45          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  46          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  47          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  48          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  49          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  50          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  52          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  53          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 2   

  54          
  55          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  56          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  57          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  58          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  59          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  60          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  61          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  62          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  63          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  64          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  65          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  66          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  67          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  68          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  69          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  70          tByte Open_action_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  71          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  72          tWord load_battery_result = 0;
  73          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  74          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  75          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  76          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  77          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  78          bit vibration_flag = 0;
  79          tWord vibration_count = 0;
  80          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  81          tByte After_IDcert_timecount = 0;      // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  82          tByte enable_sensor_delay_count = 0;      // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  83          bit sensor_3rdalarm_flag = 0;
  84          bit wheeled_flag = 0;
  85          tWord wheeled_count = 0;
  86          bit IDkey_speech_flash = 0;
  87          
  88          code tByte IDkey6 _at_ 0x003000;
  89          code tByte IDkey7 _at_ 0x003001;
  90          code tByte IDkey8 _at_ 0x003002;
  91          code tByte IDkey9 _at_ 0x003003;
  92          code tByte IDkey10 _at_ 0x003004;
  93          code tByte IDkey11 _at_ 0x003005;
  94          
  95          tWord IDkey_selflearn_HVcount = 0;
  96          tWord IDkey_selflearn_LVcount = 0;
  97          bit IDkey_selflearn_flag1 = 0;
  98          bit IDkey_selflearn_flag2 = 0;
  99          bit IDkey_selflearn_flag3 = 0;
 100          bit IDkey_selflearn_flag4 = 0;
 101          bit IDkey_selflearn_flag5 = 0;
 102          bit ID_selflearning_flag = 0;
 103          tByte ID_selflearning_timecount = 0;
 104          bit IDkey_flash_EN = 0;
 105          
 106          bit Silence_Flag = 0;
 107          bit flashing_flag = 0;
 108          
 109          tByte Check_Motobattery_count = 0;
 110          bit Check_Motobattery_flag = 0;
 111          bit CheckADC_flag = 0;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 3   

 112          
 113          bit never_alarm = 0;
 114          bit never_alarm_speech = 0;
 115          
 116          bit slave_nearby_actioned_flag = 0;
 117          tByte slave_nearby_count = 0;
 118          
 119          bit ID_speeched_flag = 0;
 120          
 121          tByte Stolen_alarm_reset_count = 0;
 122          
 123          bit wire_broken_reset = 0;
 124          
 125          bit Just_power_up = 1;
 126          
 127          bit Battery_hint_flag = 0;
 128          
 129          /*------- Private variable declaratuions --------------------------*/
 130          
 131          void main()
 132             {
 133   1         InitVoice();
 134   1         
 135   1         #ifdef ID
                 InitUART(BAUD9600);
                 #endif   
 138   1         #ifdef WX
 139   1         InitUART(BAUD1200);
 140   1         #endif
 141   1         
 142   1         InitSensor();
 143   1         
 144   1         InitTransceiver();
 145   1         
 146   1         // lock the external motor, prohibit motor moving when power up.
 147   1         InitElecmotor();  
 148   1        
 149   1         Externalmotor = Close;
 150   1         
 151   1         while(1)
 152   1            {     
 153   2            }
 154   1         }
 155          
 156          /*------------------------------------------------------------------
 157             timerT0()
 158             operation every ticket.
 159          --------------------------------------------------------------------*/
 160          
 161          void timer0() interrupt interrupt_timer_0_overflow
 162             {
 163   1         // manually reload timer0 configuration
 164   1         TH0 = timer0_8H;
 165   1         TL0 = timer0_8L;
 166   1      
 167   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 168   1         if(++timer0_count >= 2000)
 169   1            {
 170   2            // reset timer0 ticket counter every 2s
 171   2            timer0_count=0;
 172   2            
 173   2            #ifdef Z2
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 4   

                    if(Lock_EN == 1)
                       {
                       ID_certificated_flag = 1;
                       After_IDcert_timecount = 0;
                       IDkey_speech_flash = 1;
                       IDcerted_speech();
                       slave_nearby_count = 0;
                       }
                    #endif
 183   2      
 184   2      /*----- Accumulator relevantly ------------------------------------*/
 185   2            Check_motor_accumulator();    
 186   2            Accumulator_voice_promot();
 187   2      
 188   2      /*----- Enable sensor ---------------------------------------------*/
 189   2            #ifdef ID
                    ENsensor_afterIDcert();
                    #endif
 192   2            // if no vibration and wheeled, decrease slave_nearby_count,
 193   2            // if more than 3 times, it means slave is away, then enable sensor.
 194   2            #ifdef WX
 195   2            Ensensor_after_slave_away();
 196   2            #endif      
 197   2            
 198   2            ENsensor_After_Close();
 199   2      
 200   2      /*----- Alarm relevantly -----------------------------------------*/    
 201   2            #ifdef Z3
 202   2            Fell_Alarm_to_Slave();
 203   2            Raise_Alarm_to_Slave();
 204   2            Batstolen_Alarm_to_Slave();
 205   2            #endif      
 206   2            Host_stolen_action();
 207   2      
 208   2      /*----- Reset flag and disabling sensor relevantly --------------*/
 209   2            Disable_sensor_after_IDcert();      
 210   2      
 211   2            Reset_after_wirebroken();
 212   2            Reset_after_stolen_alarming();
 213   2            SelfLearn_Reset();               
 214   2            }  
 215   1         
 216   1         // Voice hint for entering no guard mode, 
 217   1         Enter_noguard_voice();
 218   1      
 219   1      /*----- Detectiong relevantly -----------------------------------*/
 220   1         Detect_selflearn_action();
 221   1         Detect_vibration();
 222   1         Detect_wheel_moving();
 223   1      
 224   1         Detect_open_action();
 225   1         Detect_close_action();
 226   1         
 227   1         if(Battery_hint_flag == 1)
 228   1            {
 229   2            Battery_hint_flag = 0;
 230   2            Battery_hint();
 231   2            }
 232   1         
 233   1      // judge host is fell or raised every 1ms?
 234   1      // if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 235   1      //    {
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 5   

 236   1            // judge vibration sensor is enable?
 237   1            if(sensor_EN == 1)   
 238   1               {        
 239   2               // sensor trigger status, 0, 1 or 2?
 240   2               switch(sensor_trigger_count)
 241   2                  {
 242   3                  // case 0, it means host is in waiting status. waiting for first touch.
 243   3                  case 0:
 244   3                     {              
 245   4                     // judge host been touched and also not in vibration alarm
 246   4      //             if((sensor_detect == 0)&&(Host_stolen_alarming == 0)&&(transmiter_EN == 1))      
 247   4                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(Host_stolen_alarming == 0)&&(flashing_flag == 0
             -)&&(transmiter_EN == 1))     
 248   4                        {
 249   5                        // judge LV is more than 2ms, if yes, it means a effective touch
 250   5                        if(++sensor_1ststage_count >= 1)       
 251   5                           {
 252   6                           sensor_1ststage_count=0;
 253   6                           
 254   6                           // sensor trigge status progress to case 1.
 255   6                           sensor_trigger_count = 1;
 256   6                           // alarm speech for first touch
 257   6      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 258   6      //                   host_touch_speech();
 259   6                           Delay_500ms();
 260   6                           Delay_500ms();
 261   6                           Delay_500ms();
 262   6                           Delay_500ms();
 263   6                           }
 264   5                        }
 265   4                     else
 266   4                        {
 267   5                        // if no LV, reset the count.
 268   5                        sensor_1ststage_count = 0;
 269   5                        }
 270   4                     }
 271   3                  break;
 272   3                  
 273   3                  // waiting for next touch, 
 274   3                  case 1:
 275   3                     {
 276   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 277   4                        {
 278   5                        // LV for 2s, means a effective touch
 279   5                        if(++sensor_2ndstage_count >= 1)
 280   5                           {
 281   6                           sensor_2ndstage_count = 0;
 282   6                           sensor_trigger_count = 2;
 283   6                           // alarm speech for 2nd touch
 284   6      //                   SCH_Add_Task(host_2ndtouch_speech, 0, 0);
 285   6                           host_touch_speech();
 286   6                           }
 287   5                        }
 288   4                     else
 289   4                        {
 290   5                        sensor_2ndstage_count = 0;
 291   5                        }
 292   4                     
 293   4                     // if there is no touch in 4s, reset sensor trigger status, etc.
 294   4                     if(++sensor_2ndstage_time >= 4000)
 295   4                        {
 296   5                        sensor_trigger_count = 0;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 6   

 297   5                        sensor_2ndstage_count = 0;
 298   5                        sensor_1ststage_count = 0;
 299   5                        sensor_2ndstage_time = 0;
 300   5                        }
 301   4                     }
 302   3                  break;
 303   3                  
 304   3                  // waiting for 3rd touch
 305   3                  case 2:
 306   3                     {
 307   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 308   4                        {
 309   5                        // 2s LV is a effective touch
 310   5                        if(++sensor_3rdstage_count >= 1)
 311   5                           {
 312   6                           sensor_3rdstage_count = 0;
 313   6                           // stolen alarm speech enable
 314   6                           EN_host_stolen_alarming = 1;
 315   6                           host_stolen_alarm2_EN = 1; 
 316   6                           sensor_3rdalarm_flag = 1;  
 317   6                           Stolen_alarm_reset_count = 0;
 318   6                           }
 319   5                        }
 320   4                     else
 321   4                        {
 322   5                        sensor_3rdstage_count = 0;
 323   5                        }
 324   4                     
 325   4                     // if there is no touch in 4s, reset all.
 326   4                     if(++sensor_3rdstage_time >= 4000)
 327   4                        {
 328   5                        sensor_trigger_count = 0;
 329   5                        sensor_1ststage_count = 0;
 330   5                        sensor_2ndstage_count = 0;
 331   5                        sensor_2ndstage_time = 0;
 332   5                        sensor_3rdstage_time = 0;
 333   5                        sensor_3rdstage_count = 0;
 334   5                        }
 335   4                     }
 336   3                  break;
 337   3                  }
 338   2               
 339   2               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 340   2               if(wire_broken == 0)
 341   2                  {
 342   3                  EN_host_stolen_alarming = 1;
 343   3                  host_stolen_alarm2_EN = 1;
 344   3                  Stolen_alarm_reset_count = 0;    
 345   3                  wire_broken_flag = 1;
 346   3                  }
 347   2               else if((wire_broken == 1)&&(wire_broken_flag == 1))
 348   2                  {
 349   3                  wire_broken_reset = 1;
 350   3                  wire_broken_flag = 0;            
 351   3                  ID_speech();
 352   3                  }
 353   2               
 354   2               
 355   2               if(ADC_check_result < 0x100)
 356   2                  {
 357   3                  battery_stolen_EN = 1;
 358   3                  }
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 7   

 359   2               else
 360   2                  battery_stolen_EN = 0;
 361   2               }
 362   1      //    }
 363   1         
 364   1         // judge whether position sensor is enable
 365   1         if(position_sensor_EN==1)     
 366   1            {
 367   2            // judge whether there is a LV
 368   2            if(raised_sensor_detect == 0) 
 369   2               {
 370   3               // LV > 0.5s means a effective input
 371   3               if(++raise_wire_time==10)
 372   3                  {
 373   4                  // flag raised, and reset fell
 374   4                  raised_flag=1;
 375   4                  fell_flag=0;
 376   4                  // judge whether there once been a raised or fell.
 377   4                  if(raised_fell_once_flag == 0)
 378   4                     {
 379   5                     // if no, flag raised and fell flag
 380   5                     raised_fell_flag = 1;               
 381   5                     }
 382   4                  }     
 383   3               }
 384   2            else
 385   2               {
 386   3               raised_flag=0;
 387   3               raised_alarm_count=0;
 388   3               raise_wire_time=0;
 389   3               raised_fell_flag = 0;
 390   3               }
 391   2            // judge whether there is a LV
 392   2            if(fell_sensor_detect==0)
 393   2               {
 394   3               // LV > 0.5s means a effective input
 395   3               if(++fell_wire_time==10)   
 396   3                  {
 397   4                  // flag fell, and reset raised
 398   4                  fell_flag=1;         
 399   4                  raised_flag=0;
 400   4                  // judge whether there once been a raised or fell
 401   4                  if(raised_fell_once_flag == 0)
 402   4                     {
 403   5                     raised_fell_flag = 1;               
 404   5                     }
 405   4                  }     
 406   3               }
 407   2            else
 408   2               {
 409   3               fell_flag=0;
 410   3               fell_alarm_count=0;
 411   3               fell_wire_time=0;
 412   3               raised_fell_flag = 0;
 413   3               }
 414   2            }
 415   1         
 416   1         // judge whether raised or fell, if yes, reset all after 10s.
 417   1         if(raised_fell_flag == 1)
 418   1            {
 419   2            if(++raised_fell_number >= 4000)
 420   2               {
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 8   

 421   3               raised_fell_flag = 0;
 422   3               raised_fell_number = 0;
 423   3               raised_fell_once_flag = 1;
 424   3               
 425   3               sensor_trigger_count = 0;
 426   3               sensor_1ststage_count = 0;
 427   3               sensor_2ndstage_count = 0;
 428   3               sensor_2ndstage_time = 0;
 429   3               sensor_3rdstage_time = 0;
 430   3               sensor_3rdstage_interval = 800;
 431   3               sensor_3rdstage_count = 0;
 432   3               sensor_3rdstage_effcount = 0;             
 433   3               }
 434   2            }
 435   1         }
 436          
 437          /*-----------------------------------------------
 438             UART interrupt
 439          -----------------------------------------------*/
 440          void uart_isr() interrupt 4 
 441             {
 442   1         if(RI)
 443   1            {
 444   2            RI=0;
 445   2            received_data_buffer[data_count] = SBUF;
 446   2      
 447   2            // assign one byte to buffer[i] 
 448   2            
 449   2            if(ID_selflearning_flag == 0)
 450   2               {
 451   3               // judge whether buffer[0] is CmdHead
 452   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 453   3                  {
 454   4                  data_count = 1;
 455   4                  }
 456   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 457   3                  {
 458   4                  data_count = 2;
 459   4                  }
 460   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 461   3                  {
 462   4                  data_count = 3;
 463   4                  }
 464   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 465   3                  {
 466   4                  data_count = 4;
 467   4                  }
 468   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 469   3                  {
 470   4                  data_count = 5;
 471   4                  }
 472   3               #ifdef ID
                       else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
                          {
                          data_count = 0;   
                          ID_certificated_flag = 1;
                          After_IDcert_timecount = 0;
                          IDkey_speech_flash = 1;
                          
                          IDcerted_speech();
                                
                          if(ID_certificated_numbers++ >= 1)
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 9   

                             {
                             Silence_Flag = 1;
                             }
                          if(++ID_certificated_numbers >= 11)
                             {
                             never_alarm = 1;
                             never_alarm_speech = 1;
                             Silence_Flag = 0;
                             ID_certificated_numbers = 0;
                             }
                          }
                       #endif
 495   3               #ifdef WX
 496   3               else if(data_count == 5)
 497   3                  {
 498   4                  receive_data_finished_flag = 1;
 499   4                  data_count = 0;
 500   4                  }        
 501   3               #endif
 502   3               else 
 503   3                  {
 504   4                  data_count = 0;
 505   4                  }  
 506   3      
 507   3               #ifdef WX
 508   3               if(receive_data_finished_flag == 1)
 509   3                  {
 510   4                  receive_data_finished_flag  = 0;
 511   4                  switch(received_data_buffer[5])
 512   4                     {
 513   5                     case ComMode_1:
 514   5                        {
 515   6                        ID_certificated_flag = 1;
 516   6                        After_IDcert_timecount = 0;
 517   6                        IDkey_speech_flash = 1;
 518   6                        IDcerted_speech();
 519   6                        slave_nearby_count = 0;
 520   6                        }
 521   5                     break;
 522   5                     
 523   5                     case ComMode_11:
 524   5                        {
 525   6                        Silence_Flag = 1;
 526   6                        Self_learn_speech();
 527   6                        }
 528   5                     break;
 529   5                     
 530   5                     case ComMode_12:
 531   5                        {
 532   6                        Battery_hint_flag = 1;
 533   6                        }
 534   5                     break;
 535   5                     }
 536   4                  }
 537   3               #endif
 538   3               }
 539   2            else
 540   2               {        
 541   3               #ifdef ID
                       if(++data_count >= 6)
                          {
                          data_count = 0;
C51 COMPILER V9.54   MAIN                                                                  07/27/2015 10:11:47 PAGE 10  

                          IDkey_flash_EN = 1;
                          }
                       #endif
 548   3               
 549   3               #ifdef WX
 550   3               if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
 551   3                  {
 552   4                  data_count = 1;
 553   4                  }
 554   3               else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
 555   3                  {
 556   4                  data_count = 2;
 557   4                  }
 558   3               else if(data_count == 2)
 559   3                  {
 560   4                  data_count = 3;
 561   4                  }
 562   3               else if(data_count == 3)
 563   3                  {
 564   4                  data_count = 4;
 565   4                  }
 566   3               else if(data_count == 4)
 567   3                  {
 568   4                  data_count = 5;
 569   4                  }
 570   3               else if(data_count == 5)
 571   3                  {
 572   4                  data_count = 6;
 573   4                  }
 574   3               else if(data_count == 6)
 575   3                  {
 576   4                  data_count = 0;
 577   4                  IDkey_flash_EN = 1;
 578   4                  ID_speech();
 579   4                  }
 580   3               else 
 581   3                  {
 582   4                  data_count = 0;
 583   4                  }
 584   3               #endif
 585   3               }
 586   2            }
 587   1         }
 588          
 589          
 590          /*---------------------------------------------------
 591             end of file
 592          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    959    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     57    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     36    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
