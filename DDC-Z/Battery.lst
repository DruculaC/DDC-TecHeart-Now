C51 COMPILER V9.54   BATTERY                                                               09/06/2016 14:33:03 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE BATTERY
OBJECT MODULE PLACED IN .\Battery.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\Battery.c COMPACT ROM(COMPACT) OPTIMIZE(8
                    -,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\Battery.lst) TABS(3) OBJECT(.\Battery.obj)

line level    source

   1          /*---------------------------------------------------
   2             Battery.c (v1.00)
   3             Battery201603（70km60V）r1
   4          ---------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "Battery.h"
  10          #include "voice.h"
  11          #include "Delay.h"
  12          #include "AD.h"
  13          
  14          extern tWord ADC_check_result;      
  15          tByte Check2_stage = 0;
  16          tByte Battery_level = 0;
  17          
  18          /*----------------------------------------------------
  19             Check_motor_accumulator() - 48V 电平
  20             Check P20's voltage.
  21          -----------------------------------------------------*/
  22          void Check_motor_accumulator(void)
  23             {
  24   1         // detect the battery voltage
  25   1         ADC_check_result = GetADCResult(6);
  26   1         }
  27          
  28          /*----------------------------------------------------
  29             verifybattery()
  30             voice alarm for battery status with power module
  31          -----------------------------------------------------*/
  32          void verifybattery(tWord Check2)
  33             {  
  34   1         #ifdef Kilometer_65
  35   1         // 电量还能行驶
  36   1         voice_EN = 1;
  37   1         SC_Speech(8);     
  38   1         Delay(70);  
  39   1         // 多少
  40   1         if(Check2 < 0x237)
  41   1            {
  42   2            SC_Speech(13);       // 2
  43   2            Delay(30);
  44   2            }
  45   1         else if((Check2 >= 0x237)&&(Check2 < 0x242))
  46   1            {
  47   2            SC_Speech(16);       // 5
  48   2            Delay(30);
  49   2            }
  50   1         else if((Check2 >= 0x242)&&(Check2 < 0x250))
  51   1            {
  52   2            SC_Speech(21);       // 10
  53   2            Delay(30);
  54   2            }
C51 COMPILER V9.54   BATTERY                                                               09/06/2016 14:33:03 PAGE 2   

  55   1         else if((Check2 >= 0x250)&&(Check2 < 0x25f))
  56   1            {
  57   2            SC_Speech(21);       // 10
  58   2            Delay(30);
  59   2            SC_Speech(17);       // 6
  60   2            Delay(30);
  61   2            }
  62   1         else if((Check2 >= 0x25f)&&(Check2 < 0x267))
  63   1            {
  64   2            SC_Speech(13);       // 2
  65   2            Delay(30);
  66   2            SC_Speech(21);       // 10
  67   2            Delay(30);
  68   2            SC_Speech(13);       // 2
  69   2            Delay(30);
  70   2            }
  71   1         else if((Check2 >= 0x267)&&(Check2 < 0x26f))
  72   1            {
  73   2            SC_Speech(13);       // 2
  74   2            Delay(30);
  75   2            SC_Speech(21);       // 10
  76   2            Delay(30);
  77   2            SC_Speech(19);       // 8
  78   2            Delay(30);
  79   2            }
  80   1         else if((Check2 >= 0x26f)&&(Check2 < 0x279))
  81   1            {
  82   2            SC_Speech(14);       // 3
  83   2            Delay(30);
  84   2            SC_Speech(21);       // 10
  85   2            Delay(30);
  86   2            SC_Speech(15);       // 4
  87   2            Delay(30);
  88   2            }
  89   1         else if((Check2 >= 0x279)&&(Check2 < 0x282))
  90   1            {
  91   2            SC_Speech(15);       // 4
  92   2            Delay(30);
  93   2            SC_Speech(21);       // 10
  94   2            Delay(30);
  95   2            }
  96   1         else if((Check2 >= 0x282)&&(Check2 < 0x28a))
  97   1            {
  98   2            SC_Speech(15);       // 4
  99   2            Delay(30);
 100   2            SC_Speech(21);       // 10
 101   2            Delay(30);
 102   2            SC_Speech(17);       // 6
 103   2            Delay(30);
 104   2            }
 105   1         else if((Check2 >= 0x28a)&&(Check2 < 0x28e))
 106   1            {
 107   2            SC_Speech(16);       // 5
 108   2            Delay(30);
 109   2            SC_Speech(21);       // 10
 110   2            Delay(30);
 111   2            SC_Speech(13);       // 2
 112   2            Delay(30);
 113   2            }
 114   1         else if((Check2 >= 0x28e)&&(Check2 < 0x291))
 115   1            {
 116   2            SC_Speech(16);       // 5
C51 COMPILER V9.54   BATTERY                                                               09/06/2016 14:33:03 PAGE 3   

 117   2            Delay(30);
 118   2            SC_Speech(21);       // 10
 119   2            Delay(30);
 120   2            SC_Speech(19);       // 8
 121   2            Delay(30);
 122   2            }
 123   1         else if((Check2 >= 0x291)&&(Check2 < 0x293))
 124   1            {
 125   2            SC_Speech(17);       // 6
 126   2            Delay(30);
 127   2            SC_Speech(21);       // 10
 128   2            Delay(30);
 129   2            SC_Speech(15);       // 4
 130   2            Delay(30);
 131   2            }
 132   1         else if(Check2 >= 0x293)
 133   1            {
 134   2            SC_Speech(18);       // 7
 135   2            Delay(30);
 136   2            SC_Speech(21);       // 10
 137   2            Delay(30);
 138   2            }     
 139   1         // 公里
 140   1         SC_Speech(11);    
 141   1         Delay(60);  
 142   1         voice_EN = 0;
 143   1         SC_RST = 1;
 144   1         Delay_50ms();
 145   1         SC_RST = 0;
 146   1         Delay_50ms();
 147   1         #endif
 148   1         }
 149             
 150          /*---------------------------------------------------
 151             end of file
 152          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    557    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      2       2
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
