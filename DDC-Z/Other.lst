C51 COMPILER V9.54   OTHER                                                                 06/14/2017 16:44:53 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OTHER
OBJECT MODULE PLACED IN .\Other.obj
COMPILER INVOKED BY: D:\Program Files\Keil_v5\C51\BIN\C51.EXE ..\Library\Other.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) 
                    -BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\Other.lst) TABS(2) OBJECT(.\Other.obj)

line level    source

   1          /*---------------------------------------------------
   2            Other.c (v1.00)
   3            
   4            ∆‰À˚≥Ã–Ú
   5          ---------------------------------------------------*/
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "Other.h"
  11          #include "Delay.h"
  12          #include "communication.h"
  13          
  14          /*------- Public variable declarations --------------------------*/
  15          extern bit position_sensor_EN;      
  16          extern bit fell_flag;           
  17          extern bit raised_flag;         
  18          extern tByte sensor_trigger_count;  
  19          extern tByte sensor_1ststage_count; 
  20          extern tWord sensor_3rdstage_time;      
  21          extern tByte sensor_3rdstage_effcount;    
  22          extern tByte sensor_3rdstage_count;     
  23          extern tWord sensor_3rdstage_interval;    
  24          extern tWord sensor_2ndstage_time;    
  25          extern tByte sensor_2ndstage_count;   
  26          extern bit Host_stolen_alarming;          
  27          extern bit EN_host_stolen_alarming;      
  28          extern bit host_stolen_alarm2_EN;     
  29          extern tByte host_stolen_alarm1_count;    
  30          extern tByte host_stolen_alarm2_count;  
  31          extern bit raised_fell_flag;          
  32          extern bit wire_broken_flag;      
  33          extern tByte wire_broken_count;   
  34          extern bit battery_stolen_EN;     
  35          extern tByte battery_stolen_count;  
  36          extern bit sensor_EN;
  37          extern tByte enable_sensor_delay_count;   
  38          extern bit enable_sensor_delayEN;
  39          extern bit sensor_3rdalarm_flag;
  40          extern tByte Open_action_flag;    
  41          
  42          /*-------------------------------------------------------
  43            magnet_CW()
  44            µÁ¥≈Ã˙’˝◊™£¨À≥ ±’Î£¨Ω´À¯¥Úø™£¨
  45          --------------------------------------------------------*/
  46          void magnet_CW(tWord x, y, tByte z)
  47            {
  48   1        // ∑¢ÀÕø™À¯√‹¬Î
  49   1        send_code_to_lock(ComMode_1, z);
  50   1        
  51   1        MagentControl_1 = 1;
  52   1        MagentControl_2 = 0;
  53   1        Magnet_Delay(x, y);
  54   1        MagentControl_1 = 1;
C51 COMPILER V9.54   OTHER                                                                 06/14/2017 16:44:53 PAGE 2   

  55   1        MagentControl_2 = 1;
  56   1      //  Externalmotor = 0;
  57   1        }
  58          
  59          /*-------------------------------------------------------
  60            magnet_CW_Taili()
  61            µÁ¥≈Ã˙’˝◊™£¨À≥ ±’Î£¨Ω´À¯¥Úø™£¨
  62          void magnet_CW_Taili(tWord x, y, tByte z)
  63            {
  64            // ∑¢ÀÕø™À¯√‹¬Î
  65            send_code_to_lock_Taili(ComMode_1, z);
  66            
  67            MagentControl_1 = 1;
  68            MagentControl_2 = 0;
  69            Magnet_Delay(x, y);
  70            MagentControl_1 = 0;
  71            MagentControl_2 = 0;
  72          //  Externalmotor = 0;
  73            }
  74          --------------------------------------------------------*/
  75          
  76          /*-------------------------------------------------------
  77            magnet_ACW()
  78            µÁ¥≈Ã˙∑¥◊™£¨ƒÊ ±’Î£¨Ω´À¯πÿ±’
  79          --------------------------------------------------------*/
  80          void magnet_ACW(tWord x, y)
  81            {
  82   1      //  Externalmotor = 1;
  83   1        MagentControl_1 = 0;
  84   1        MagentControl_2 = 1;
  85   1        Magnet_Delay(x, y);
  86   1        MagentControl_1 = 1;
  87   1        MagentControl_2 = 1;
  88   1        }
  89          
  90          /*-------------------------------------------------------
  91            magnet_ACW_Taili()
  92            µÁ¥≈Ã˙∑¥◊™£¨ƒÊ ±’Î£¨Ω´À¯πÿ±’
  93          --------------------------------------------------------*/
  94          void magnet_ACW_Taili(tWord x, y)
  95            {
  96   1      //  Externalmotor = 1;
  97   1        MagentControl_1 = 0;
  98   1        MagentControl_2 = 1;
  99   1        Magnet_Delay(x, y);
 100   1        MagentControl_1 = 0;
 101   1        MagentControl_2 = 0;
 102   1        }
 103            
 104          /*----------------------------------------------------
 105            disable_sensor()
 106            ¥Úø™’Ò∂Ø¥´∏–∆˜∫Õ»˝÷·¥´∏–∆˜£¨≤¢Ω´∆‰∏¥Œª
 107          ----------------------------------------------------*/
 108          void disable_sensor(void)
 109            {
 110   1        // disable position sensor(vertical and horizontal) and vibration sensor
 111   1        position_sensor_EN = 0; 
 112   1        sensor_EN = 0;
 113   1        // reset all the flag in sensor
 114   1        fell_flag=0;  
 115   1        raised_flag=0;
 116   1        sensor_trigger_count = 0;
C51 COMPILER V9.54   OTHER                                                                 06/14/2017 16:44:53 PAGE 3   

 117   1        sensor_1ststage_count = 0;
 118   1        sensor_2ndstage_count = 0;
 119   1        sensor_2ndstage_time = 0;
 120   1        sensor_3rdstage_time = 0;
 121   1        sensor_3rdstage_interval = 0;
 122   1        sensor_3rdstage_count = 0;
 123   1        sensor_3rdstage_effcount = 0;
 124   1        Host_stolen_alarming = 0;
 125   1        sensor_3rdalarm_flag = 0;
 126   1        EN_host_stolen_alarming = 0;
 127   1        host_stolen_alarm1_count = 0;
 128   1        host_stolen_alarm2_EN = 0;
 129   1        host_stolen_alarm2_count = 0;
 130   1        
 131   1        raised_fell_flag = 0;
 132   1        
 133   1        // reset the wire broken count
 134   1        wire_broken_count = 0;
 135   1        wire_broken_flag = 0;
 136   1        
 137   1        enable_sensor_delayEN = 0;
 138   1        enable_sensor_delay_count = 0;
 139   1        // reset battery stolen
 140   1        battery_stolen_EN = 0;
 141   1        battery_stolen_count = 0; 
 142   1        
 143   1        if(Open_action_flag == 0)
 144   1          {
 145   2          // ÂÖ≥Èó≠‰º†ÊÑüÂô®ÁöÑÊó∂ÂÄôÂ∞ÜÁîµÊú∫ÈîÅÊ≠ªÂäüËÉΩÂÖ≥Èó≠„ÄÇ
 146   2          Externalmotor = 1;
 147   2          // ÂÖ≥Èó≠‰º†ÊÑüÂô®ÁöÑÊó∂ÂÄôÔºåÂ∞ÜÁîµÂä®ËΩ¶ÊéßÂà∂Âô®Êñ≠Áîµ„ÄÇ
 148   2          Generator_lock = 0;
 149   2          }
 150   1        }
 151            
 152          /*--------------------------------------------------------
 153            Enable_sensor()
 154          ---------------------------------------------------------*/
 155          void Enable_sensor(void)
 156            {
 157   1        // enable position sensor(vertical and horizontal) and vibration sensor
 158   1        position_sensor_EN = 1; 
 159   1        sensor_EN = 1;
 160   1        
 161   1        // reset relatively sensor count
 162   1        sensor_trigger_count = 0;
 163   1        sensor_1ststage_count = 0;  
 164   1        }
 165          
 166          /*----------------------------------------------------------------
 167            Moto_Vibration()
 168            ”√”⁄∏Ωª˙£¨¬Ì¥Ô’Ò∂Ø
 169          -----------------------------------------------------------------*/
 170          void Moto_Vibration(void)
 171            {
 172   1        Moto_EN=0;        
 173   1        Delay_500ms();
 174   1        Moto_EN=1;
 175   1        }
 176            
 177          /*---------------------------------------------------
 178            end of file
C51 COMPILER V9.54   OTHER                                                                 06/14/2017 16:44:53 PAGE 4   

 179          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    171    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----       4
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
