C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT ROM(COMPACT) OPTIMIZE
                    -(8,SPEED) BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          #include "ISP_DataFlash.h"
  18          
  19          /*------ private variable --------------------------*/
  20          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  21          
  22          bit sensor_EN = 0;
  23          
  24          tWord key_rotate_off_time = 0;
  25          tWord wire_broken_time = 0;
  26          tByte wire_broken_level = 0;
  27          
  28          bit vibration_flag1 = 0;
  29          tWord vibration_count1 = 0;
  30          
  31          /*------- Public variable declarations --------------------------*/
  32          extern bit position_sensor_EN;   
  33          extern bit fell_flag;                  
  34          extern bit raised_flag;          
  35          extern tByte sensor_trigger_count;  
  36          extern tByte sensor_1ststage_count; 
  37          extern bit raised_fell_once_flag;         
  38          extern bit raised_fell_flag;              
  39          extern bit EN_host_stolen_alarming;     
  40          extern bit host_stolen_alarm2_EN;      
  41          extern tByte host_stolen_alarm1_count;    
  42          extern tByte host_stolen_alarm2_count;    
  43          extern bit Host_stolen_alarming;             
  44          extern tWord sensor_3rdstage_time;        
  45          extern tByte sensor_3rdstage_effcount;    
  46          extern tByte sensor_3rdstage_count;       
  47          extern tWord sensor_3rdstage_interval;    
  48          extern tWord sensor_2ndstage_time;     
  49          extern tByte sensor_2ndstage_count;    
  50          extern tWord ADC_check_result;      
  51          extern tByte wire_broken_count;     
  52          extern bit wire_broken_flag;        
  53          extern bit battery_stolen_EN;       
  54          extern tByte battery_stolen_count;
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 2   

  55          extern bit sensor_3rdalarm_flag;
  56          extern tByte enable_sensor_delay_count;      
  57          extern bit Silence_Flag;
  58          extern tByte Open_action_flag;      
  59          extern tByte ID_certificated_numbers;
  60          extern bit ID_certificated_flag;       
  61          extern tByte After_IDcert_timecount;      
  62          extern bit never_alarm;
  63          extern bit IDkey_selflearn_flag1;
  64          extern bit IDkey_selflearn_flag2;
  65          extern bit IDkey_selflearn_flag3;
  66          extern bit IDkey_selflearn_flag4;
  67          extern bit IDkey_selflearn_flag5;
  68          extern bit ID_selflearning_flag;
  69          extern tByte ID_selflearning_timecount;
  70          extern tWord IDkey_selflearn_HVcount;
  71          extern tWord IDkey_selflearn_LVcount;
  72          extern tByte fell_alarm_count;
  73          extern tByte raised_alarm_count;
  74          extern tByte Check_Motobattery_count;
  75          extern bit Check_Motobattery_flag;
  76          extern tWord load_battery_result;
  77          extern bit ID_speeched_flag;
  78          extern bit slave_nearby_actioned_flag;
  79          extern bit IDkey_speech_flash;
  80          extern bit wire_broken_reset;
  81          extern tByte Stolen_alarm_reset_count;
  82          extern bit vibration_flag;
  83          extern tByte slave_nearby_count;
  84          extern bit wheeled_flag;
  85          extern bit IDkey_flash_EN;
  86          extern bit flashing_flag;
  87          extern tWord vibration_count;
  88          extern tWord wheeled_count;
  89          extern bit Just_power_up;
  90          
  91          /*-----------------------------------------
  92             slave_away_operation()
  93             
  94             operation for slave is away
  95          ------------------------------------------*/
  96          void slave_away_operation(void)
  97             {  
  98   1         if(Silence_Flag == 0)
  99   1            {
 100   2            close_lock_speech(); 
 101   2            load_battery_result = ADC_check_result;
 102   2            verifybattery(load_battery_result);
 103   2      
 104   2      //    Check_Motobattery_flag = 1;
 105   2      //    Check_Motobattery_count = 0;
 106   2            }
 107   1         // Enable_sensor();  
 108   1         enable_sensor_delayEN = 1;
 109   1         enable_sensor_delay_count = 0;
 110   1         // delay time, avoid sensor trigger on.
 111   1         Delay(20);
 112   1         ID_certificated_numbers = 0;
 113   1      
 114   1         if(Silence_Flag == 1)
 115   1            Silence_Flag = 0;
 116   1         }
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 3   

 117          
 118          /*----------------------------------------------------------------------
 119                slave_nearby_operation()
 120                operation for slave is nearby
 121          ----------------------------------------------------------------------*/
 122          void slave_nearby_operation(void)
 123             {
 124   1         slave_nearby_actioned_flag = 1;
 125   1         
 126   1         ID_speeched_flag = 0;      
 127   1         After_IDcert_timecount = 0;
 128   1         ID_certificated_flag = 0;
 129   1         ID_certificated_numbers = 0;     
 130   1      
 131   1         if(Silence_Flag == 0)
 132   1            {
 133   2            open_lock_speech();
 134   2            if(Just_power_up == 0)
 135   2               verifybattery(load_battery_result);
 136   2            key_rotate_on_speech();
 137   2            }
 138   1         }
 139          
 140          /*------------------------------------------------------------------
 141             InitSensor()
 142             Initialise Sensor.
 143          ------------------------------------------------------------------*/
 144          void InitSensor(void)
 145             {
 146   1         sensor_EN = 0;
 147   1         position_sensor_EN = 0;
 148   1         enable_sensor_delayEN = 0; 
 149   1         raised_sensor_detect = 1;
 150   1         fell_sensor_detect = 1; 
 151   1         }
 152             
 153          /*------------------------------------------------------------------
 154             Host_stolen_action()
 155             Determine host has been triggled 3 times, alarm action.
 156          ------------------------------------------------------------------*/
 157          void Host_stolen_action(void)
 158             {
 159   1         // if host has been touched 3 times, alarm 2 speeches alternantively.
 160   1         if(EN_host_stolen_alarming == 1)
 161   1            {
 162   2            Host_stolen_alarming = 1;
 163   2            
 164   2            stolen_alarm_speech1();
 165   2            stolen_alarm_speech2();
 166   2            #ifdef Z3
                    if(wire_broken_flag == 0)
                       {
                       UART_Send_Data(ComMode_3);                                                       
                       }
                    else
                       {                                                                     
                       UART_Send_Data(ComMode_6);                                                       
                       }
                    #endif
 176   2            }
 177   1         }
 178          
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 4   

 179          /*------------------------------------------------------------------
 180             ENsensor_afterIDcert()
 181             6s After ID certificated, enable sensor. 
 182             If ID certficated 6 times, don't enable sensor.
 183          ------------------------------------------------------------------*/
 184          void ENsensor_afterIDcert(void)
 185             {
 186   1         if(ID_certificated_flag == 1)
 187   1            {
 188   2            // 3 tickets after ID certificated.
 189   2            if(++After_IDcert_timecount >= 15)
 190   2               {
 191   3               ID_certificated_flag = 0;
 192   3               After_IDcert_timecount = 0;         
 193   3               ID_certificated_numbers = 0;
 194   3               
 195   3               // 
 196   3               if((Open_action_flag == 0)&&(never_alarm == 0))
 197   3                  {
 198   4                  Enable_sensor();              
 199   4                  }           
 200   3               never_alarm = 0;
 201   3               
 202   3               }        
 203   2            }
 204   1         }
 205          
 206          /*------------------------------------------------------------------
 207             ENsensor_After_Close()
 208          ------------------------------------------------------------------*/
 209          void ENsensor_After_Close(void)
 210             {
 211   1         if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 212   1            {
 213   2            if(++enable_sensor_delay_count >= 3)
 214   2               {
 215   3               enable_sensor_delay_count = 0;
 216   3               enable_sensor_delayEN = 0;
 217   3               if(never_alarm == 0)
 218   3                  Enable_sensor();
 219   3               }
 220   2            }  
 221   1         }
 222          
 223          /*-----------------------------------------------------------------
 224             SelfLearn_Reset()
 225             PIN22 triggles 3 times, the system enters selflearn mode
 226          ------------------------------------------------------------------*/
 227          void SelfLearn_Reset(void)
 228             {  
 229   1         if(ID_selflearning_flag == 1)
 230   1            {
 231   2            if(++ID_selflearning_timecount > 10)
 232   2               {
 233   3               ID_selflearning_flag = 0;
 234   3               ID_selflearning_timecount = 0;            
 235   3               // Reset relatively flag and count.
 236   3               IDkey_selflearn_HVcount = 0;
 237   3               IDkey_selflearn_LVcount = 0;
 238   3               IDkey_selflearn_flag1 = 0;
 239   3               IDkey_selflearn_flag2 = 0;
 240   3               IDkey_selflearn_flag3 = 0;
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 5   

 241   3               IDkey_selflearn_flag4 = 0;
 242   3               IDkey_selflearn_flag5 = 0;
 243   3               }        
 244   2            }
 245   1         }
 246          
 247          /*---------------------------------------------------
 248             Fell_Alarm_to_Slave()
 249             Send fell alarm signal to remote slave.
 250          ----------------------------------------------------*/
 251          void Fell_Alarm_to_Slave(void)
 252             {
 253   1         if((fell_flag==1)&&(fell_alarm_count<5))
 254   1            {
 255   2            UART_Send_Data(ComMode_5);                                                       
 256   2            fell_alarm_count++;
 257   2            }  
 258   1         }
 259          
 260          /*----------------------------------------------------
 261             Raise_Alarm_to_Slave()
 262             Send raised alarm signal to remote slave
 263          -----------------------------------------------------*/
 264          void Raise_Alarm_to_Slave(void)
 265             {
 266   1         if((raised_flag==1)&&(raised_alarm_count<5))    
 267   1            {
 268   2            UART_Send_Data(ComMode_4);                                                       
 269   2            raised_alarm_count++;
 270   2            }        
 271   1         }
 272          
 273          /*----------------------------------------------------
 274             Batstolen_Alarm_to_Slave()
 275             Send battery stolen alarm signal to remote slave
 276          -----------------------------------------------------*/
 277          void Batstolen_Alarm_to_Slave(void)
 278             {
 279   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 20))
 280   1            {
 281   2            UART_Send_Data(ComMode_2);                                                       
 282   2            battery_stolen_count++;
 283   2            }  
 284   1         }
 285          
 286          /*----------------------------------------------------
 287             Disable_sensor_after_IDcert()
 288          -----------------------------------------------------*/
 289          void Disable_sensor_after_IDcert(void)
 290             {
 291   1         if(IDkey_speech_flash == 1)
 292   1            {
 293   2            IDkey_speech_flash = 0;
 294   2      
 295   2            disable_sensor();
 296   2            }  
 297   1         }
 298          
 299          /*----------------------------------------------------
 300             Reset_after_wirebroken()
 301          -----------------------------------------------------*/
 302          void Reset_after_wirebroken(void)
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 6   

 303             {
 304   1         if(wire_broken_reset == 1)
 305   1            {
 306   2            wire_broken_reset = 0;
 307   2            host_stolen_alarm1_count = 0;
 308   2            EN_host_stolen_alarming = 0;           
 309   2            Host_stolen_alarming = 0;
 310   2            sensor_3rdalarm_flag = 0;
 311   2            }
 312   1         }
 313          
 314          /*----------------------------------------------------
 315             Reset_after_stolen_alarming()
 316             15 tickets after stolen alarm, shut alarm.
 317          -----------------------------------------------------*/
 318          void Reset_after_stolen_alarming(void)
 319             {
 320   1         if(EN_host_stolen_alarming == 1)
 321   1            {
 322   2            if(++Stolen_alarm_reset_count > 5)
 323   2               {
 324   3               host_stolen_alarm1_count = 0;
 325   3               EN_host_stolen_alarming = 0;
 326   3               Host_stolen_alarming = 0;
 327   3               sensor_3rdalarm_flag = 0;
 328   3               Stolen_alarm_reset_count = 0;
 329   3               Generator_lock = 1;
 330   3               close_tranceiver();
 331   3               }
 332   2            }
 333   1         }
 334          
 335          /*-----------------------------------------------------
 336             Ensensor_after_slave_away()
 337          ------------------------------------------------------*/
 338          void Ensensor_after_slave_away(void)
 339             {
 340   1         if((vibration_flag1 == 0)&&(wheeled_flag == 0)&&(Just_power_up == 0))
 341   1            {
 342   2            if(++slave_nearby_count > 6)
 343   2               {
 344   3               slave_nearby_count = 7;
 345   3               slave_nearby_actioned_flag = 0;
 346   3               ID_certificated_flag = 0;
 347   3               if(never_alarm == 0)
 348   3                  Enable_sensor();
 349   3               }
 350   2            }  
 351   1         }
 352          
 353          /*----------------------------------------------------
 354             Detect_selflearn_action()
 355          -----------------------------------------------------*/
 356          void Detect_selflearn_action(void)
 357             {
 358   1         if(key_rotate == 1)
 359   1            {
 360   2            if(wire_broken == 1)
 361   2               {
 362   3               wire_broken_time += 1;
 363   3               if(wire_broken_time >= 6000)
 364   3                  {
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 7   

 365   4                  wire_broken_time = 6001;
 366   4                  wire_broken_level = 0;
 367   4                  ID_selflearning_flag = 0;
 368   4                  }
 369   3               }
 370   2            else
 371   2               {
 372   3               if(wire_broken_time > 50)
 373   3                  {
 374   4                  wire_broken_time = 0;
 375   4                  wire_broken_level += 1;
 376   4                  }
 377   3               }
 378   2            
 379   2            if(wire_broken_level > 6)
 380   2               {
 381   3               wire_broken_level = 0;
 382   3               ID_selflearning_flag = 1;
 383   3               Self_learn_speech();
 384   3               }
 385   2            }
 386   1            
 387   1         if(IDkey_flash_EN == 1)
 388   1            {
 389   2            IDkey_flash_EN = 0;
 390   2            flashing_flag = 1;
 391   2            ID_selflearning_flag = 0;
 392   2            
 393   2            Self_learn_programming();
 394   2            
 395   2            Self_learn_speech();
 396   2            
 397   2            #if (defined Z3) && (defined ID)
                    UART_Send_Data_match();
                    #endif
 400   2            }  
 401   1         }
 402          
 403          /*---------------------------------------------------
 404             Detect_open_action()
 405          ---------------------------------------------------*/
 406          void Detect_open_action(void)
 407             {
 408   1      // if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1)&&(never_alarm == 0))    
 409   1         if((key_rotate == 1)&&(Open_action_flag == 0)&&(ID_certificated_flag == 1))      
 410   1            {
 411   2            disable_sensor();
 412   2            Open_action_flag = 1;
 413   2            ID_speeched_flag = 0;
 414   2            
 415   2            After_IDcert_timecount = 0;
 416   2            ID_certificated_flag = 0;
 417   2            ID_certificated_numbers = 0;
 418   2            slave_nearby_actioned_flag = 1;
 419   2            ElecMotor_CW();
 420   2            slave_nearby_operation();
 421   2            
 422   2            Just_power_up = 0;
 423   2            
 424   2            Generator_lock = 1;
 425   2            }        
 426   1         }
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 8   

 427          
 428          /*---------------------------------------------------
 429             Detect_close_action()
 430          ---------------------------------------------------*/
 431          void Detect_close_action(void)
 432             {
 433   1         if(((key_rotate == 0)||(slave_nearby_actioned_flag == 0))&&(Open_action_flag == 1))
 434   1            {
 435   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 436   2               {
 437   3               key_rotate_off_time += 1;
 438   3               if(key_rotate_off_time >= 1500)
 439   3                  {
 440   4                  if((key_rotate == 0)||(slave_nearby_actioned_flag == 0))
 441   4                     {
 442   5                     ElecMotor_ACW();
 443   5      
 444   5                     Open_action_flag = 0;
 445   5                     slave_away_operation();
 446   5                     IDkey_speech_flash = 0;
 447   5                     ID_speeched_flag = 0;
 448   5                     
 449   5                     }                       
 450   4                  }
 451   3               }
 452   2            }
 453   1         else if(key_rotate == 1)
 454   1            key_rotate_off_time = 0;
 455   1         }
 456          
 457          /*------------------------------------------------------
 458             Detect_vibration()
 459          -------------------------------------------------------*/
 460          void Detect_vibration(void)
 461             {
 462   1         if((sensor_detect == 0)||(horizontal_sensor == 0)||(the3rd_sendor == 0))
 463   1            {
 464   2            vibration_flag = 1;
 465   2            vibration_count = 0;
 466   2            
 467   2            vibration_flag1 = 1;
 468   2            vibration_count1 = 0;   
 469   2            }
 470   1            
 471   1          if(vibration_flag == 1)
 472   1            {
 473   2            if(++vibration_count >= 4000)
 474   2               {
 475   3               vibration_flag = 0;
 476   3               vibration_count = 0;
 477   3               }
 478   2            }
 479   1      
 480   1          if(vibration_flag1 == 1)
 481   1            {
 482   2            if(++vibration_count1 >= 10000)
 483   2               {
 484   3               vibration_flag1 = 0;
 485   3               vibration_count1 = 0;
 486   3               }
 487   2            }
 488   1         }
C51 COMPILER V9.54   OPERATION                                                             10/27/2015 15:34:40 PAGE 9   

 489          
 490          /*----------------------------------------------------
 491             Detect_wheel_moving()
 492          -----------------------------------------------------*/
 493          void Detect_wheel_moving(void)
 494             {
 495   1         if(wheeled_rotate == 1)
 496   1            {
 497   2            wheeled_flag = 1;
 498   2            wheeled_count = 0;
 499   2            }
 500   1         if(wheeled_flag == 1)
 501   1            {
 502   2            if(++wheeled_count >= 2000)
 503   2               {
 504   3               wheeled_flag = 0;
 505   3               wheeled_count = 0;
 506   3               }
 507   2            }  
 508   1         }
 509          
 510          /*---------------------------------------------------
 511             end of file
 512          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    703    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      7    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
