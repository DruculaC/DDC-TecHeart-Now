C51 COMPILER V9.54   MAIN                                                                  05/26/2015 14:09:05 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Main.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Li
                    -brary) DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          
  32          // ------ Private variable definitions -----------------------------
  33          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  34          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  35          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  36          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  37          tByte host_stolen_alarm1_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  38          tByte host_stolen_alarm2_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  39          bit fell_flag=0;                                                //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  40          bit raised_flag=0;                                      //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  41          tByte sensor_2ndstage_count = 0;                //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  42          tWord sensor_3rdstage_time = 0;                 //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  43          tByte sensor_3rdstage_effcount = 0;             //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  44          tByte sensor_3rdstage_count = 0;                        //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  45          tWord sensor_3rdstage_interval = 0;             //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  46          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  47          tByte sensor_trigger_count=0;           //´«¸ĞÆ÷´¥·¢¼ÆÊı
  48          tWord sensor_2ndstage_time=0;           //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  49          tByte sensor_1ststage_count=0;  //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  50          
  51          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  52          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
C51 COMPILER V9.54   MAIN                                                                  05/26/2015 14:09:05 PAGE 2   

  53          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  54          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊı¾İ»º´æ
  55          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  56          tByte data_count = 0;                           //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  57          tByte one_receive_byte = 0;             //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  58          tByte one_receive_byte_count = 0;                       //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  59          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  60          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  61          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  62          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  63          tByte raise_wire_time=0;                        //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  64          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  65          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  66          tByte key_rotated_on_flag = 0;                  //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  67          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  68          tWord load_battery_result = 0;
  69          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  70          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  71          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  72          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  73          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  74          bit vibration_flag = 0;
  75          tWord vibration_count = 0;
  76          bit wire_broken_flag = 0;                       // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  77          bit IDkey_flag = 0;                     // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  78          tByte IDkey_count = 0;          // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  79          tByte enable_sensor_delay_count = 0;            // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  80          bit sensor_3rdalarm_flag = 0;
  81          bit wheeled_flag = 0;
  82          tWord wheeled_count = 0;
  83          bit IDkey_speech_flash = 0;
  84          
  85          code tByte IDkey6 _at_ 0x003000;
  86          code tByte IDkey7 _at_ 0x003001;
  87          code tByte IDkey8 _at_ 0x003002;
  88          code tByte IDkey9 _at_ 0x003003;
  89          code tByte IDkey10 _at_ 0x003004;
  90          code tByte IDkey11 _at_ 0x003005;
  91          
  92          tWord IDkey_selflearn_HVcount = 0;
  93          tWord IDkey_selflearn_LVcount = 0;
  94          bit IDkey_selflearn_flag1 = 0;
  95          bit IDkey_selflearn_flag2 = 0;
  96          bit IDkey_selflearn_flag3 = 0;
  97          bit IDkey_selflearn_flag4 = 0;
  98          bit IDkey_selflearn_flag5 = 0;
  99          bit IDkey_selflearn_flag6 = 0;
 100          tByte IDkey_selflearn_flag6count = 0;
 101          bit IDkey_flash_EN = 0;
 102          
 103          tByte IDkey_certificated_times = 0;
 104          bit Silence_Flag = 0;
 105          bit flashing_flag = 0;
 106          
 107          tByte Check_Motobattery_count = 0;
 108          bit Check_Motobattery_flag = 0;
 109          bit CheckADC_flag = 0;
 110          
C51 COMPILER V9.54   MAIN                                                                  05/26/2015 14:09:05 PAGE 3   

 111          bit never_alarm = 0;
 112          bit never_alarm_speech = 0;
 113          
 114          bit slave_nearby_actioned_flag = 0;
 115          tByte slave_nearby_count = 0;
 116          
 117          bit ID_speeched_flag = 0;
 118          
 119          /*------- Private variable declarations --------------------------*/
 120          
 121          void main()
 122                  {       
 123   1              InitVoice();
 124   1              
 125   1              #ifdef ID
                      InitUART9600();
                 #endif
 128   1              
 129   1              #ifdef WX
 130   1              InitUART600();
 131   1              #endif
 132   1              
 133   1              InitSensor();
 134   1              
 135   1              InitTransceiver();
 136   1              
 137   1              // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 138   1              InitElecmotor();        
 139   1         
 140   1              Externalmotor = Close;
 141   1              
 142   1              // start Timer 0
 143   1              TR0 = 1;
 144   1              position_sensor_EN = 1;
 145   1              
 146   1              while(1)
 147   1                      {
 148   2                      hSCH_Dispatch_Tasks();
 149   2                      if(fell_flag == 1)
 150   2                              {
 151   3                              Alarm_fell_speech();
 152   3                              }       
 153   2                      
 154   2                      if(raised_flag == 1)            
 155   2                              {
 156   3                              Alarm_raised_speech();
 157   3                              }                       
 158   2                      }
 159   1              }
 160          
 161          /*------------------------------------------------------------------
 162                  timerT0()
 163                  operation every ticket.
 164          --------------------------------------------------------------------*/
 165          
 166          void timer0() interrupt interrupt_timer_0_overflow
 167                  {
 168   1              // manually reload timer0 configuration
 169   1              TH0 = timer0_8H;
 170   1              TL0 = timer0_8L;
 171   1      
 172   1              if(raised_sensor_detect == 0)
C51 COMPILER V9.54   MAIN                                                                  05/26/2015 14:09:05 PAGE 4   

 173   1                      {
 174   2                      raised_flag = 1;
 175   2                      fell_flag = 0;
 176   2                      }
 177   1              else
 178   1                      {
 179   2                      raised_flag = 0;
 180   2                      }
 181   1      
 182   1              if(fell_sensor_detect == 0)
 183   1                      {
 184   2                      fell_flag = 1;
 185   2                      raised_flag = 0;
 186   2                      }
 187   1              else
 188   1                      {
 189   2                      fell_flag = 0;
 190   2                      }
 191   1              }
 192          
 193          /*-----------------------------------------------
 194                  UART interrupt
 195          -----------------------------------------------*/
 196          void uart_isr() interrupt 4 
 197                  {
 198   1              if(RI)
 199   1                      {
 200   2                      RI=0;
 201   2                      received_data_buffer[data_count] = SBUF;
 202   2      
 203   2                      // assign one byte to buffer[i] 
 204   2                      
 205   2                      if(IDkey_selflearn_flag6 == 0)
 206   2                              {
 207   3                              // judge whether buffer[0] is CmdHead
 208   3                              if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 209   3                                      {
 210   4                                      data_count = 1;
 211   4                                      }
 212   3                              else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 213   3                                      {
 214   4                                      data_count = 2;
 215   4                                      }
 216   3                              else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 217   3                                      {
 218   4                                      data_count = 3;
 219   4                                      }
 220   3                              else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 221   3                                      {
 222   4                                      data_count = 4;
 223   4                                      }
 224   3                              else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 225   3                                      {
 226   4                                      data_count = 5;
 227   4                                      }
 228   3                              #ifdef ID
                                      else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
                                              {
                                              data_count = 0; 
                                              IDkey_flag = 1;
                                              IDkey_count = 0;
                                              disable_sensor();
C51 COMPILER V9.54   MAIN                                                                  05/26/2015 14:09:05 PAGE 5   

                                              IDkey_speech_flash = 1;
                                              
                                              if(IDkey_certificated_times++ >= 1)
                                                      {
                                                      Silence_Flag = 1;
                                                      }
                                              if(++IDkey_certificated_times >= 11)
                                                      {
                                                      never_alarm = 1;
                                                      never_alarm_speech = 1;
                                                      Silence_Flag = 0;
                                                      IDkey_certificated_times = 0;
                                                      }
                                              }
                                      #endif
 250   3                              #ifdef WX
 251   3                              else if(data_count == 5)
 252   3                                      {
 253   4                                      receive_data_finished_flag = 1;
 254   4                                      data_count = 0;
 255   4                                      }                       
 256   3                              #endif
 257   3                              else 
 258   3                                      {
 259   4                                      data_count = 0;
 260   4                                      }       
 261   3      
 262   3                              #ifdef WX
 263   3                              if(receive_data_finished_flag == 1)
 264   3                                      {
 265   4                                      receive_data_finished_flag  = 0;
 266   4                                      switch(received_data_buffer[5])
 267   4                                              {
 268   5                                              case ComMode_1:
 269   5                                                      {
 270   6                                                      IDkey_flag = 1;
 271   6                                                      IDkey_count = 0;
 272   6                                                      disable_sensor();
 273   6                                                      IDkey_speech_flash = 1;
 274   6                                                      slave_nearby_count = 0;
 275   6                                                      }
 276   5                                              }
 277   4                                      }
 278   3                              #endif
 279   3                              }
 280   2                      else
 281   2                              {                       
 282   3                              #ifdef ID
                                      if(++data_count >= 6)
                                              {
                                              data_count = 0;
                                              IDkey_flash_EN = 1;
                                              }
                                      #endif
 289   3                              }
 290   2                      }
 291   1              }
 292          
 293          
 294          /*---------------------------------------------------
 295                  end of file
 296          ----------------------------------------------------*/
C51 COMPILER V9.54   MAIN                                                                  05/26/2015 14:09:05 PAGE 6   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     56    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     33    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
