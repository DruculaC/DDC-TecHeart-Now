C51 COMPILER V9.54   OPERATION                                                             05/26/2015 14:09:04 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Library\operation.c COMPACT OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2                  operation.c
   3                  各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          #include "schedular.h"
  17          
  18          /*------ private variable --------------------------*/
  19          bit enable_sensor_delayEN = 0;          // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间             
  20          
  21          bit sensor_EN = 0;
  22          
  23          /*------- Public variable declarations --------------------------*/
  24          extern bit position_sensor_EN;          
  25          extern bit fell_flag;                                           
  26          extern bit raised_flag;                         
  27          extern tByte sensor_trigger_count;      
  28          extern tByte sensor_1ststage_count;     
  29          extern bit raised_fell_once_flag;                       
  30          extern bit raised_fell_flag;                                    
  31          extern bit host_stolen_alarm1_EN;     
  32          extern bit host_stolen_alarm2_EN;      
  33          extern tByte host_stolen_alarm1_count;          
  34          extern tByte host_stolen_alarm2_count;          
  35          extern bit stolen_alarm_flag;                                   
  36          extern tWord sensor_3rdstage_time;                      
  37          extern tByte sensor_3rdstage_effcount;          
  38          extern tByte sensor_3rdstage_count;                     
  39          extern tWord sensor_3rdstage_interval;          
  40          extern tWord sensor_2ndstage_time;              
  41          extern tByte sensor_2ndstage_count;             
  42          extern tWord ADC_check_result;          
  43          extern tByte wire_broken_count;         
  44          extern bit wire_broken_flag;                    
  45          extern bit battery_stolen_EN;                   
  46          extern tByte battery_stolen_count;
  47          extern bit sensor_3rdalarm_flag;
  48          extern tByte enable_sensor_delay_count;         
  49          extern bit Silence_Flag;
  50          extern tByte key_rotated_on_flag;               
  51          extern tByte IDkey_certificated_times;
  52          extern bit IDkey_flag;                  
  53          extern tByte IDkey_count;               
  54          extern bit never_alarm;
C51 COMPILER V9.54   OPERATION                                                             05/26/2015 14:09:04 PAGE 2   

  55          extern bit IDkey_selflearn_flag1;
  56          extern bit IDkey_selflearn_flag2;
  57          extern bit IDkey_selflearn_flag3;
  58          extern bit IDkey_selflearn_flag4;
  59          extern bit IDkey_selflearn_flag5;
  60          extern bit IDkey_selflearn_flag6;
  61          extern tByte IDkey_selflearn_flag6count;
  62          extern tWord IDkey_selflearn_HVcount;
  63          extern tWord IDkey_selflearn_LVcount;
  64          extern tByte fell_alarm_count;
  65          extern tByte raised_alarm_count;
  66          extern tByte Check_Motobattery_count;
  67          extern bit Check_Motobattery_flag;
  68          extern tWord load_battery_result;
  69          extern bit ID_speeched_flag;
  70          extern bit slave_nearby_actioned_flag;
  71          
  72          
  73          /*-----------------------------------------
  74                  slave_away_operation()
  75                  
  76                  operation for slave is away
  77          ------------------------------------------*/
  78          void slave_away_operation(void)
  79                  {
  80   1              
  81   1              if(Silence_Flag == 0)
  82   1                      {
  83   2                      close_lock_speech();    
  84   2                      
  85   2                      #ifdef Batterycheck
  86   2                      Check_Motobattery_flag = 1;
  87   2                      Check_Motobattery_count = 0;
  88   2                      #endif
  89   2      
  90   2                 }
  91   1              // enable_sensor();     
  92   1              enable_sensor_delayEN = 1;
  93   1              enable_sensor_delay_count = 0;
  94   1              // delay time, avoid sensor trigger on.
  95   1              Delay(20);
  96   1              IDkey_certificated_times = 0;
  97   1      
  98   1              if(Silence_Flag == 1)
  99   1                      Silence_Flag = 0;
 100   1              }
 101          
 102          /*----------------------------------------------------------------------
 103                          slave_nearby_operation()
 104                          operation for slave is nearby
 105          ----------------------------------------------------------------------*/
 106          void slave_nearby_operation(void)
 107                  {
 108   1              slave_nearby_actioned_flag = 1;
 109   1              
 110   1              ID_speeched_flag = 0;           
 111   1              IDkey_count = 0;
 112   1              IDkey_flag = 0;
 113   1              IDkey_certificated_times = 0;           
 114   1      
 115   1              if(Silence_Flag == 0)
 116   1                      {
C51 COMPILER V9.54   OPERATION                                                             05/26/2015 14:09:04 PAGE 3   

 117   2                      open_lock_speech();
 118   2                      verifybattery(load_battery_result);
 119   2      
 120   2                      key_rotate_on_speech();
 121   2                      }
 122   1              }
 123          
 124          /*------------------------------------------------------------------
 125                  InitSensor()
 126                  Initialise Sensor.
 127          ------------------------------------------------------------------*/
 128          void InitSensor(void)
 129                  {
 130   1              sensor_EN = 0;
 131   1              position_sensor_EN = 0;
 132   1              enable_sensor_delayEN = 0;      
 133   1              raised_sensor_detect = 1;
 134   1              fell_sensor_detect = 1; 
 135   1              }
 136                  
 137          /*------------------------------------------------------------------
 138                  Host_stolen_action()
 139                  Determine host has been triggled 3 times, alarm action.
 140          ------------------------------------------------------------------*/
 141          void Host_stolen_action(void)
 142                  {
 143   1              // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 144   1              if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 145   1                      {
 146   2                      stolen_alarm_flag = 1;
 147   2                      
 148   2                      #ifdef Z3
                              if(wire_broken_flag == 0)
                                      {
                                      UART_Send_Data(ComMode_3);                                                                                                                                                      
                                      }
                              else
                                      {                                                                     
                                      UART_Send_Data(ComMode_6);                                                                                                                                                      
                                      }
                              #endif
 158   2                      
 159   2                      stolen_alarm_speech1();
 160   2                      if(++host_stolen_alarm1_count >= 4)
 161   2                              {
 162   3                              host_stolen_alarm1_count = 0;
 163   3                              host_stolen_alarm1_EN = 0;
 164   3                              stolen_alarm_flag = 0;
 165   3                              sensor_3rdalarm_flag = 0;
 166   3                              }
 167   2                      }
 168   1              if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 169   1                      {
 170   2                      stolen_alarm_flag = 1;
 171   2                      
 172   2                      #ifdef Z3
                              if(wire_broken_flag == 0)
                                      {
                                      UART_Send_Data(ComMode_3);                                                                                                                                                      
                                      }
                              else
                                      {
C51 COMPILER V9.54   OPERATION                                                             05/26/2015 14:09:04 PAGE 4   

                                      UART_Send_Data(ComMode_6);                                                                                                                                                      
                                      }
                              #endif
 182   2                      
 183   2                      stolen_alarm_speech2();
 184   2                      if(++host_stolen_alarm2_count >= 4)
 185   2                              {
 186   3                              host_stolen_alarm2_count = 0;
 187   3                              host_stolen_alarm2_EN = 0;
 188   3                              stolen_alarm_flag = 0;
 189   3                              sensor_3rdalarm_flag = 0;
 190   3                              }
 191   2                      }       
 192   1              }
 193          
 194          /*------------------------------------------------------------------
 195                  ENsensor_afterIDcert()
 196                  4s After ID certificated, enable sensor. 
 197                  If ID certficated 6 times, don't enable sensor.
 198          ------------------------------------------------------------------*/
 199          void ENsensor_afterIDcert(void)
 200                  {
 201   1              if(IDkey_flag == 1)
 202   1                      {
 203   2                      if(++IDkey_count >= 3)
 204   2                              {
 205   3                              IDkey_count = 0;
 206   3                              IDkey_flag = 0;
 207   3                              IDkey_certificated_times = 0;
 208   3                              if((key_rotated_on_flag == 0)&&(never_alarm == 0))
 209   3                                      {
 210   4                                      enable_sensor();                                        
 211   4                                      }                               
 212   3                              never_alarm = 0;
 213   3                              }                       
 214   2                      }
 215   1              }
 216          
 217          /*------------------------------------------------------------------
 218                  ENsensor_After_CloseLock()
 219          ------------------------------------------------------------------*/
 220          void ENsensor_After_CloseLock(void)
 221                  {
 222   1              if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 223   1                      {
 224   2                      if(++enable_sensor_delay_count >= 3)
 225   2                              {
 226   3                              enable_sensor_delay_count = 0;
 227   3                              enable_sensor_delayEN = 0;
 228   3                              enable_sensor();
 229   3                              }
 230   2                      }       
 231   1              }
 232          
 233          /*-----------------------------------------------------------------
 234                  SelfLearn_Reset()
 235                  PIN26 triggles 3 times, the system enters selflearn mode
 236          ------------------------------------------------------------------*/
 237          void SelfLearn_Reset(void)
 238                  {
 239   1              if(IDkey_selflearn_flag6 == 1)
 240   1                      {
C51 COMPILER V9.54   OPERATION                                                             05/26/2015 14:09:04 PAGE 5   

 241   2                      if(++IDkey_selflearn_flag6count > 5)
 242   2                              {
 243   3                              IDkey_selflearn_HVcount = 0;
 244   3                              IDkey_selflearn_LVcount = 0;
 245   3                              IDkey_selflearn_flag1 = 0;
 246   3                              IDkey_selflearn_flag2 = 0;
 247   3                              IDkey_selflearn_flag3 = 0;
 248   3                              IDkey_selflearn_flag4 = 0;
 249   3                              IDkey_selflearn_flag5 = 0;
 250   3                              IDkey_selflearn_flag6 = 0;
 251   3                              IDkey_selflearn_flag6count = 0;                         
 252   3                              }                       
 253   2                      }
 254   1              }
 255          
 256          /*---------------------------------------------------
 257                  Fell_Alarm_to_Slave()
 258                  Send fell alarm signal to remote slave.
 259          ----------------------------------------------------*/
 260          void Fell_Alarm_to_Slave(void)
 261                  {
 262   1              if((fell_flag==1)&&(fell_alarm_count<5))
 263   1                      {
 264   2                      UART_Send_Data(ComMode_5);                                                                                                                                                      
 265   2                      fell_alarm_count++;
 266   2                      }       
 267   1              }
 268          
 269          /*----------------------------------------------------
 270                  Raise_Alarm_to_Slave()
 271                  Send raised alarm signal to remote slave
 272          -----------------------------------------------------*/
 273          void Raise_Alarm_to_Slave(void)
 274                  {
 275   1              if((raised_flag==1)&&(raised_alarm_count<5))            
 276   1                      {
 277   2                      UART_Send_Data(ComMode_4);                                                                                                                                                      
 278   2                      raised_alarm_count++;
 279   2                      }                       
 280   1              }
 281          
 282          /*----------------------------------------------------
 283                  Batstolen_Alarm_to_Slave()
 284                  Send battery stolen alarm signal to remote slave
 285          -----------------------------------------------------*/
 286          void Batstolen_Alarm_to_Slave(void)
 287                  {
 288   1              if((battery_stolen_EN == 1)&&(battery_stolen_count < 5))
 289   1                      {
 290   2                      UART_Send_Data(ComMode_2);                                                                                                                                                      
 291   2                      battery_stolen_count++;
 292   2                      }       
 293   1              }
 294          
 295          /*-----------------------------------------------------
 296                  Never_Alarm_Action()
 297                  ID cert
 298          /*---------------------------------------------------
 299                  end of file
 300          ----------------------------------------------------*/


C51 COMPILER V9.54   OPERATION                                                             05/26/2015 14:09:04 PAGE 6   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    310    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
